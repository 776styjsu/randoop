package foo.bar;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class TestClass0 {

  public static boolean debug = false;

  @Test
  public void test001() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test001"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    java2.util2.Collections.copy(list2, list5);
    // The following exception was thrown during execution.
    try {
      java.lang.Object obj9 = java2.util2.Collections.min((java2.util2.Collection)list5);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);

  }

  @Test
  public void test002() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test002"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set9 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set10 = java2.util2.Collections.unmodifiableSet(set9);
    java2.util2.List list13 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set14 = java2.util2.Collections.singleton((java.lang.Object)0);
    // The following exception was thrown during execution.
    try {
      java2.util2.SortedSet sortedSet15 = treeSet5.subSet((java.lang.Object)set9, (java.lang.Object)set14);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);

  }

  @Test
  public void test003() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test003"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    // The following exception was thrown during execution.
    try {
      boolean b7 = treeSet5.add((java.lang.Object)(short)(-1));
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");

  }

  @Test
  public void test004() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test004"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set13 = java2.util2.Collections.unmodifiableSet(set12);
    java2.util2.TreeSet treeSet14 = new java2.util2.TreeSet((java2.util2.Collection)set12);
    java2.util2.SortedSet sortedSet16 = treeSet14.tailSet((java.lang.Object)(short)0);
    // The following exception was thrown during execution.
    try {
      boolean b17 = treeSet5.add((java.lang.Object)sortedSet16);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet14.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet16);

  }

  @Test
  public void test005() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test005"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    java2.util2.Collections.copy(list2, list5);
    // The following exception was thrown during execution.
    try {
      java2.util2.Collections.swap(list2, 10, 1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);

  }

  @Test
  public void test006() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test006"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list2);
    // The following exception was thrown during execution.
    try {
      java.lang.Object obj4 = java2.util2.Collections.max((java2.util2.Collection)list2);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);

  }

  @Test
  public void test007() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test007"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list3 = java2.util2.Collections.unmodifiableList(list2);
    // The following exception was thrown during execution.
    try {
      java2.util2.Collections.swap(list2, 100, 1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);

  }

  @Test
  public void test008() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test008"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list2);
    java2.util2.List list4 = java2.util2.Collections.unmodifiableList(list2);
    // The following exception was thrown during execution.
    try {
      java.lang.Object obj5 = java2.util2.Collections.min((java2.util2.Collection)list2);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list4);

  }

  @Test
  public void test009() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test009"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    java2.util2.Collections.copy(list2, list5);
    java2.util2.Collections.sort(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);

  }

  @Test
  public void test010() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test010"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.fill(list2, (java.lang.Object)(-1.0d));
    // The following exception was thrown during execution.
    try {
      java2.util2.Collections.swap(list2, 100, (-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);

  }

  @Test
  public void test011() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test011"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java.lang.Object[] obj_array9 = treeSet5.toArray();
    java2.util2.Set set10 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet5);
    java2.util2.List list13 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list13);
    java2.util2.List list15 = java2.util2.Collections.unmodifiableList(list13);
    // The following exception was thrown during execution.
    try {
      java2.util2.SortedSet sortedSet16 = treeSet5.headSet((java.lang.Object)list13);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);

  }

  @Test
  public void test012() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test012"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)1);
    // The following exception was thrown during execution.
    try {
      java2.util2.Collections.sort(list1);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);

  }

  @Test
  public void test013() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test013"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet5);
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set10 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set11 = java2.util2.Collections.unmodifiableSet(set10);
    java2.util2.TreeSet treeSet12 = new java2.util2.TreeSet((java2.util2.Collection)set10);
    java2.util2.SortedSet sortedSet14 = treeSet12.tailSet((java.lang.Object)(short)0);
    // The following exception was thrown during execution.
    try {
      java2.util2.SortedSet sortedSet15 = treeSet5.headSet((java.lang.Object)sortedSet14);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet12.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet12.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet14);

  }

  @Test
  public void test014() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test014"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java.lang.Object[] obj_array9 = treeSet5.toArray();
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set13 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet14 = new java2.util2.TreeSet((java2.util2.Collection)set13);
    java.lang.Object[] obj_array15 = treeSet14.toArray();
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list21);
    java2.util2.List list23 = java2.util2.Collections.unmodifiableList(list21);
    java2.util2.Collections.copy(list18, list21);
    boolean b25 = treeSet14.addAll((java2.util2.Collection)list18);
    java.lang.Object obj26 = treeSet14.first();
    java2.util2.SortedSet sortedSet28 = treeSet14.tailSet((java.lang.Object)"");
    // The following exception was thrown during execution.
    try {
      boolean b29 = treeSet5.contains((java.lang.Object)"");
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet14.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + 0+ "'", obj26.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet28);

  }

  @Test
  public void test015() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test015"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set4 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set4);
    java.lang.Object[] obj_array6 = treeSet5.toArray();
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list12);
    java2.util2.List list14 = java2.util2.Collections.unmodifiableList(list12);
    java2.util2.Collections.copy(list9, list12);
    boolean b16 = treeSet5.addAll((java2.util2.Collection)list9);
    java.lang.Object obj17 = treeSet5.first();
    java2.util2.SortedSet sortedSet19 = treeSet5.tailSet((java.lang.Object)"");
    java2.util2.List list20 = java2.util2.Collections.nCopies(1, (java.lang.Object)treeSet5);
    // The following exception was thrown during execution.
    try {
      java.lang.Object obj21 = java2.util2.Collections.min((java2.util2.Collection)list20);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + 0+ "'", obj17.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);

  }

  @Test
  public void test016() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test016"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet7 = treeSet5.tailSet((java.lang.Object)(short)0);
    java2.util2.Collection collection8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)sortedSet7);
    // The following exception was thrown during execution.
    try {
      java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet(sortedSet7);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);

  }

  @Test
  public void test017() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test017"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.first();
    java2.util2.SortedSet sortedSet18 = treeSet4.tailSet((java.lang.Object)"");
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set22 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet23 = new java2.util2.TreeSet((java2.util2.Collection)set22);
    java.lang.Object[] obj_array24 = treeSet23.toArray();
    // The following exception was thrown during execution.
    try {
      boolean b25 = treeSet4.contains((java.lang.Object)obj_array24);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 0+ "'", obj16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet23.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet23.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet23.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array24);

  }

  @Test
  public void test018() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test018"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java.lang.Object[] obj_array9 = treeSet5.toArray();
    java2.util2.Set set10 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet5);
    java2.util2.List list13 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set14 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet15 = new java2.util2.TreeSet((java2.util2.Collection)set14);
    java.lang.Object[] obj_array16 = treeSet15.toArray();
    java2.util2.List list19 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list22 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list22);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list22);
    java2.util2.Collections.copy(list19, list22);
    boolean b26 = treeSet15.addAll((java2.util2.Collection)list19);
    java2.util2.Comparator comparator27 = treeSet15.comparator();
    // The following exception was thrown during execution.
    try {
      boolean b28 = treeSet5.contains((java.lang.Object)comparator27);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet15.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet15.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator27);

  }

  @Test
  public void test019() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test019"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet7 = treeSet5.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj8 = java2.util2.Collections.max((java2.util2.Collection)treeSet5);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collection collection14 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list13);
    boolean b15 = treeSet5.equals((java.lang.Object)collection14);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet20 = new java2.util2.TreeSet((java2.util2.Collection)set19);
    java.lang.Object[] obj_array21 = treeSet20.toArray();
    java2.util2.List list24 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list27);
    java2.util2.List list29 = java2.util2.Collections.unmodifiableList(list27);
    java2.util2.Collections.copy(list24, list27);
    boolean b31 = treeSet20.addAll((java2.util2.Collection)list24);
    java2.util2.Comparator comparator32 = treeSet20.comparator();
    boolean b33 = treeSet5.removeAll((java2.util2.Collection)treeSet20);
    int i34 = treeSet20.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 0+ "'", obj8.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet20.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet20.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet20.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);

  }

  @Test
  public void test020() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test020"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.first();
    java2.util2.SortedSet sortedSet18 = treeSet4.tailSet((java.lang.Object)"");
    java.lang.String str19 = treeSet4.toString();
    java2.util2.Set set20 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet4);
    boolean b21 = treeSet4.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 0+ "'", obj16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[0]"+ "'", str19.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);

  }

  @Test
  public void test021() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test021"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.fill(list2, (java.lang.Object)(-1.0d));
    // The following exception was thrown during execution.
    try {
      java.lang.Object obj8 = java2.util2.Collections.min((java2.util2.Collection)list2);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);

  }

  @Test
  public void test022() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test022"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list9 = java2.util2.Collections.unmodifiableList(list8);
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list12);
    java2.util2.List list16 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list16);
    int i19 = java2.util2.Collections.binarySearch(list16, (java.lang.Object)(short)100);
    boolean b20 = java2.util2.Collections.replaceAll(list8, (java.lang.Object)list13, (java.lang.Object)list16);
    boolean b21 = treeSet5.retainAll((java2.util2.Collection)list8);
    // The following exception was thrown during execution.
    try {
      java2.util2.Collections.swap(list8, 1, 10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);

  }

  @Test
  public void test023() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test023"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    boolean b6 = treeSet5.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);

  }

  @Test
  public void test024() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test024"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set9 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set10 = java2.util2.Collections.unmodifiableSet(set9);
    java2.util2.TreeSet treeSet11 = new java2.util2.TreeSet((java2.util2.Collection)set9);
    java.lang.Object[] obj_array13 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array14 = treeSet11.toArray(obj_array13);
    java2.util2.List list17 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set18 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet19 = new java2.util2.TreeSet((java2.util2.Collection)set18);
    java.lang.Object[] obj_array20 = treeSet19.toArray();
    java.lang.Object[] obj_array21 = treeSet11.toArray(obj_array20);
    // The following exception was thrown during execution.
    try {
      boolean b22 = treeSet5.remove((java.lang.Object)treeSet11);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet11.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet11.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet11.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet19.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet19.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array21);

  }

  @Test
  public void test025() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test025"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    // The following exception was thrown during execution.
    try {
      boolean b7 = treeSet5.contains((java.lang.Object)"[]");
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");

  }

  @Test
  public void test026() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test026"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet((java2.util2.Collection)set12);
    java.lang.Object[] obj_array14 = treeSet13.toArray();
    java.lang.Object[] obj_array15 = treeSet5.toArray(obj_array14);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set20 = java2.util2.Collections.unmodifiableSet(set19);
    java2.util2.TreeSet treeSet21 = new java2.util2.TreeSet((java2.util2.Collection)set19);
    java2.util2.SortedSet sortedSet23 = treeSet21.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj24 = java2.util2.Collections.max((java2.util2.Collection)treeSet21);
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list27);
    java2.util2.List list29 = java2.util2.Collections.unmodifiableList(list27);
    java2.util2.Collection collection30 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list29);
    boolean b31 = treeSet21.equals((java.lang.Object)collection30);
    java2.util2.List list34 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set35 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet36 = new java2.util2.TreeSet((java2.util2.Collection)set35);
    java.lang.Object[] obj_array37 = treeSet36.toArray();
    java2.util2.List list40 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list43 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list43);
    java2.util2.List list45 = java2.util2.Collections.unmodifiableList(list43);
    java2.util2.Collections.copy(list40, list43);
    boolean b47 = treeSet36.addAll((java2.util2.Collection)list40);
    java2.util2.Comparator comparator48 = treeSet36.comparator();
    boolean b49 = treeSet21.removeAll((java2.util2.Collection)treeSet36);
    boolean b50 = treeSet5.equals((java.lang.Object)b49);
    boolean b51 = treeSet5.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet21.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 0+ "'", obj24.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet36.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet36.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet36.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);

  }

  @Test
  public void test027() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test027"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet7 = treeSet5.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj8 = java2.util2.Collections.max((java2.util2.Collection)treeSet5);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collection collection14 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list13);
    boolean b15 = treeSet5.equals((java.lang.Object)collection14);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet20 = new java2.util2.TreeSet((java2.util2.Collection)set19);
    java.lang.Object[] obj_array21 = treeSet20.toArray();
    java2.util2.List list24 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list27);
    java2.util2.List list29 = java2.util2.Collections.unmodifiableList(list27);
    java2.util2.Collections.copy(list24, list27);
    boolean b31 = treeSet20.addAll((java2.util2.Collection)list24);
    java2.util2.Comparator comparator32 = treeSet20.comparator();
    boolean b33 = treeSet5.removeAll((java2.util2.Collection)treeSet20);
    // The following exception was thrown during execution.
    try {
      java.lang.Object obj34 = treeSet5.first();
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 0+ "'", obj8.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet20.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet20.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet20.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);

  }

  @Test
  public void test028() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test028"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    int i8 = java2.util2.Collections.indexOfSubList(list2, list7);
    java2.util2.Collections.sort(list7);
    java2.util2.Collections.rotate(list7, 0);
    java2.util2.List list12 = java2.util2.Collections.unmodifiableList(list7);
    java2.util2.List list15 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list18);
    java2.util2.List list20 = java2.util2.Collections.unmodifiableList(list18);
    int i21 = java2.util2.Collections.indexOfSubList(list15, list20);
    java2.util2.List list24 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list27);
    java2.util2.List list29 = java2.util2.Collections.unmodifiableList(list27);
    java2.util2.Collections.copy(list24, list27);
    java2.util2.Collections.copy(list20, list24);
    java2.util2.List list34 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list37 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list37);
    java2.util2.List list39 = java2.util2.Collections.unmodifiableList(list37);
    java2.util2.Collections.copy(list34, list37);
    int i41 = java2.util2.Collections.indexOfSubList(list24, list37);
    java2.util2.Comparator comparator42 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list37, comparator42);
    // The following exception was thrown during execution.
    try {
      java.lang.Object obj44 = java2.util2.Collections.max((java2.util2.Collection)list12, comparator42);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator42);

  }

  @Test
  public void test029() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test029"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet7 = treeSet5.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj8 = java2.util2.Collections.max((java2.util2.Collection)treeSet5);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collection collection14 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list13);
    boolean b15 = treeSet5.equals((java.lang.Object)collection14);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list19 = java2.util2.Collections.unmodifiableList(list18);
    java2.util2.List list22 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list23 = java2.util2.Collections.unmodifiableList(list22);
    java2.util2.List list26 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list26);
    int i29 = java2.util2.Collections.binarySearch(list26, (java.lang.Object)(short)100);
    boolean b30 = java2.util2.Collections.replaceAll(list18, (java.lang.Object)list23, (java.lang.Object)list26);
    // The following exception was thrown during execution.
    try {
      java2.util2.SortedSet sortedSet31 = treeSet5.tailSet((java.lang.Object)list26);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 0+ "'", obj8.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);

  }

  @Test
  public void test030() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test030"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.first();
    treeSet4.clear();
    java2.util2.Collection collection18 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 0+ "'", obj16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection18);

  }

  @Test
  public void test031() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test031"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet5);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)sortedSet6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);

  }

  @Test
  public void test032() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test032"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list2);
    java2.util2.List list4 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.Collection collection5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list4);
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    int i14 = java2.util2.Collections.indexOfSubList(list8, list13);
    java2.util2.Collections.sort(list13);
    java2.util2.Collections.rotate(list13, 0);
    int i18 = java2.util2.Collections.indexOfSubList(list4, list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);

  }

  @Test
  public void test033() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test033"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list9 = java2.util2.Collections.unmodifiableList(list8);
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list12);
    java2.util2.List list16 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list16);
    int i19 = java2.util2.Collections.binarySearch(list16, (java.lang.Object)(short)100);
    boolean b20 = java2.util2.Collections.replaceAll(list8, (java.lang.Object)list13, (java.lang.Object)list16);
    boolean b21 = treeSet5.retainAll((java2.util2.Collection)list8);
    java2.util2.Iterator iterator22 = treeSet5.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator22);

  }

  @Test
  public void test034() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test034"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet7 = treeSet5.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj8 = java2.util2.Collections.max((java2.util2.Collection)treeSet5);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collection collection14 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list13);
    boolean b15 = treeSet5.equals((java.lang.Object)collection14);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet20 = new java2.util2.TreeSet((java2.util2.Collection)set19);
    java.lang.Object[] obj_array21 = treeSet20.toArray();
    java2.util2.List list24 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list27);
    java2.util2.List list29 = java2.util2.Collections.unmodifiableList(list27);
    java2.util2.Collections.copy(list24, list27);
    boolean b31 = treeSet20.addAll((java2.util2.Collection)list24);
    java2.util2.Comparator comparator32 = treeSet20.comparator();
    boolean b33 = treeSet5.removeAll((java2.util2.Collection)treeSet20);
    java2.util2.List list36 = java2.util2.Collections.nCopies(0, (java.lang.Object)1);
    boolean b37 = treeSet5.add((java.lang.Object)list36);
    java2.util2.List list40 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set41 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set42 = java2.util2.Collections.unmodifiableSet(set41);
    java2.util2.TreeSet treeSet43 = new java2.util2.TreeSet((java2.util2.Collection)set41);
    java2.util2.SortedSet sortedSet45 = treeSet43.tailSet((java.lang.Object)(short)0);
    java2.util2.List list48 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set49 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set50 = java2.util2.Collections.unmodifiableSet(set49);
    java2.util2.TreeSet treeSet51 = new java2.util2.TreeSet((java2.util2.Collection)set49);
    java2.util2.List list54 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set55 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set56 = java2.util2.Collections.unmodifiableSet(set55);
    java2.util2.TreeSet treeSet57 = new java2.util2.TreeSet((java2.util2.Collection)set55);
    java.lang.Object[] obj_array59 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array60 = treeSet57.toArray(obj_array59);
    java2.util2.List list63 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set64 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet65 = new java2.util2.TreeSet((java2.util2.Collection)set64);
    java.lang.Object[] obj_array66 = treeSet65.toArray();
    java.lang.Object[] obj_array67 = treeSet57.toArray(obj_array66);
    java.lang.Object[] obj_array68 = treeSet51.toArray(obj_array66);
    java.lang.Object[] obj_array69 = treeSet43.toArray(obj_array66);
    java2.util2.List list73 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list76 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list76);
    java2.util2.List list78 = java2.util2.Collections.unmodifiableList(list76);
    int i79 = java2.util2.Collections.indexOfSubList(list73, list78);
    java2.util2.Map map80 = java2.util2.Collections.singletonMap((java.lang.Object)0L, (java.lang.Object)list78);
    boolean b81 = treeSet43.containsAll((java2.util2.Collection)list78);
    java2.util2.Map map82 = java2.util2.Collections.singletonMap((java.lang.Object)b37, (java.lang.Object)list78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[[]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 0+ "'", obj8.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet20.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet20.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet20.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet43.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet43.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet43.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet51.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet51.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet51.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet57.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet57.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet57.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet65.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet65.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet65.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map82);

  }

  @Test
  public void test035() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test035"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list2);
    int i5 = java2.util2.Collections.binarySearch(list2, (java.lang.Object)(short)100);
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    java2.util2.List list15 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list21);
    java2.util2.List list23 = java2.util2.Collections.unmodifiableList(list21);
    int i24 = java2.util2.Collections.indexOfSubList(list18, list23);
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list30 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list30);
    java2.util2.List list32 = java2.util2.Collections.unmodifiableList(list30);
    java2.util2.Collections.copy(list27, list30);
    java2.util2.Collections.copy(list23, list27);
    java2.util2.List list37 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list40 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list40);
    java2.util2.List list42 = java2.util2.Collections.unmodifiableList(list40);
    java2.util2.Collections.copy(list37, list40);
    int i44 = java2.util2.Collections.indexOfSubList(list27, list40);
    java2.util2.Comparator comparator45 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list40, comparator45);
    java2.util2.Collections.sort(list15, comparator45);
    // The following exception was thrown during execution.
    try {
      java.lang.Object obj48 = java2.util2.Collections.min((java2.util2.Collection)list2, comparator45);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator45);

  }

  @Test
  public void test036() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test036"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet7 = treeSet5.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj8 = java2.util2.Collections.max((java2.util2.Collection)treeSet5);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collection collection14 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list13);
    boolean b15 = treeSet5.equals((java.lang.Object)collection14);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet20 = new java2.util2.TreeSet((java2.util2.Collection)set19);
    java.lang.Object[] obj_array21 = treeSet20.toArray();
    java2.util2.List list24 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list27);
    java2.util2.List list29 = java2.util2.Collections.unmodifiableList(list27);
    java2.util2.Collections.copy(list24, list27);
    boolean b31 = treeSet20.addAll((java2.util2.Collection)list24);
    java2.util2.Comparator comparator32 = treeSet20.comparator();
    boolean b33 = treeSet5.removeAll((java2.util2.Collection)treeSet20);
    java2.util2.List list36 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list39 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list39);
    java2.util2.List list41 = java2.util2.Collections.unmodifiableList(list39);
    int i42 = java2.util2.Collections.indexOfSubList(list36, list41);
    java2.util2.Collections.sort(list41);
    java2.util2.Collections.rotate(list41, 0);
    java2.util2.List list46 = java2.util2.Collections.unmodifiableList(list41);
    java2.util2.List list47 = java2.util2.Collections.unmodifiableList(list41);
    java2.util2.TreeSet treeSet48 = new java2.util2.TreeSet();
    java.lang.String str49 = treeSet48.toString();
    java.lang.Object obj50 = treeSet48.clone();
    // The following exception was thrown during execution.
    try {
      java2.util2.SortedSet sortedSet51 = treeSet20.subSet((java.lang.Object)list41, obj50);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 0+ "'", obj8.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet20.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet20.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet20.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet48.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet48.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet48.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "[]"+ "'", str49.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj50);

  }

  @Test
  public void test037() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test037"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    int i8 = java2.util2.Collections.indexOfSubList(list2, list7);
    // The following exception was thrown during execution.
    try {
      java2.util2.Collections.swap(list7, 100, (-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);

  }

  @Test
  public void test038() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test038"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    int i8 = java2.util2.Collections.indexOfSubList(list2, list7);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list14);
    java2.util2.List list16 = java2.util2.Collections.unmodifiableList(list14);
    java2.util2.Collections.copy(list11, list14);
    java2.util2.Collections.copy(list7, list11);
    java2.util2.Collections.sort(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);

  }

  @Test
  public void test039() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test039"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    int i8 = java2.util2.Collections.indexOfSubList(list2, list7);
    java2.util2.Collections.shuffle(list7);
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list15 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list15);
    java2.util2.List list17 = java2.util2.Collections.unmodifiableList(list15);
    int i18 = java2.util2.Collections.indexOfSubList(list12, list17);
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list24 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list24);
    java2.util2.List list26 = java2.util2.Collections.unmodifiableList(list24);
    java2.util2.Collections.copy(list21, list24);
    java2.util2.Collections.copy(list17, list21);
    java2.util2.List list31 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list34 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list34);
    java2.util2.List list36 = java2.util2.Collections.unmodifiableList(list34);
    java2.util2.Collections.copy(list31, list34);
    int i38 = java2.util2.Collections.indexOfSubList(list21, list34);
    java2.util2.Comparator comparator39 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list34, comparator39);
    // The following exception was thrown during execution.
    try {
      java.lang.Object obj41 = java2.util2.Collections.min((java2.util2.Collection)list7, comparator39);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator39);

  }

  @Test
  public void test040() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test040"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    java2.util2.Collections.copy(list2, list5);
    java2.util2.Collections.fill(list2, (java.lang.Object)(short)(-1));
    java2.util2.List list13 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set14 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set15 = java2.util2.Collections.unmodifiableSet(set14);
    java2.util2.TreeSet treeSet16 = new java2.util2.TreeSet((java2.util2.Collection)set14);
    java2.util2.SortedSet sortedSet18 = treeSet16.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj19 = java2.util2.Collections.max((java2.util2.Collection)treeSet16);
    java2.util2.List list22 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list22);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list22);
    java2.util2.Collection collection25 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list24);
    boolean b26 = treeSet16.equals((java.lang.Object)collection25);
    java2.util2.List list29 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set30 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet31 = new java2.util2.TreeSet((java2.util2.Collection)set30);
    java.lang.Object[] obj_array32 = treeSet31.toArray();
    java2.util2.List list35 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list38 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list38);
    java2.util2.List list40 = java2.util2.Collections.unmodifiableList(list38);
    java2.util2.Collections.copy(list35, list38);
    boolean b42 = treeSet31.addAll((java2.util2.Collection)list35);
    java2.util2.Comparator comparator43 = treeSet31.comparator();
    boolean b44 = treeSet16.removeAll((java2.util2.Collection)treeSet31);
    java2.util2.List list47 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list50 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list50);
    java2.util2.List list52 = java2.util2.Collections.unmodifiableList(list50);
    int i53 = java2.util2.Collections.indexOfSubList(list47, list52);
    java2.util2.List list56 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list59 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list59);
    java2.util2.List list61 = java2.util2.Collections.unmodifiableList(list59);
    java2.util2.Collections.copy(list56, list59);
    java2.util2.Collections.copy(list52, list56);
    java2.util2.List list66 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list69 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list69);
    java2.util2.List list71 = java2.util2.Collections.unmodifiableList(list69);
    java2.util2.Collections.copy(list66, list69);
    int i73 = java2.util2.Collections.indexOfSubList(list56, list69);
    java2.util2.Comparator comparator74 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list69, comparator74);
    int i76 = java2.util2.Collections.binarySearch(list2, (java.lang.Object)b44, comparator74);
    // The following exception was thrown during execution.
    try {
      java.lang.Object obj77 = java2.util2.Collections.max((java2.util2.Collection)list2);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet16.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + 0+ "'", obj19.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet31.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet31.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet31.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == (-1));

  }

  @Test
  public void test041() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test041"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.clone();
    java2.util2.List list17 = java2.util2.Collections.singletonList(obj16);
    // The following exception was thrown during execution.
    try {
      java2.util2.Collections.sort(list17);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);

  }

  @Test
  public void test042() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test042"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    java2.util2.Collection collection8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list7);
    java2.util2.Collections.copy(list2, list7);
    // The following exception was thrown during execution.
    try {
      java2.util2.Collections.swap(list2, 1, 10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);

  }

  @Test
  public void test043() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test043"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set4 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set4);
    java.lang.Object[] obj_array6 = treeSet5.toArray();
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list12);
    java2.util2.List list14 = java2.util2.Collections.unmodifiableList(list12);
    java2.util2.Collections.copy(list9, list12);
    boolean b16 = treeSet5.addAll((java2.util2.Collection)list9);
    java.lang.Object obj17 = treeSet5.first();
    java2.util2.SortedSet sortedSet19 = treeSet5.tailSet((java.lang.Object)"");
    java2.util2.List list20 = java2.util2.Collections.nCopies(1, (java.lang.Object)treeSet5);
    java.lang.Object obj21 = treeSet5.last();
    treeSet5.clear();
    java2.util2.List list25 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set26 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet27 = new java2.util2.TreeSet((java2.util2.Collection)set26);
    java.lang.Object[] obj_array28 = treeSet27.toArray();
    java2.util2.List list31 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list34 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list34);
    java2.util2.List list36 = java2.util2.Collections.unmodifiableList(list34);
    java2.util2.Collections.copy(list31, list34);
    boolean b38 = treeSet27.addAll((java2.util2.Collection)list31);
    java2.util2.List list41 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list42 = java2.util2.Collections.unmodifiableList(list41);
    java2.util2.Collections.fill(list31, (java.lang.Object)list42);
    java2.util2.List list44 = java2.util2.Collections.unmodifiableList(list42);
    java2.util2.Collections.rotate(list42, 1);
    // The following exception was thrown during execution.
    try {
      java2.util2.SortedSet sortedSet47 = treeSet5.tailSet((java.lang.Object)list42);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + 0+ "'", obj17.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + 0+ "'", obj21.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet27.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet27.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);

  }

  @Test
  public void test044() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test044"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set7 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet8 = new java2.util2.TreeSet((java2.util2.Collection)set7);
    java.lang.Object[] obj_array9 = treeSet8.toArray();
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list15 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list15);
    java2.util2.List list17 = java2.util2.Collections.unmodifiableList(list15);
    java2.util2.Collections.copy(list12, list15);
    boolean b19 = treeSet8.addAll((java2.util2.Collection)list12);
    java2.util2.List list22 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list23 = java2.util2.Collections.unmodifiableList(list22);
    java2.util2.Collections.fill(list12, (java.lang.Object)list23);
    java2.util2.Collection collection25 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list12);
    java2.util2.List list28 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set29 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set30 = java2.util2.Collections.unmodifiableSet(set29);
    java2.util2.TreeSet treeSet31 = new java2.util2.TreeSet((java2.util2.Collection)set29);
    java2.util2.SortedSet sortedSet33 = treeSet31.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj34 = java2.util2.Collections.max((java2.util2.Collection)treeSet31);
    java2.util2.List list37 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list37);
    java2.util2.List list39 = java2.util2.Collections.unmodifiableList(list37);
    java2.util2.Collection collection40 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list39);
    boolean b41 = treeSet31.equals((java.lang.Object)collection40);
    int i42 = java2.util2.Collections.binarySearch(list12, (java.lang.Object)b41);
    java2.util2.Collections.copy(list2, list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet8.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet31.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet31.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet31.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj34 + "' != '" + 0+ "'", obj34.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == (-1));

  }

  @Test
  public void test045() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test045"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet7 = treeSet5.headSet((java.lang.Object)(short)(-1));
    java2.util2.List list10 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set11 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet12 = new java2.util2.TreeSet((java2.util2.Collection)set11);
    java.lang.Object[] obj_array13 = treeSet12.toArray();
    java2.util2.List list16 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list19 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list19);
    java2.util2.List list21 = java2.util2.Collections.unmodifiableList(list19);
    java2.util2.Collections.copy(list16, list19);
    boolean b23 = treeSet12.addAll((java2.util2.Collection)list16);
    java.lang.Object obj24 = treeSet12.first();
    treeSet12.clear();
    java2.util2.List list28 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set29 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet30 = new java2.util2.TreeSet((java2.util2.Collection)set29);
    java.lang.Object[] obj_array31 = treeSet30.toArray();
    java2.util2.List list34 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list37 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list37);
    java2.util2.List list39 = java2.util2.Collections.unmodifiableList(list37);
    java2.util2.Collections.copy(list34, list37);
    boolean b41 = treeSet30.addAll((java2.util2.Collection)list34);
    java.lang.Object obj42 = treeSet30.clone();
    java2.util2.List list45 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list46 = java2.util2.Collections.unmodifiableList(list45);
    java2.util2.List list49 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list50 = java2.util2.Collections.unmodifiableList(list49);
    java2.util2.List list53 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list53);
    int i56 = java2.util2.Collections.binarySearch(list53, (java.lang.Object)(short)100);
    boolean b57 = java2.util2.Collections.replaceAll(list45, (java.lang.Object)list50, (java.lang.Object)list53);
    boolean b58 = treeSet30.removeAll((java2.util2.Collection)list45);
    java.lang.Object[] obj_array59 = treeSet30.toArray();
    java2.util2.SortedSet sortedSet60 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet30);
    boolean b61 = treeSet12.addAll((java2.util2.Collection)treeSet30);
    java2.util2.SortedSet sortedSet62 = treeSet5.tailSet((java.lang.Object)b61);
    java.lang.Object obj63 = treeSet5.last();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet12.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet12.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 0+ "'", obj24.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet30.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet30.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet30.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj63 + "' != '" + 0+ "'", obj63.equals(0));

  }

  @Test
  public void test046() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test046"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.first();
    java2.util2.SortedSet sortedSet18 = treeSet4.tailSet((java.lang.Object)"");
    java.lang.String str19 = treeSet4.toString();
    int i20 = treeSet4.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 0+ "'", obj16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[0]"+ "'", str19.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);

  }

  @Test
  public void test047() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test047"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list6);
    java2.util2.List list8 = java2.util2.Collections.unmodifiableList(list6);
    java2.util2.Collections.copy(list3, list6);
    java2.util2.List list10 = java2.util2.Collections.unmodifiableList(list6);
    java2.util2.Collection collection11 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list6);
    java2.util2.List list12 = java2.util2.Collections.nCopies(1, (java.lang.Object)list6);
    java2.util2.List list15 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list15);
    java2.util2.List list19 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list22 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list22);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list22);
    int i25 = java2.util2.Collections.indexOfSubList(list19, list24);
    java2.util2.List list26 = java2.util2.Collections.synchronizedList(list24);
    int i27 = java2.util2.Collections.lastIndexOfSubList(list15, list24);
    java2.util2.Collection collection28 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list15);
    java2.util2.List list31 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list34 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list34);
    java2.util2.List list36 = java2.util2.Collections.unmodifiableList(list34);
    java2.util2.Collections.copy(list31, list34);
    java2.util2.List list38 = java2.util2.Collections.unmodifiableList(list34);
    java2.util2.List list41 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list44 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list44);
    java2.util2.List list46 = java2.util2.Collections.unmodifiableList(list44);
    int i47 = java2.util2.Collections.indexOfSubList(list41, list46);
    java2.util2.List list50 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list53 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list53);
    java2.util2.List list55 = java2.util2.Collections.unmodifiableList(list53);
    java2.util2.Collections.copy(list50, list53);
    java2.util2.Collections.copy(list46, list50);
    java2.util2.List list60 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list63 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list63);
    java2.util2.List list65 = java2.util2.Collections.unmodifiableList(list63);
    java2.util2.Collections.copy(list60, list63);
    int i67 = java2.util2.Collections.indexOfSubList(list50, list63);
    java2.util2.Comparator comparator68 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list63, comparator68);
    java2.util2.Collections.sort(list38, comparator68);
    // The following exception was thrown during execution.
    try {
      int i71 = java2.util2.Collections.binarySearch(list12, (java.lang.Object)collection28, comparator68);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator68);

  }

  @Test
  public void test048() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test048"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list6);
    java2.util2.List list8 = java2.util2.Collections.unmodifiableList(list6);
    int i9 = java2.util2.Collections.indexOfSubList(list3, list8);
    java2.util2.Map map10 = java2.util2.Collections.singletonMap((java.lang.Object)0L, (java.lang.Object)list8);
    java2.util2.Map map11 = java2.util2.Collections.synchronizedMap(map10);
    java2.util2.Map map12 = java2.util2.Collections.unmodifiableMap(map11);
    java2.util2.Map map13 = java2.util2.Collections.synchronizedMap(map12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map13);

  }

  @Test
  public void test049() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test049"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    java.lang.String str1 = treeSet0.toString();
    java.lang.Object obj2 = treeSet0.clone();
    boolean b3 = treeSet0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[]"+ "'", str1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);

  }

  @Test
  public void test050() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test050"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.clone();
    java2.util2.List list17 = java2.util2.Collections.singletonList(obj16);
    java2.util2.Collection collection18 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection18);

  }

  @Test
  public void test051() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test051"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    java.lang.String str1 = treeSet0.toString();
    java2.util2.List list4 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list4);
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.fill(list4, (java.lang.Object)(-1.0d));
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set13 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set14 = java2.util2.Collections.unmodifiableSet(set13);
    java2.util2.TreeSet treeSet15 = new java2.util2.TreeSet((java2.util2.Collection)set13);
    java2.util2.SortedSet sortedSet17 = treeSet15.tailSet((java.lang.Object)(short)0);
    java2.util2.Collection collection18 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)sortedSet17);
    java2.util2.List list19 = java2.util2.Collections.singletonList((java.lang.Object)collection18);
    int i20 = java2.util2.Collections.lastIndexOfSubList(list4, list19);
    java2.util2.SortedSet sortedSet21 = treeSet0.headSet((java.lang.Object)i20);
    // The following exception was thrown during execution.
    try {
      java.lang.Object obj22 = treeSet0.first();
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[]"+ "'", str1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet15.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet15.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet21);

  }

  @Test
  public void test052() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test052"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet5);
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list12);
    java2.util2.List list14 = java2.util2.Collections.unmodifiableList(list12);
    int i15 = java2.util2.Collections.indexOfSubList(list9, list14);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list21);
    java2.util2.List list23 = java2.util2.Collections.unmodifiableList(list21);
    java2.util2.Collections.copy(list18, list21);
    java2.util2.Collections.copy(list14, list18);
    java2.util2.List list28 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list31 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list31);
    java2.util2.List list33 = java2.util2.Collections.unmodifiableList(list31);
    java2.util2.Collections.copy(list28, list31);
    int i35 = java2.util2.Collections.indexOfSubList(list18, list31);
    boolean b36 = treeSet5.removeAll((java2.util2.Collection)list31);
    java2.util2.Comparator comparator37 = treeSet5.comparator();
    java2.util2.List list40 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list43 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list43);
    java2.util2.List list45 = java2.util2.Collections.unmodifiableList(list43);
    java2.util2.Collection collection46 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list45);
    java2.util2.Collections.copy(list40, list45);
    // The following exception was thrown during execution.
    try {
      java2.util2.SortedSet sortedSet48 = treeSet5.tailSet((java.lang.Object)list40);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection46);

  }

  @Test
  public void test053() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test053"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.first();
    java2.util2.SortedSet sortedSet18 = treeSet4.tailSet((java.lang.Object)"");
    java.lang.String str19 = treeSet4.toString();
    java2.util2.Set set20 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet4);
    java2.util2.Set set21 = java2.util2.Collections.unmodifiableSet(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 0+ "'", obj16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[0]"+ "'", str19.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);

  }

  @Test
  public void test054() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test054"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list6);
    java2.util2.List list8 = java2.util2.Collections.unmodifiableList(list6);
    int i9 = java2.util2.Collections.indexOfSubList(list3, list8);
    java2.util2.Map map10 = java2.util2.Collections.singletonMap((java.lang.Object)0L, (java.lang.Object)list8);
    java2.util2.Map map11 = java2.util2.Collections.synchronizedMap(map10);
    java2.util2.Map map12 = java2.util2.Collections.synchronizedMap(map11);
    java2.util2.Map map13 = java2.util2.Collections.synchronizedMap(map12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map13);

  }

  @Test
  public void test055() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test055"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet7 = treeSet5.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj8 = java2.util2.Collections.max((java2.util2.Collection)treeSet5);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collection collection14 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list13);
    boolean b15 = treeSet5.equals((java.lang.Object)collection14);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet20 = new java2.util2.TreeSet((java2.util2.Collection)set19);
    java.lang.Object[] obj_array21 = treeSet20.toArray();
    java2.util2.List list24 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list27);
    java2.util2.List list29 = java2.util2.Collections.unmodifiableList(list27);
    java2.util2.Collections.copy(list24, list27);
    boolean b31 = treeSet20.addAll((java2.util2.Collection)list24);
    java2.util2.Comparator comparator32 = treeSet20.comparator();
    boolean b33 = treeSet5.removeAll((java2.util2.Collection)treeSet20);
    java2.util2.List list36 = java2.util2.Collections.nCopies(0, (java.lang.Object)1);
    boolean b37 = treeSet5.add((java.lang.Object)list36);
    java2.util2.List list40 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set41 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet42 = new java2.util2.TreeSet((java2.util2.Collection)set41);
    java.lang.Object[] obj_array43 = treeSet42.toArray();
    java2.util2.List list46 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list49 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list49);
    java2.util2.List list51 = java2.util2.Collections.unmodifiableList(list49);
    java2.util2.Collections.copy(list46, list49);
    boolean b53 = treeSet42.addAll((java2.util2.Collection)list46);
    java.lang.Object obj54 = treeSet42.first();
    treeSet42.clear();
    java2.util2.List list58 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set59 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet60 = new java2.util2.TreeSet((java2.util2.Collection)set59);
    java.lang.Object[] obj_array61 = treeSet60.toArray();
    java2.util2.List list64 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list67 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list67);
    java2.util2.List list69 = java2.util2.Collections.unmodifiableList(list67);
    java2.util2.Collections.copy(list64, list67);
    boolean b71 = treeSet60.addAll((java2.util2.Collection)list64);
    java.lang.Object obj72 = treeSet60.clone();
    java2.util2.List list75 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list76 = java2.util2.Collections.unmodifiableList(list75);
    java2.util2.List list79 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list80 = java2.util2.Collections.unmodifiableList(list79);
    java2.util2.List list83 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list83);
    int i86 = java2.util2.Collections.binarySearch(list83, (java.lang.Object)(short)100);
    boolean b87 = java2.util2.Collections.replaceAll(list75, (java.lang.Object)list80, (java.lang.Object)list83);
    boolean b88 = treeSet60.removeAll((java2.util2.Collection)list75);
    java.lang.Object[] obj_array89 = treeSet60.toArray();
    java2.util2.SortedSet sortedSet90 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet60);
    boolean b91 = treeSet42.addAll((java2.util2.Collection)treeSet60);
    boolean b92 = treeSet5.equals((java.lang.Object)treeSet60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[[]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 0+ "'", obj8.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet20.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet20.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet20.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet42.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet42.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet42.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj54 + "' != '" + 0+ "'", obj54.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet60.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet60.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet60.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);

  }

  @Test
  public void test056() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test056"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.Set set5 = java2.util2.Collections.synchronizedSet(set3);
    java2.util2.Set set6 = java2.util2.Collections.unmodifiableSet(set5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);

  }

  @Test
  public void test057() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test057"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.clone();
    java2.util2.List list19 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list22 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list22);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list22);
    int i25 = java2.util2.Collections.indexOfSubList(list19, list24);
    java2.util2.List list28 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list31 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list31);
    java2.util2.List list33 = java2.util2.Collections.unmodifiableList(list31);
    java2.util2.Collections.copy(list28, list31);
    java2.util2.Collections.copy(list24, list28);
    java2.util2.List list38 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list41 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list41);
    java2.util2.List list43 = java2.util2.Collections.unmodifiableList(list41);
    java2.util2.Collections.copy(list38, list41);
    int i45 = java2.util2.Collections.indexOfSubList(list28, list41);
    boolean b46 = treeSet4.removeAll((java2.util2.Collection)list41);
    java2.util2.List list49 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list52 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list52);
    java2.util2.List list54 = java2.util2.Collections.unmodifiableList(list52);
    java2.util2.Collection collection55 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list54);
    java2.util2.Collections.copy(list49, list54);
    java2.util2.List list59 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list59);
    java2.util2.List list63 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.fill(list59, (java.lang.Object)(-1.0d));
    java2.util2.List list67 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set68 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set69 = java2.util2.Collections.unmodifiableSet(set68);
    java2.util2.TreeSet treeSet70 = new java2.util2.TreeSet((java2.util2.Collection)set68);
    java2.util2.SortedSet sortedSet72 = treeSet70.tailSet((java.lang.Object)(short)0);
    java2.util2.Collection collection73 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)sortedSet72);
    java2.util2.List list74 = java2.util2.Collections.singletonList((java.lang.Object)collection73);
    int i75 = java2.util2.Collections.lastIndexOfSubList(list59, list74);
    int i76 = java2.util2.Collections.lastIndexOfSubList(list49, list59);
    // The following exception was thrown during execution.
    try {
      boolean b77 = treeSet4.contains((java.lang.Object)list59);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet70.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet70.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet70.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);

  }

  @Test
  public void test058() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test058"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list2);
    int i5 = java2.util2.Collections.binarySearch(list2, (java.lang.Object)(short)100);
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    java2.util2.Collections.fill(list8, (java.lang.Object)(short)(-1));
    java2.util2.List list19 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set20 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set21 = java2.util2.Collections.unmodifiableSet(set20);
    java2.util2.TreeSet treeSet22 = new java2.util2.TreeSet((java2.util2.Collection)set20);
    java2.util2.SortedSet sortedSet24 = treeSet22.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj25 = java2.util2.Collections.max((java2.util2.Collection)treeSet22);
    java2.util2.List list28 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list28);
    java2.util2.List list30 = java2.util2.Collections.unmodifiableList(list28);
    java2.util2.Collection collection31 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list30);
    boolean b32 = treeSet22.equals((java.lang.Object)collection31);
    java2.util2.List list35 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set36 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet37 = new java2.util2.TreeSet((java2.util2.Collection)set36);
    java.lang.Object[] obj_array38 = treeSet37.toArray();
    java2.util2.List list41 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list44 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list44);
    java2.util2.List list46 = java2.util2.Collections.unmodifiableList(list44);
    java2.util2.Collections.copy(list41, list44);
    boolean b48 = treeSet37.addAll((java2.util2.Collection)list41);
    java2.util2.Comparator comparator49 = treeSet37.comparator();
    boolean b50 = treeSet22.removeAll((java2.util2.Collection)treeSet37);
    java2.util2.List list53 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list56 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list56);
    java2.util2.List list58 = java2.util2.Collections.unmodifiableList(list56);
    int i59 = java2.util2.Collections.indexOfSubList(list53, list58);
    java2.util2.List list62 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list65 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list65);
    java2.util2.List list67 = java2.util2.Collections.unmodifiableList(list65);
    java2.util2.Collections.copy(list62, list65);
    java2.util2.Collections.copy(list58, list62);
    java2.util2.List list72 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list75 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list75);
    java2.util2.List list77 = java2.util2.Collections.unmodifiableList(list75);
    java2.util2.Collections.copy(list72, list75);
    int i79 = java2.util2.Collections.indexOfSubList(list62, list75);
    java2.util2.Comparator comparator80 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list75, comparator80);
    int i82 = java2.util2.Collections.binarySearch(list8, (java.lang.Object)b50, comparator80);
    java2.util2.Map map83 = java2.util2.Collections.singletonMap((java.lang.Object)list2, (java.lang.Object)list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet22.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet22.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet22.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + 0+ "'", obj25.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet37.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet37.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet37.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map83);

  }

  @Test
  public void test059() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test059"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.clone();
    java2.util2.Comparator comparator17 = treeSet4.comparator();
    java2.util2.List list20 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list21 = java2.util2.Collections.unmodifiableList(list20);
    java2.util2.List list22 = java2.util2.Collections.unmodifiableList(list20);
    // The following exception was thrown during execution.
    try {
      java2.util2.SortedSet sortedSet23 = treeSet4.headSet((java.lang.Object)list22);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);

  }

  @Test
  public void test060() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test060"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java.lang.Object[] obj_array9 = treeSet5.toArray();
    java2.util2.Set set10 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet5);
    java.lang.Object obj11 = treeSet5.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj11);

  }

  @Test
  public void test061() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test061"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    int i8 = java2.util2.Collections.indexOfSubList(list2, list7);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list14);
    java2.util2.List list16 = java2.util2.Collections.unmodifiableList(list14);
    java2.util2.Collections.copy(list11, list14);
    java2.util2.Collections.copy(list7, list11);
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list24 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list24);
    java2.util2.List list26 = java2.util2.Collections.unmodifiableList(list24);
    java2.util2.Collections.copy(list21, list24);
    int i28 = java2.util2.Collections.indexOfSubList(list11, list24);
    java2.util2.Collection collection29 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list11);
    java2.util2.List list32 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list35 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list35);
    java2.util2.List list37 = java2.util2.Collections.unmodifiableList(list35);
    int i38 = java2.util2.Collections.indexOfSubList(list32, list37);
    java2.util2.Collections.sort(list37);
    java2.util2.Collections.rotate(list37, 0);
    java2.util2.List list42 = java2.util2.Collections.unmodifiableList(list37);
    java2.util2.Collections.copy(list11, list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);

  }

  @Test
  public void test062() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test062"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)(short)0);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);

  }

  @Test
  public void test063() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test063"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    int i8 = java2.util2.Collections.indexOfSubList(list2, list7);
    java2.util2.Collections.sort(list7);
    java2.util2.Collections.rotate(list7, 0);
    java2.util2.List list12 = java2.util2.Collections.unmodifiableList(list7);
    java2.util2.Collections.sort(list12);
    java2.util2.Collections.reverse(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);

  }

  @Test
  public void test064() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test064"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    int i8 = java2.util2.Collections.indexOfSubList(list2, list7);
    java2.util2.Collections.sort(list7);
    java2.util2.Collections.rotate(list7, 0);
    java2.util2.List list12 = java2.util2.Collections.unmodifiableList(list7);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list7);
    // The following exception was thrown during execution.
    try {
      java2.util2.Collections.swap(list7, 0, 100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);

  }

  @Test
  public void test065() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test065"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list6);
    java2.util2.List list8 = java2.util2.Collections.unmodifiableList(list6);
    int i9 = java2.util2.Collections.indexOfSubList(list3, list8);
    java2.util2.Map map10 = java2.util2.Collections.singletonMap((java.lang.Object)0L, (java.lang.Object)list8);
    java2.util2.Map map11 = java2.util2.Collections.synchronizedMap(map10);
    java2.util2.Map map12 = java2.util2.Collections.unmodifiableMap(map11);
    java2.util2.Map map13 = java2.util2.Collections.unmodifiableMap(map12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map13);

  }

  @Test
  public void test066() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test066"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet7 = treeSet5.headSet((java.lang.Object)(short)(-1));
    java2.util2.List list10 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set11 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet12 = new java2.util2.TreeSet((java2.util2.Collection)set11);
    java.lang.Object[] obj_array13 = treeSet12.toArray();
    java2.util2.List list16 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list19 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list19);
    java2.util2.List list21 = java2.util2.Collections.unmodifiableList(list19);
    java2.util2.Collections.copy(list16, list19);
    boolean b23 = treeSet12.addAll((java2.util2.Collection)list16);
    java.lang.Object obj24 = treeSet12.first();
    treeSet12.clear();
    java2.util2.List list28 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set29 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet30 = new java2.util2.TreeSet((java2.util2.Collection)set29);
    java.lang.Object[] obj_array31 = treeSet30.toArray();
    java2.util2.List list34 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list37 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list37);
    java2.util2.List list39 = java2.util2.Collections.unmodifiableList(list37);
    java2.util2.Collections.copy(list34, list37);
    boolean b41 = treeSet30.addAll((java2.util2.Collection)list34);
    java.lang.Object obj42 = treeSet30.clone();
    java2.util2.List list45 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list46 = java2.util2.Collections.unmodifiableList(list45);
    java2.util2.List list49 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list50 = java2.util2.Collections.unmodifiableList(list49);
    java2.util2.List list53 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list53);
    int i56 = java2.util2.Collections.binarySearch(list53, (java.lang.Object)(short)100);
    boolean b57 = java2.util2.Collections.replaceAll(list45, (java.lang.Object)list50, (java.lang.Object)list53);
    boolean b58 = treeSet30.removeAll((java2.util2.Collection)list45);
    java.lang.Object[] obj_array59 = treeSet30.toArray();
    java2.util2.SortedSet sortedSet60 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet30);
    boolean b61 = treeSet12.addAll((java2.util2.Collection)treeSet30);
    java2.util2.SortedSet sortedSet62 = treeSet5.tailSet((java.lang.Object)b61);
    int i63 = treeSet5.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet12.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet12.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 0+ "'", obj24.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet30.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet30.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet30.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 1);

  }

  @Test
  public void test067() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test067"); }


    java2.util2.List list4 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list7 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list7);
    java2.util2.List list9 = java2.util2.Collections.unmodifiableList(list7);
    int i10 = java2.util2.Collections.indexOfSubList(list4, list9);
    java2.util2.Map map11 = java2.util2.Collections.singletonMap((java.lang.Object)0L, (java.lang.Object)list9);
    java2.util2.List list12 = java2.util2.Collections.nCopies(1, (java.lang.Object)list9);
    java2.util2.List list15 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list18);
    java2.util2.List list20 = java2.util2.Collections.unmodifiableList(list18);
    int i21 = java2.util2.Collections.indexOfSubList(list15, list20);
    java2.util2.Collections.sort(list20);
    java2.util2.Collections.rotate(list20, 0);
    java2.util2.List list25 = java2.util2.Collections.unmodifiableList(list20);
    java2.util2.Set set26 = java2.util2.Collections.singleton((java.lang.Object)list20);
    java2.util2.List list29 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set30 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set31 = java2.util2.Collections.singleton((java.lang.Object)set30);
    boolean b32 = java2.util2.Collections.replaceAll(list9, (java.lang.Object)set26, (java.lang.Object)set30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);

  }

  @Test
  public void test068() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test068"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet5);
    boolean b7 = treeSet5.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);

  }

  @Test
  public void test069() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test069"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list6);
    java2.util2.List list8 = java2.util2.Collections.unmodifiableList(list6);
    java2.util2.Collections.copy(list3, list6);
    java2.util2.List list10 = java2.util2.Collections.unmodifiableList(list6);
    java2.util2.Collection collection11 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list6);
    java2.util2.List list12 = java2.util2.Collections.nCopies(1, (java.lang.Object)list6);
    java2.util2.Collections.rotate(list12, 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);

  }

  @Test
  public void test070() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test070"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet5);
    java.lang.Object obj7 = treeSet5.clone();
    boolean b9 = treeSet5.equals((java.lang.Object)(byte)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test071() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test071"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.first();
    java2.util2.SortedSet sortedSet18 = treeSet4.tailSet((java.lang.Object)"");
    java.lang.String str19 = treeSet4.toString();
    java2.util2.Set set20 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet4);
    java2.util2.List list21 = java2.util2.Collections.singletonList((java.lang.Object)set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 0+ "'", obj16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[0]"+ "'", str19.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);

  }

  @Test
  public void test072() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test072"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    java.lang.String str1 = treeSet0.toString();
    java.lang.Object obj2 = treeSet0.clone();
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet0);
    java2.util2.Set set4 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[]"+ "'", str1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);

  }

  @Test
  public void test073() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test073"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list6);
    java2.util2.List list8 = java2.util2.Collections.unmodifiableList(list6);
    int i9 = java2.util2.Collections.indexOfSubList(list3, list8);
    java2.util2.Map map10 = java2.util2.Collections.singletonMap((java.lang.Object)0L, (java.lang.Object)list8);
    java2.util2.Map map11 = java2.util2.Collections.synchronizedMap(map10);
    java2.util2.Map map12 = java2.util2.Collections.unmodifiableMap(map11);
    java2.util2.List list13 = java2.util2.Collections.singletonList((java.lang.Object)map12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);

  }

  @Test
  public void test074() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test074"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set4 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set5 = java2.util2.Collections.unmodifiableSet(set4);
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet((java2.util2.Collection)set4);
    java2.util2.SortedSet sortedSet8 = treeSet6.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj9 = java2.util2.Collections.max((java2.util2.Collection)treeSet6);
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list12);
    java2.util2.List list14 = java2.util2.Collections.unmodifiableList(list12);
    java2.util2.Collection collection15 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list14);
    boolean b16 = treeSet6.equals((java.lang.Object)collection15);
    java2.util2.List list19 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set20 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet21 = new java2.util2.TreeSet((java2.util2.Collection)set20);
    java.lang.Object[] obj_array22 = treeSet21.toArray();
    java2.util2.List list25 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list28 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list28);
    java2.util2.List list30 = java2.util2.Collections.unmodifiableList(list28);
    java2.util2.Collections.copy(list25, list28);
    boolean b32 = treeSet21.addAll((java2.util2.Collection)list25);
    java2.util2.Comparator comparator33 = treeSet21.comparator();
    boolean b34 = treeSet6.removeAll((java2.util2.Collection)treeSet21);
    java2.util2.List list35 = java2.util2.Collections.nCopies(1, (java.lang.Object)b34);
    // The following exception was thrown during execution.
    try {
      java2.util2.Collections.sort(list35);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 0+ "'", obj9.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet21.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet21.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);

  }

  @Test
  public void test075() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test075"); }


    java2.util2.List list4 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list7 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list7);
    java2.util2.List list9 = java2.util2.Collections.unmodifiableList(list7);
    int i10 = java2.util2.Collections.indexOfSubList(list4, list9);
    java2.util2.List list11 = java2.util2.Collections.nCopies(100, (java.lang.Object)list9);
    java2.util2.Map map12 = java2.util2.Collections.singletonMap((java.lang.Object)"[0]", (java.lang.Object)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map12);

  }

  @Test
  public void test076() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test076"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    int i8 = java2.util2.Collections.indexOfSubList(list2, list7);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list14);
    java2.util2.List list16 = java2.util2.Collections.unmodifiableList(list14);
    java2.util2.Collections.copy(list11, list14);
    java2.util2.Collections.copy(list7, list11);
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list24 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list24);
    java2.util2.List list26 = java2.util2.Collections.unmodifiableList(list24);
    java2.util2.Collections.copy(list21, list24);
    int i28 = java2.util2.Collections.indexOfSubList(list11, list24);
    java2.util2.Collections.rotate(list24, 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);

  }

  @Test
  public void test077() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test077"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list3 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list6);
    java2.util2.List list10 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list10);
    int i13 = java2.util2.Collections.binarySearch(list10, (java.lang.Object)(short)100);
    boolean b14 = java2.util2.Collections.replaceAll(list2, (java.lang.Object)list7, (java.lang.Object)list10);
    java2.util2.Collections.reverse(list10);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list21);
    java2.util2.List list23 = java2.util2.Collections.unmodifiableList(list21);
    int i24 = java2.util2.Collections.indexOfSubList(list18, list23);
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list30 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list30);
    java2.util2.List list32 = java2.util2.Collections.unmodifiableList(list30);
    java2.util2.Collections.copy(list27, list30);
    java2.util2.Collections.copy(list23, list27);
    java2.util2.List list37 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list40 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list40);
    java2.util2.List list42 = java2.util2.Collections.unmodifiableList(list40);
    java2.util2.Collections.copy(list37, list40);
    java2.util2.List list44 = java2.util2.Collections.unmodifiableList(list40);
    java2.util2.Collections.copy(list27, list44);
    java2.util2.List list48 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set49 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set50 = java2.util2.Collections.unmodifiableSet(set49);
    java2.util2.TreeSet treeSet51 = new java2.util2.TreeSet((java2.util2.Collection)set49);
    java2.util2.List list54 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list57 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list57);
    java2.util2.List list59 = java2.util2.Collections.unmodifiableList(list57);
    java2.util2.Collections.copy(list54, list57);
    java2.util2.List list61 = java2.util2.Collections.unmodifiableList(list57);
    java2.util2.List list64 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list67 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list67);
    java2.util2.List list69 = java2.util2.Collections.unmodifiableList(list67);
    int i70 = java2.util2.Collections.indexOfSubList(list64, list69);
    java2.util2.List list73 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list76 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list76);
    java2.util2.List list78 = java2.util2.Collections.unmodifiableList(list76);
    java2.util2.Collections.copy(list73, list76);
    java2.util2.Collections.copy(list69, list73);
    java2.util2.List list83 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list86 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list86);
    java2.util2.List list88 = java2.util2.Collections.unmodifiableList(list86);
    java2.util2.Collections.copy(list83, list86);
    int i90 = java2.util2.Collections.indexOfSubList(list73, list86);
    java2.util2.Comparator comparator91 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list86, comparator91);
    java2.util2.Collections.sort(list61, comparator91);
    int i94 = java2.util2.Collections.binarySearch(list27, (java.lang.Object)set49, comparator91);
    java2.util2.TreeSet treeSet95 = new java2.util2.TreeSet(comparator91);
    // The following exception was thrown during execution.
    try {
      java.lang.Object obj96 = java2.util2.Collections.min((java2.util2.Collection)list10, comparator91);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet51.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet51.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet51.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet95.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet95.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet95.toString(), "[]");

  }

  @Test
  public void test078() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test078"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    int i8 = java2.util2.Collections.indexOfSubList(list2, list7);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list14);
    java2.util2.List list16 = java2.util2.Collections.unmodifiableList(list14);
    java2.util2.Collections.copy(list11, list14);
    java2.util2.Collections.copy(list7, list11);
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list24 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list24);
    java2.util2.List list26 = java2.util2.Collections.unmodifiableList(list24);
    java2.util2.Collections.copy(list21, list24);
    int i28 = java2.util2.Collections.indexOfSubList(list11, list24);
    java2.util2.Collection collection29 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list11);
    java2.util2.List list32 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set33 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set34 = java2.util2.Collections.unmodifiableSet(set33);
    java2.util2.TreeSet treeSet35 = new java2.util2.TreeSet((java2.util2.Collection)set33);
    java2.util2.Collections.fill(list11, (java.lang.Object)treeSet35);
    java2.util2.Set set37 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet35.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet35.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet35.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set37);

  }

  @Test
  public void test079() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test079"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet7 = treeSet5.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj8 = java2.util2.Collections.max((java2.util2.Collection)treeSet5);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collection collection14 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list13);
    boolean b15 = treeSet5.equals((java.lang.Object)collection14);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet20 = new java2.util2.TreeSet((java2.util2.Collection)set19);
    java.lang.Object[] obj_array21 = treeSet20.toArray();
    java2.util2.List list24 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list27);
    java2.util2.List list29 = java2.util2.Collections.unmodifiableList(list27);
    java2.util2.Collections.copy(list24, list27);
    boolean b31 = treeSet20.addAll((java2.util2.Collection)list24);
    java2.util2.Comparator comparator32 = treeSet20.comparator();
    boolean b33 = treeSet5.removeAll((java2.util2.Collection)treeSet20);
    java.lang.String str34 = treeSet5.toString();
    java2.util2.List list37 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set38 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set39 = java2.util2.Collections.unmodifiableSet(set38);
    java2.util2.TreeSet treeSet40 = new java2.util2.TreeSet((java2.util2.Collection)set38);
    java2.util2.SortedSet sortedSet41 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet40);
    java.lang.Object obj42 = treeSet40.clone();
    java2.util2.SortedSet sortedSet43 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet40);
    java2.util2.List list46 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set47 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set48 = java2.util2.Collections.unmodifiableSet(set47);
    java2.util2.TreeSet treeSet49 = new java2.util2.TreeSet((java2.util2.Collection)set47);
    java2.util2.List list52 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list53 = java2.util2.Collections.unmodifiableList(list52);
    java2.util2.List list56 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list57 = java2.util2.Collections.unmodifiableList(list56);
    java2.util2.List list60 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list60);
    int i63 = java2.util2.Collections.binarySearch(list60, (java.lang.Object)(short)100);
    boolean b64 = java2.util2.Collections.replaceAll(list52, (java.lang.Object)list57, (java.lang.Object)list60);
    boolean b65 = treeSet49.retainAll((java2.util2.Collection)list52);
    java2.util2.List list68 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list71 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list71);
    java2.util2.List list73 = java2.util2.Collections.unmodifiableList(list71);
    int i74 = java2.util2.Collections.indexOfSubList(list68, list73);
    java2.util2.Collections.shuffle(list73);
    boolean b76 = treeSet49.removeAll((java2.util2.Collection)list73);
    // The following exception was thrown during execution.
    try {
      java2.util2.SortedSet sortedSet77 = treeSet5.subSet((java.lang.Object)treeSet40, (java.lang.Object)b76);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 0+ "'", obj8.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet20.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet20.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet20.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "[]"+ "'", str34.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet40.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet40.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet40.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet49.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet49.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet49.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);

  }

  @Test
  public void test080() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test080"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.Comparator comparator16 = treeSet4.comparator();
    java2.util2.Iterator iterator17 = treeSet4.iterator();
    java2.util2.SortedSet sortedSet19 = treeSet4.tailSet((java.lang.Object)0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet19);

  }

  @Test
  public void test081() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test081"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set13 = java2.util2.Collections.unmodifiableSet(set12);
    java2.util2.TreeSet treeSet14 = new java2.util2.TreeSet((java2.util2.Collection)set12);
    java2.util2.List list17 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set18 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set19 = java2.util2.Collections.unmodifiableSet(set18);
    java2.util2.TreeSet treeSet20 = new java2.util2.TreeSet((java2.util2.Collection)set18);
    java.lang.Object[] obj_array22 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array23 = treeSet20.toArray(obj_array22);
    java2.util2.List list26 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set27 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet28 = new java2.util2.TreeSet((java2.util2.Collection)set27);
    java.lang.Object[] obj_array29 = treeSet28.toArray();
    java.lang.Object[] obj_array30 = treeSet20.toArray(obj_array29);
    java.lang.Object[] obj_array31 = treeSet14.toArray(obj_array29);
    java.lang.Object[] obj_array32 = treeSet5.toArray(obj_array31);
    java2.util2.List list35 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list36 = java2.util2.Collections.unmodifiableList(list35);
    java2.util2.List list39 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list40 = java2.util2.Collections.unmodifiableList(list39);
    java2.util2.List list43 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list43);
    int i46 = java2.util2.Collections.binarySearch(list43, (java.lang.Object)(short)100);
    boolean b47 = java2.util2.Collections.replaceAll(list35, (java.lang.Object)list40, (java.lang.Object)list43);
    // The following exception was thrown during execution.
    try {
      boolean b48 = treeSet5.add((java.lang.Object)list35);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet14.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet20.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet20.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet20.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet28.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet28.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet28.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);

  }

  @Test
  public void test082() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test082"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet5);
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list12);
    java2.util2.List list14 = java2.util2.Collections.unmodifiableList(list12);
    int i15 = java2.util2.Collections.indexOfSubList(list9, list14);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list21);
    java2.util2.List list23 = java2.util2.Collections.unmodifiableList(list21);
    java2.util2.Collections.copy(list18, list21);
    java2.util2.Collections.copy(list14, list18);
    java2.util2.List list28 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list31 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list31);
    java2.util2.List list33 = java2.util2.Collections.unmodifiableList(list31);
    java2.util2.Collections.copy(list28, list31);
    int i35 = java2.util2.Collections.indexOfSubList(list18, list31);
    boolean b36 = treeSet5.removeAll((java2.util2.Collection)list31);
    java2.util2.List list39 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list42 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list42);
    java2.util2.List list44 = java2.util2.Collections.unmodifiableList(list42);
    java2.util2.Collections.copy(list39, list42);
    java2.util2.List list46 = java2.util2.Collections.unmodifiableList(list42);
    java2.util2.List list49 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list52 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list52);
    java2.util2.List list54 = java2.util2.Collections.unmodifiableList(list52);
    int i55 = java2.util2.Collections.indexOfSubList(list49, list54);
    java2.util2.List list58 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list61 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list61);
    java2.util2.List list63 = java2.util2.Collections.unmodifiableList(list61);
    java2.util2.Collections.copy(list58, list61);
    java2.util2.Collections.copy(list54, list58);
    java2.util2.List list68 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list71 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list71);
    java2.util2.List list73 = java2.util2.Collections.unmodifiableList(list71);
    java2.util2.Collections.copy(list68, list71);
    int i75 = java2.util2.Collections.indexOfSubList(list58, list71);
    java2.util2.Comparator comparator76 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list71, comparator76);
    java2.util2.Collections.sort(list46, comparator76);
    java2.util2.Collections.copy(list31, list46);
    java2.util2.Collections.reverse(list31);
    // The following exception was thrown during execution.
    try {
      java2.util2.Collections.swap(list31, (-1), 1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator76);

  }

  @Test
  public void test083() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test083"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.clone();
    java2.util2.Comparator comparator17 = treeSet4.comparator();
    java2.util2.TreeSet treeSet18 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet4);
    treeSet18.clear();
    // The following exception was thrown during execution.
    try {
      java.lang.Object obj20 = treeSet18.first();
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet18.toString(), "[]");

  }

  @Test
  public void test084() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test084"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.first();
    treeSet4.clear();
    // The following exception was thrown during execution.
    try {
      java.lang.Object obj18 = treeSet4.first();
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 0+ "'", obj16.equals(0));

  }

  @Test
  public void test085() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test085"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet7 = treeSet5.headSet((java.lang.Object)(short)(-1));
    java.lang.Object obj8 = treeSet5.last();
    java.lang.Object[] obj_array9 = treeSet5.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 0+ "'", obj8.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);

  }

  @Test
  public void test086() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test086"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet5);
    java.lang.Object obj7 = treeSet5.clone();
    boolean b8 = treeSet5.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test087() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test087"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)1);
    java2.util2.Collection collection3 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);

  }

  @Test
  public void test088() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test088"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list6);
    java2.util2.List list8 = java2.util2.Collections.unmodifiableList(list6);
    int i9 = java2.util2.Collections.indexOfSubList(list3, list8);
    java2.util2.List list10 = java2.util2.Collections.nCopies(100, (java.lang.Object)list8);
    java2.util2.List list11 = java2.util2.Collections.singletonList((java.lang.Object)list10);
    java2.util2.Comparator comparator12 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj13 = java2.util2.Collections.max((java2.util2.Collection)list11, comparator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj13);

  }

  @Test
  public void test089() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test089"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list19 = java2.util2.Collections.unmodifiableList(list18);
    java2.util2.Collections.fill(list8, (java.lang.Object)list19);
    java2.util2.List list23 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list26 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list26);
    java2.util2.List list28 = java2.util2.Collections.unmodifiableList(list26);
    int i29 = java2.util2.Collections.indexOfSubList(list23, list28);
    java2.util2.Collections.sort(list28);
    java2.util2.Collections.rotate(list28, 0);
    java2.util2.List list33 = java2.util2.Collections.unmodifiableList(list28);
    java2.util2.Collections.copy(list8, list33);
    java2.util2.List list37 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set38 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet39 = new java2.util2.TreeSet((java2.util2.Collection)set38);
    java.lang.Object[] obj_array40 = treeSet39.toArray();
    java2.util2.List list43 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list46 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list46);
    java2.util2.List list48 = java2.util2.Collections.unmodifiableList(list46);
    java2.util2.Collections.copy(list43, list46);
    boolean b50 = treeSet39.addAll((java2.util2.Collection)list43);
    java2.util2.List list53 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list54 = java2.util2.Collections.unmodifiableList(list53);
    java2.util2.Collections.fill(list43, (java.lang.Object)list54);
    java2.util2.Collection collection56 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list43);
    java2.util2.List list59 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set60 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set61 = java2.util2.Collections.unmodifiableSet(set60);
    java2.util2.TreeSet treeSet62 = new java2.util2.TreeSet((java2.util2.Collection)set60);
    java2.util2.SortedSet sortedSet64 = treeSet62.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj65 = java2.util2.Collections.max((java2.util2.Collection)treeSet62);
    java2.util2.List list68 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list68);
    java2.util2.List list70 = java2.util2.Collections.unmodifiableList(list68);
    java2.util2.Collection collection71 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list70);
    boolean b72 = treeSet62.equals((java.lang.Object)collection71);
    int i73 = java2.util2.Collections.binarySearch(list43, (java.lang.Object)b72);
    java2.util2.List list76 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list79 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list79);
    java2.util2.List list81 = java2.util2.Collections.unmodifiableList(list79);
    int i82 = java2.util2.Collections.indexOfSubList(list76, list81);
    int i83 = java2.util2.Collections.indexOfSubList(list43, list76);
    java2.util2.List list86 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set87 = java2.util2.Collections.singleton((java.lang.Object)0);
    boolean b88 = java2.util2.Collections.replaceAll(list8, (java.lang.Object)list76, (java.lang.Object)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet39.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet39.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet39.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet62.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet62.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet62.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj65 + "' != '" + 0+ "'", obj65.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);

  }

  @Test
  public void test090() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test090"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list3 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.List list4 = java2.util2.Collections.unmodifiableList(list2);
    // The following exception was thrown during execution.
    try {
      java2.util2.Collections.swap(list2, 0, 10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list4);

  }

  @Test
  public void test091() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test091"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)1);
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list6 = java2.util2.Collections.unmodifiableList(list5);
    int i7 = java2.util2.Collections.lastIndexOfSubList(list2, list5);
    java2.util2.Collections.shuffle(list5);
    java2.util2.Collections.shuffle(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);

  }

  @Test
  public void test092() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test092"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet7 = treeSet5.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj8 = java2.util2.Collections.max((java2.util2.Collection)treeSet5);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collection collection14 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list13);
    boolean b15 = treeSet5.equals((java.lang.Object)collection14);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet20 = new java2.util2.TreeSet((java2.util2.Collection)set19);
    java.lang.Object[] obj_array21 = treeSet20.toArray();
    java2.util2.List list24 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list27);
    java2.util2.List list29 = java2.util2.Collections.unmodifiableList(list27);
    java2.util2.Collections.copy(list24, list27);
    boolean b31 = treeSet20.addAll((java2.util2.Collection)list24);
    java2.util2.Comparator comparator32 = treeSet20.comparator();
    boolean b33 = treeSet5.removeAll((java2.util2.Collection)treeSet20);
    java.lang.String str34 = treeSet5.toString();
    java2.util2.Set set35 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet5);
    java2.util2.List list38 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set39 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set40 = java2.util2.Collections.unmodifiableSet(set39);
    java2.util2.TreeSet treeSet41 = new java2.util2.TreeSet((java2.util2.Collection)set39);
    java.lang.Object[] obj_array43 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array44 = treeSet41.toArray(obj_array43);
    java.lang.Object[] obj_array45 = treeSet41.toArray();
    java.lang.Object[] obj_array46 = treeSet5.toArray(obj_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 0+ "'", obj8.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet20.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet20.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet20.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "[]"+ "'", str34.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet41.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet41.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet41.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array46);

  }

  @Test
  public void test093() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test093"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.Enumeration enumeration16 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet4);
    java2.util2.ArrayList arrayList17 = java2.util2.Collections.list(enumeration16);
    java2.util2.ArrayList arrayList18 = java2.util2.Collections.list(enumeration16);
    java2.util2.Collections.sort((java2.util2.List)arrayList18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList18);

  }

  @Test
  public void test094() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test094"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.Enumeration enumeration16 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet4);
    java2.util2.ArrayList arrayList17 = java2.util2.Collections.list(enumeration16);
    java2.util2.ArrayList arrayList18 = java2.util2.Collections.list(enumeration16);
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list22 = java2.util2.Collections.unmodifiableList(list21);
    java2.util2.List list25 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list26 = java2.util2.Collections.unmodifiableList(list25);
    java2.util2.List list29 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list29);
    int i32 = java2.util2.Collections.binarySearch(list29, (java.lang.Object)(short)100);
    boolean b33 = java2.util2.Collections.replaceAll(list21, (java.lang.Object)list26, (java.lang.Object)list29);
    java2.util2.Collections.copy((java2.util2.List)arrayList18, list21);
    // The following exception was thrown during execution.
    try {
      java2.util2.Collections.swap((java2.util2.List)arrayList18, 0, 1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);

  }

  @Test
  public void test095() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test095"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    int i8 = java2.util2.Collections.indexOfSubList(list2, list7);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set13 = java2.util2.Collections.unmodifiableSet(set12);
    java2.util2.TreeSet treeSet14 = new java2.util2.TreeSet((java2.util2.Collection)set12);
    java2.util2.SortedSet sortedSet16 = treeSet14.tailSet((java.lang.Object)(short)0);
    java2.util2.List list19 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    boolean b20 = java2.util2.Collections.replaceAll(list2, (java.lang.Object)sortedSet16, (java.lang.Object)(-1.0d));
    java2.util2.List list23 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list26 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list26);
    java2.util2.List list28 = java2.util2.Collections.unmodifiableList(list26);
    int i29 = java2.util2.Collections.indexOfSubList(list23, list28);
    java2.util2.List list32 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list35 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list35);
    java2.util2.List list37 = java2.util2.Collections.unmodifiableList(list35);
    java2.util2.Collections.copy(list32, list35);
    java2.util2.Collections.copy(list28, list32);
    java2.util2.Collections.copy(list2, list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet14.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);

  }

  @Test
  public void test096() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test096"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    int i8 = java2.util2.Collections.indexOfSubList(list2, list7);
    java2.util2.List list9 = java2.util2.Collections.synchronizedList(list7);
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set13 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet14 = new java2.util2.TreeSet((java2.util2.Collection)set13);
    java.lang.Object[] obj_array15 = treeSet14.toArray();
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list21);
    java2.util2.List list23 = java2.util2.Collections.unmodifiableList(list21);
    java2.util2.Collections.copy(list18, list21);
    boolean b25 = treeSet14.addAll((java2.util2.Collection)list18);
    java.lang.Object obj26 = treeSet14.first();
    java2.util2.SortedSet sortedSet28 = treeSet14.tailSet((java.lang.Object)"");
    java.lang.String str29 = treeSet14.toString();
    java2.util2.Set set30 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet14);
    int i31 = java2.util2.Collections.binarySearch(list7, (java.lang.Object)treeSet14);
    int i32 = treeSet14.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet14.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + 0+ "'", obj26.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "[0]"+ "'", str29.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 1);

  }

  @Test
  public void test097() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test097"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    int i8 = java2.util2.Collections.indexOfSubList(list2, list7);
    java2.util2.List list9 = java2.util2.Collections.synchronizedList(list7);
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set13 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet14 = new java2.util2.TreeSet((java2.util2.Collection)set13);
    java.lang.Object[] obj_array15 = treeSet14.toArray();
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list21);
    java2.util2.List list23 = java2.util2.Collections.unmodifiableList(list21);
    java2.util2.Collections.copy(list18, list21);
    boolean b25 = treeSet14.addAll((java2.util2.Collection)list18);
    java.lang.Object obj26 = treeSet14.first();
    java2.util2.SortedSet sortedSet28 = treeSet14.tailSet((java.lang.Object)"");
    java.lang.String str29 = treeSet14.toString();
    java2.util2.Set set30 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet14);
    int i31 = java2.util2.Collections.binarySearch(list7, (java.lang.Object)treeSet14);
    java2.util2.List list34 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list37 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list37);
    java2.util2.List list39 = java2.util2.Collections.unmodifiableList(list37);
    int i40 = java2.util2.Collections.indexOfSubList(list34, list39);
    java2.util2.Collections.sort(list39);
    java2.util2.Collections.rotate(list39, 0);
    java2.util2.List list44 = java2.util2.Collections.unmodifiableList(list39);
    boolean b45 = treeSet14.equals((java.lang.Object)list44);
    java2.util2.List list48 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set49 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set50 = java2.util2.Collections.unmodifiableSet(set49);
    java2.util2.TreeSet treeSet51 = new java2.util2.TreeSet((java2.util2.Collection)set49);
    java.lang.Object obj52 = treeSet51.first();
    java.lang.Object obj53 = java2.util2.Collections.min((java2.util2.Collection)treeSet51);
    boolean b54 = treeSet14.addAll((java2.util2.Collection)treeSet51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet14.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + 0+ "'", obj26.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "[0]"+ "'", str29.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet51.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet51.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet51.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj52 + "' != '" + 0+ "'", obj52.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj53 + "' != '" + 0+ "'", obj53.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);

  }

  @Test
  public void test098() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test098"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set4 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set4);
    java.lang.Object[] obj_array6 = treeSet5.toArray();
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list12);
    java2.util2.List list14 = java2.util2.Collections.unmodifiableList(list12);
    java2.util2.Collections.copy(list9, list12);
    boolean b16 = treeSet5.addAll((java2.util2.Collection)list9);
    java.lang.Object obj17 = treeSet5.first();
    java2.util2.SortedSet sortedSet19 = treeSet5.tailSet((java.lang.Object)"");
    java2.util2.List list20 = java2.util2.Collections.nCopies(1, (java.lang.Object)treeSet5);
    java.lang.Object obj21 = treeSet5.last();
    java2.util2.Set set22 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet5);
    boolean b23 = treeSet5.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + 0+ "'", obj17.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + 0+ "'", obj21.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);

  }

  @Test
  public void test099() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test099"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.first();
    java2.util2.SortedSet sortedSet18 = treeSet4.tailSet((java.lang.Object)"");
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set22 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set23 = java2.util2.Collections.unmodifiableSet(set22);
    java2.util2.TreeSet treeSet24 = new java2.util2.TreeSet((java2.util2.Collection)set22);
    java.lang.Object[] obj_array26 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array27 = treeSet24.toArray(obj_array26);
    java.lang.Object[] obj_array28 = treeSet4.toArray(obj_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 0+ "'", obj16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet24.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet24.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet24.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array28);

  }

  @Test
  public void test100() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test100"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet5);
    java.lang.Object obj7 = treeSet5.clone();
    java2.util2.SortedSet sortedSet8 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet5);
    java2.util2.List list9 = java2.util2.Collections.singletonList((java.lang.Object)treeSet5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);

  }

  @Test
  public void test101() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test101"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)1);
    int i4 = java2.util2.Collections.binarySearch(list2, (java.lang.Object)"");
    java2.util2.List list7 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list10 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list10);
    java2.util2.List list12 = java2.util2.Collections.unmodifiableList(list10);
    java2.util2.Collections.copy(list7, list10);
    java2.util2.Collections.fill(list7, (java.lang.Object)(short)(-1));
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set20 = java2.util2.Collections.unmodifiableSet(set19);
    java2.util2.TreeSet treeSet21 = new java2.util2.TreeSet((java2.util2.Collection)set19);
    java2.util2.SortedSet sortedSet23 = treeSet21.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj24 = java2.util2.Collections.max((java2.util2.Collection)treeSet21);
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list27);
    java2.util2.List list29 = java2.util2.Collections.unmodifiableList(list27);
    java2.util2.Collection collection30 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list29);
    boolean b31 = treeSet21.equals((java.lang.Object)collection30);
    java2.util2.List list34 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set35 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet36 = new java2.util2.TreeSet((java2.util2.Collection)set35);
    java.lang.Object[] obj_array37 = treeSet36.toArray();
    java2.util2.List list40 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list43 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list43);
    java2.util2.List list45 = java2.util2.Collections.unmodifiableList(list43);
    java2.util2.Collections.copy(list40, list43);
    boolean b47 = treeSet36.addAll((java2.util2.Collection)list40);
    java2.util2.Comparator comparator48 = treeSet36.comparator();
    boolean b49 = treeSet21.removeAll((java2.util2.Collection)treeSet36);
    java2.util2.List list52 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list55 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list55);
    java2.util2.List list57 = java2.util2.Collections.unmodifiableList(list55);
    int i58 = java2.util2.Collections.indexOfSubList(list52, list57);
    java2.util2.List list61 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list64 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list64);
    java2.util2.List list66 = java2.util2.Collections.unmodifiableList(list64);
    java2.util2.Collections.copy(list61, list64);
    java2.util2.Collections.copy(list57, list61);
    java2.util2.List list71 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list74 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list74);
    java2.util2.List list76 = java2.util2.Collections.unmodifiableList(list74);
    java2.util2.Collections.copy(list71, list74);
    int i78 = java2.util2.Collections.indexOfSubList(list61, list74);
    java2.util2.Comparator comparator79 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list74, comparator79);
    int i81 = java2.util2.Collections.binarySearch(list7, (java.lang.Object)b49, comparator79);
    java2.util2.Collections.sort(list2, comparator79);
    java2.util2.TreeSet treeSet83 = new java2.util2.TreeSet(comparator79);
    java.lang.Object[] obj_array84 = treeSet83.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet21.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 0+ "'", obj24.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet36.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet36.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet36.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet83.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet83.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet83.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array84);

  }

  @Test
  public void test102() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test102"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet5);
    java.lang.Object obj7 = treeSet5.clone();
    java2.util2.TreeSet treeSet8 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet5);
    java.lang.String str9 = treeSet8.toString();
    java2.util2.SortedSet sortedSet10 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet8.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[0]"+ "'", str9.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet10);

  }

  @Test
  public void test103() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test103"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    int i8 = java2.util2.Collections.indexOfSubList(list2, list7);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list14);
    java2.util2.List list16 = java2.util2.Collections.unmodifiableList(list14);
    java2.util2.Collections.copy(list11, list14);
    java2.util2.Collections.copy(list7, list11);
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list24 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list24);
    java2.util2.List list26 = java2.util2.Collections.unmodifiableList(list24);
    int i27 = java2.util2.Collections.indexOfSubList(list21, list26);
    java2.util2.List list30 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list33 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list33);
    java2.util2.List list35 = java2.util2.Collections.unmodifiableList(list33);
    java2.util2.Collections.copy(list30, list33);
    java2.util2.Collections.copy(list26, list30);
    java2.util2.List list40 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list43 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list43);
    java2.util2.List list45 = java2.util2.Collections.unmodifiableList(list43);
    java2.util2.Collections.copy(list40, list43);
    java2.util2.List list47 = java2.util2.Collections.unmodifiableList(list43);
    java2.util2.Collections.copy(list30, list47);
    java2.util2.List list51 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set52 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set53 = java2.util2.Collections.unmodifiableSet(set52);
    java2.util2.TreeSet treeSet54 = new java2.util2.TreeSet((java2.util2.Collection)set52);
    java2.util2.List list57 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list60 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list60);
    java2.util2.List list62 = java2.util2.Collections.unmodifiableList(list60);
    java2.util2.Collections.copy(list57, list60);
    java2.util2.List list64 = java2.util2.Collections.unmodifiableList(list60);
    java2.util2.List list67 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list70 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list70);
    java2.util2.List list72 = java2.util2.Collections.unmodifiableList(list70);
    int i73 = java2.util2.Collections.indexOfSubList(list67, list72);
    java2.util2.List list76 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list79 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list79);
    java2.util2.List list81 = java2.util2.Collections.unmodifiableList(list79);
    java2.util2.Collections.copy(list76, list79);
    java2.util2.Collections.copy(list72, list76);
    java2.util2.List list86 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list89 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list89);
    java2.util2.List list91 = java2.util2.Collections.unmodifiableList(list89);
    java2.util2.Collections.copy(list86, list89);
    int i93 = java2.util2.Collections.indexOfSubList(list76, list89);
    java2.util2.Comparator comparator94 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list89, comparator94);
    java2.util2.Collections.sort(list64, comparator94);
    int i97 = java2.util2.Collections.binarySearch(list30, (java.lang.Object)set52, comparator94);
    java2.util2.Collections.sort(list11, comparator94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet54.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet54.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet54.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i97 == (-1));

  }

  @Test
  public void test104() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test104"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.fill(list2, (java.lang.Object)(-1.0d));
    java2.util2.List list10 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set11 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set12 = java2.util2.Collections.unmodifiableSet(set11);
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet((java2.util2.Collection)set11);
    java2.util2.SortedSet sortedSet15 = treeSet13.tailSet((java.lang.Object)(short)0);
    java2.util2.Collection collection16 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)sortedSet15);
    java2.util2.List list17 = java2.util2.Collections.singletonList((java.lang.Object)collection16);
    int i18 = java2.util2.Collections.lastIndexOfSubList(list2, list17);
    // The following exception was thrown during execution.
    try {
      java2.util2.Collections.swap(list2, (-1), 0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == (-1));

  }

  @Test
  public void test105() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test105"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set4 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set4);
    java.lang.Object[] obj_array6 = treeSet5.toArray();
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list12);
    java2.util2.List list14 = java2.util2.Collections.unmodifiableList(list12);
    java2.util2.Collections.copy(list9, list12);
    boolean b16 = treeSet5.addAll((java2.util2.Collection)list9);
    java.lang.Object obj17 = treeSet5.first();
    java2.util2.SortedSet sortedSet19 = treeSet5.tailSet((java.lang.Object)"");
    java2.util2.List list20 = java2.util2.Collections.nCopies(1, (java.lang.Object)treeSet5);
    java.lang.Object obj21 = treeSet5.last();
    java2.util2.List list24 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list27);
    java2.util2.List list29 = java2.util2.Collections.unmodifiableList(list27);
    java2.util2.Collection collection30 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list29);
    java2.util2.Collections.copy(list24, list29);
    java2.util2.List list34 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list34);
    java2.util2.List list38 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.fill(list34, (java.lang.Object)(-1.0d));
    java2.util2.List list42 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set43 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set44 = java2.util2.Collections.unmodifiableSet(set43);
    java2.util2.TreeSet treeSet45 = new java2.util2.TreeSet((java2.util2.Collection)set43);
    java2.util2.SortedSet sortedSet47 = treeSet45.tailSet((java.lang.Object)(short)0);
    java2.util2.Collection collection48 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)sortedSet47);
    java2.util2.List list49 = java2.util2.Collections.singletonList((java.lang.Object)collection48);
    int i50 = java2.util2.Collections.lastIndexOfSubList(list34, list49);
    int i51 = java2.util2.Collections.lastIndexOfSubList(list24, list34);
    boolean b52 = treeSet5.addAll((java2.util2.Collection)list24);
    java.lang.Object obj53 = treeSet5.last();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + 0+ "'", obj17.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + 0+ "'", obj21.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet45.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet45.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet45.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj53 + "' != '" + 0+ "'", obj53.equals(0));

  }

  @Test
  public void test106() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test106"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object obj5 = treeSet4.last();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 0+ "'", obj5.equals(0));

  }

  @Test
  public void test107() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test107"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.clone();
    java2.util2.List list19 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list20 = java2.util2.Collections.unmodifiableList(list19);
    java2.util2.List list23 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list23);
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list27);
    int i30 = java2.util2.Collections.binarySearch(list27, (java.lang.Object)(short)100);
    boolean b31 = java2.util2.Collections.replaceAll(list19, (java.lang.Object)list24, (java.lang.Object)list27);
    java2.util2.Collections.reverse(list27);
    // The following exception was thrown during execution.
    try {
      java2.util2.SortedSet sortedSet33 = treeSet4.headSet((java.lang.Object)list27);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);

  }

  @Test
  public void test108() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test108"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet5);
    java.lang.Object[] obj_array7 = treeSet5.toArray();
    java2.util2.Iterator iterator8 = treeSet5.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);

  }

  @Test
  public void test109() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test109"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.Comparator comparator7 = treeSet6.comparator();
    java.lang.Object[] obj_array8 = treeSet6.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);

  }

  @Test
  public void test110() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test110"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet5);
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list12);
    java2.util2.List list14 = java2.util2.Collections.unmodifiableList(list12);
    int i15 = java2.util2.Collections.indexOfSubList(list9, list14);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list21);
    java2.util2.List list23 = java2.util2.Collections.unmodifiableList(list21);
    java2.util2.Collections.copy(list18, list21);
    java2.util2.Collections.copy(list14, list18);
    java2.util2.List list28 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list31 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list31);
    java2.util2.List list33 = java2.util2.Collections.unmodifiableList(list31);
    java2.util2.Collections.copy(list28, list31);
    int i35 = java2.util2.Collections.indexOfSubList(list18, list31);
    boolean b36 = treeSet5.removeAll((java2.util2.Collection)list31);
    java2.util2.Comparator comparator37 = treeSet5.comparator();
    java2.util2.List list40 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set41 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set42 = java2.util2.Collections.unmodifiableSet(set41);
    boolean b43 = treeSet5.equals((java.lang.Object)set41);
    java.lang.Object[] obj_array44 = treeSet5.toArray();
    java2.util2.List list47 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set48 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set49 = java2.util2.Collections.unmodifiableSet(set48);
    java2.util2.List list52 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set53 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet54 = new java2.util2.TreeSet((java2.util2.Collection)set53);
    java.lang.Object[] obj_array55 = treeSet54.toArray();
    java2.util2.List list58 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list61 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list61);
    java2.util2.List list63 = java2.util2.Collections.unmodifiableList(list61);
    java2.util2.Collections.copy(list58, list61);
    boolean b65 = treeSet54.addAll((java2.util2.Collection)list58);
    // The following exception was thrown during execution.
    try {
      java2.util2.SortedSet sortedSet66 = treeSet5.subSet((java.lang.Object)set48, (java.lang.Object)b65);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet54.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet54.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet54.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);

  }

  @Test
  public void test111() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test111"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet5);
    java.lang.Object obj7 = treeSet5.clone();
    java2.util2.TreeSet treeSet8 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet5);
    java.lang.String str9 = treeSet8.toString();
    java2.util2.Comparator comparator10 = treeSet8.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet8.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[0]"+ "'", str9.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator10);

  }

  @Test
  public void test112() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test112"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.Enumeration enumeration16 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet4);
    java2.util2.List list19 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set20 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet21 = new java2.util2.TreeSet((java2.util2.Collection)set20);
    java.lang.Object[] obj_array22 = treeSet21.toArray();
    java2.util2.List list25 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list28 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list28);
    java2.util2.List list30 = java2.util2.Collections.unmodifiableList(list28);
    java2.util2.Collections.copy(list25, list28);
    boolean b32 = treeSet21.addAll((java2.util2.Collection)list25);
    java.lang.Object obj33 = treeSet21.clone();
    java2.util2.List list36 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list37 = java2.util2.Collections.unmodifiableList(list36);
    java2.util2.List list40 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list41 = java2.util2.Collections.unmodifiableList(list40);
    java2.util2.List list44 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list44);
    int i47 = java2.util2.Collections.binarySearch(list44, (java.lang.Object)(short)100);
    boolean b48 = java2.util2.Collections.replaceAll(list36, (java.lang.Object)list41, (java.lang.Object)list44);
    boolean b49 = treeSet21.removeAll((java2.util2.Collection)list36);
    java.lang.Object[] obj_array50 = treeSet21.toArray();
    boolean b51 = treeSet4.addAll((java2.util2.Collection)treeSet21);
    java.lang.Object obj52 = java2.util2.Collections.min((java2.util2.Collection)treeSet21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet21.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet21.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj52 + "' != '" + 0+ "'", obj52.equals(0));

  }

  @Test
  public void test113() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test113"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set4 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set4);
    java.lang.Object[] obj_array6 = treeSet5.toArray();
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list12);
    java2.util2.List list14 = java2.util2.Collections.unmodifiableList(list12);
    java2.util2.Collections.copy(list9, list12);
    boolean b16 = treeSet5.addAll((java2.util2.Collection)list9);
    java.lang.Object obj17 = treeSet5.first();
    java2.util2.SortedSet sortedSet19 = treeSet5.tailSet((java.lang.Object)"");
    java2.util2.List list20 = java2.util2.Collections.nCopies(1, (java.lang.Object)treeSet5);
    java.lang.Object obj21 = treeSet5.last();
    java2.util2.Set set22 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + 0+ "'", obj17.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + 0+ "'", obj21.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);

  }

  @Test
  public void test114() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test114"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet5);
    java.lang.Object obj7 = treeSet5.clone();
    java2.util2.SortedSet sortedSet8 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet5);
    java2.util2.Comparator comparator9 = treeSet5.comparator();
    java2.util2.TreeSet treeSet10 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet5);
    java.lang.String str11 = treeSet10.toString();
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set15 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet16 = new java2.util2.TreeSet((java2.util2.Collection)set15);
    java.lang.Object[] obj_array17 = treeSet16.toArray();
    java2.util2.List list20 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list23 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list23);
    java2.util2.List list25 = java2.util2.Collections.unmodifiableList(list23);
    java2.util2.Collections.copy(list20, list23);
    boolean b27 = treeSet16.addAll((java2.util2.Collection)list20);
    java2.util2.Comparator comparator28 = treeSet16.comparator();
    java2.util2.Iterator iterator29 = treeSet16.iterator();
    boolean b30 = treeSet10.removeAll((java2.util2.Collection)treeSet16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet10.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[0]"+ "'", str11.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet16.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet16.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);

  }

  @Test
  public void test115() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test115"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list19 = java2.util2.Collections.unmodifiableList(list18);
    java2.util2.Collections.fill(list8, (java.lang.Object)list19);
    java2.util2.Collection collection21 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list8);
    java2.util2.List list24 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list27);
    java2.util2.List list29 = java2.util2.Collections.unmodifiableList(list27);
    int i30 = java2.util2.Collections.indexOfSubList(list24, list29);
    java2.util2.List list31 = java2.util2.Collections.synchronizedList(list29);
    java2.util2.List list34 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list37 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list37);
    java2.util2.List list39 = java2.util2.Collections.unmodifiableList(list37);
    int i40 = java2.util2.Collections.indexOfSubList(list34, list39);
    java2.util2.List list43 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list46 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list46);
    java2.util2.List list48 = java2.util2.Collections.unmodifiableList(list46);
    java2.util2.Collections.copy(list43, list46);
    java2.util2.Collections.copy(list39, list43);
    java2.util2.List list53 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list56 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list56);
    java2.util2.List list58 = java2.util2.Collections.unmodifiableList(list56);
    java2.util2.Collections.copy(list53, list56);
    int i60 = java2.util2.Collections.indexOfSubList(list43, list56);
    java2.util2.Collections.copy(list29, list43);
    java2.util2.List list64 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list65 = java2.util2.Collections.unmodifiableList(list64);
    java2.util2.List list68 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list69 = java2.util2.Collections.unmodifiableList(list68);
    java2.util2.List list72 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list72);
    int i75 = java2.util2.Collections.binarySearch(list72, (java.lang.Object)(short)100);
    boolean b76 = java2.util2.Collections.replaceAll(list64, (java.lang.Object)list69, (java.lang.Object)list72);
    java2.util2.Collections.copy(list43, list72);
    java2.util2.Collections.copy(list8, list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);

  }

  @Test
  public void test116() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test116"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    java2.util2.Collection collection8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list7);
    java2.util2.Collections.copy(list2, list7);
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list12);
    java2.util2.List list16 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.fill(list12, (java.lang.Object)(-1.0d));
    java2.util2.List list20 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set21 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set22 = java2.util2.Collections.unmodifiableSet(set21);
    java2.util2.TreeSet treeSet23 = new java2.util2.TreeSet((java2.util2.Collection)set21);
    java2.util2.SortedSet sortedSet25 = treeSet23.tailSet((java.lang.Object)(short)0);
    java2.util2.Collection collection26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)sortedSet25);
    java2.util2.List list27 = java2.util2.Collections.singletonList((java.lang.Object)collection26);
    int i28 = java2.util2.Collections.lastIndexOfSubList(list12, list27);
    int i29 = java2.util2.Collections.lastIndexOfSubList(list2, list12);
    java2.util2.List list32 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list35 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list35);
    java2.util2.List list37 = java2.util2.Collections.unmodifiableList(list35);
    int i38 = java2.util2.Collections.indexOfSubList(list32, list37);
    java2.util2.List list39 = java2.util2.Collections.synchronizedList(list37);
    java2.util2.List list42 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list45 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list45);
    java2.util2.List list47 = java2.util2.Collections.unmodifiableList(list45);
    int i48 = java2.util2.Collections.indexOfSubList(list42, list47);
    java2.util2.List list51 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list54 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list54);
    java2.util2.List list56 = java2.util2.Collections.unmodifiableList(list54);
    java2.util2.Collections.copy(list51, list54);
    java2.util2.Collections.copy(list47, list51);
    java2.util2.List list61 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list64 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list64);
    java2.util2.List list66 = java2.util2.Collections.unmodifiableList(list64);
    java2.util2.Collections.copy(list61, list64);
    int i68 = java2.util2.Collections.indexOfSubList(list51, list64);
    java2.util2.Collections.copy(list37, list51);
    int i70 = java2.util2.Collections.binarySearch(list2, (java.lang.Object)list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet23.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet23.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet23.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == (-1));

  }

  @Test
  public void test117() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test117"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java.lang.Object[] obj_array9 = treeSet5.toArray();
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)1);
    int i14 = java2.util2.Collections.binarySearch(list12, (java.lang.Object)"");
    // The following exception was thrown during execution.
    try {
      boolean b15 = treeSet5.remove((java.lang.Object)list12);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test118() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test118"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    int i8 = java2.util2.Collections.indexOfSubList(list2, list7);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set13 = java2.util2.Collections.unmodifiableSet(set12);
    java2.util2.TreeSet treeSet14 = new java2.util2.TreeSet((java2.util2.Collection)set12);
    java2.util2.SortedSet sortedSet16 = treeSet14.tailSet((java.lang.Object)(short)0);
    java2.util2.List list19 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    boolean b20 = java2.util2.Collections.replaceAll(list2, (java.lang.Object)sortedSet16, (java.lang.Object)(-1.0d));
    java2.util2.Collections.rotate(list2, (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet14.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);

  }

  @Test
  public void test119() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test119"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list3 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list6);
    java2.util2.List list10 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list10);
    int i13 = java2.util2.Collections.binarySearch(list10, (java.lang.Object)(short)100);
    boolean b14 = java2.util2.Collections.replaceAll(list2, (java.lang.Object)list7, (java.lang.Object)list10);
    java2.util2.List list17 = java2.util2.Collections.nCopies(0, (java.lang.Object)1);
    int i19 = java2.util2.Collections.binarySearch(list17, (java.lang.Object)"");
    java2.util2.List list22 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list25 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list25);
    java2.util2.List list27 = java2.util2.Collections.unmodifiableList(list25);
    java2.util2.Collections.copy(list22, list25);
    java2.util2.Collections.fill(list22, (java.lang.Object)(short)(-1));
    java2.util2.List list33 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set34 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set35 = java2.util2.Collections.unmodifiableSet(set34);
    java2.util2.TreeSet treeSet36 = new java2.util2.TreeSet((java2.util2.Collection)set34);
    java2.util2.SortedSet sortedSet38 = treeSet36.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj39 = java2.util2.Collections.max((java2.util2.Collection)treeSet36);
    java2.util2.List list42 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list42);
    java2.util2.List list44 = java2.util2.Collections.unmodifiableList(list42);
    java2.util2.Collection collection45 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list44);
    boolean b46 = treeSet36.equals((java.lang.Object)collection45);
    java2.util2.List list49 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set50 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet51 = new java2.util2.TreeSet((java2.util2.Collection)set50);
    java.lang.Object[] obj_array52 = treeSet51.toArray();
    java2.util2.List list55 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list58 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list58);
    java2.util2.List list60 = java2.util2.Collections.unmodifiableList(list58);
    java2.util2.Collections.copy(list55, list58);
    boolean b62 = treeSet51.addAll((java2.util2.Collection)list55);
    java2.util2.Comparator comparator63 = treeSet51.comparator();
    boolean b64 = treeSet36.removeAll((java2.util2.Collection)treeSet51);
    java2.util2.List list67 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list70 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list70);
    java2.util2.List list72 = java2.util2.Collections.unmodifiableList(list70);
    int i73 = java2.util2.Collections.indexOfSubList(list67, list72);
    java2.util2.List list76 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list79 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list79);
    java2.util2.List list81 = java2.util2.Collections.unmodifiableList(list79);
    java2.util2.Collections.copy(list76, list79);
    java2.util2.Collections.copy(list72, list76);
    java2.util2.List list86 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list89 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list89);
    java2.util2.List list91 = java2.util2.Collections.unmodifiableList(list89);
    java2.util2.Collections.copy(list86, list89);
    int i93 = java2.util2.Collections.indexOfSubList(list76, list89);
    java2.util2.Comparator comparator94 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list89, comparator94);
    int i96 = java2.util2.Collections.binarySearch(list22, (java.lang.Object)b64, comparator94);
    java2.util2.Collections.sort(list17, comparator94);
    // The following exception was thrown during execution.
    try {
      java.lang.Object obj98 = java2.util2.Collections.max((java2.util2.Collection)list10, comparator94);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet36.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet36.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet36.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj39 + "' != '" + 0+ "'", obj39.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet51.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet51.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet51.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i96 == (-1));

  }

  @Test
  public void test120() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test120"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.clone();
    java2.util2.Comparator comparator17 = treeSet4.comparator();
    java2.util2.TreeSet treeSet18 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet4);
    treeSet18.clear();
    // The following exception was thrown during execution.
    try {
      java.lang.Object obj20 = treeSet18.last();
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet18.toString(), "[]");

  }

  @Test
  public void test121() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test121"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet((java2.util2.Collection)set12);
    java.lang.Object[] obj_array14 = treeSet13.toArray();
    java.lang.Object[] obj_array15 = treeSet5.toArray(obj_array14);
    boolean b16 = treeSet5.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test122() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test122"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list6);
    java2.util2.List list8 = java2.util2.Collections.unmodifiableList(list6);
    int i9 = java2.util2.Collections.indexOfSubList(list3, list8);
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list15 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list15);
    java2.util2.List list17 = java2.util2.Collections.unmodifiableList(list15);
    java2.util2.Collections.copy(list12, list15);
    java2.util2.Collections.copy(list8, list12);
    java2.util2.List list22 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list25 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list25);
    java2.util2.List list27 = java2.util2.Collections.unmodifiableList(list25);
    java2.util2.Collections.copy(list22, list25);
    int i29 = java2.util2.Collections.indexOfSubList(list12, list25);
    java2.util2.Comparator comparator30 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list25, comparator30);
    boolean b32 = treeSet0.addAll((java2.util2.Collection)list25);
    java2.util2.List list35 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set36 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet37 = new java2.util2.TreeSet((java2.util2.Collection)set36);
    java.lang.Object[] obj_array38 = treeSet37.toArray();
    java2.util2.List list41 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list44 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list44);
    java2.util2.List list46 = java2.util2.Collections.unmodifiableList(list44);
    java2.util2.Collections.copy(list41, list44);
    boolean b48 = treeSet37.addAll((java2.util2.Collection)list41);
    java2.util2.Enumeration enumeration49 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet37);
    boolean b50 = treeSet0.contains((java.lang.Object)treeSet37);
    int i51 = treeSet37.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet37.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet37.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet37.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 1);

  }

  @Test
  public void test123() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test123"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list6);
    java2.util2.List list8 = java2.util2.Collections.unmodifiableList(list6);
    int i9 = java2.util2.Collections.indexOfSubList(list3, list8);
    java2.util2.List list10 = java2.util2.Collections.nCopies(100, (java.lang.Object)list8);
    java2.util2.List list13 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list13);
    java2.util2.List list15 = java2.util2.Collections.unmodifiableList(list13);
    java2.util2.Collection collection16 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list15);
    java2.util2.Collections.shuffle(list15);
    java2.util2.Collections.copy(list8, list15);
    java2.util2.Collections.reverse(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection16);

  }

  @Test
  public void test124() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test124"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    int i8 = java2.util2.Collections.indexOfSubList(list2, list7);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list14);
    java2.util2.List list16 = java2.util2.Collections.unmodifiableList(list14);
    java2.util2.Collections.copy(list11, list14);
    java2.util2.Collections.copy(list7, list11);
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list24 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list24);
    java2.util2.List list26 = java2.util2.Collections.unmodifiableList(list24);
    java2.util2.Collections.copy(list21, list24);
    int i28 = java2.util2.Collections.indexOfSubList(list11, list24);
    java2.util2.Collection collection29 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list11);
    java2.util2.List list32 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set33 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set34 = java2.util2.Collections.unmodifiableSet(set33);
    java2.util2.TreeSet treeSet35 = new java2.util2.TreeSet((java2.util2.Collection)set33);
    java2.util2.Collections.fill(list11, (java.lang.Object)treeSet35);
    java2.util2.Set set37 = java2.util2.Collections.singleton((java.lang.Object)treeSet35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet35.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet35.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet35.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set37);

  }

  @Test
  public void test125() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test125"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet((java2.util2.Collection)set12);
    java.lang.Object[] obj_array14 = treeSet13.toArray();
    java.lang.Object[] obj_array15 = treeSet5.toArray(obj_array14);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set20 = java2.util2.Collections.unmodifiableSet(set19);
    java2.util2.TreeSet treeSet21 = new java2.util2.TreeSet((java2.util2.Collection)set19);
    java2.util2.SortedSet sortedSet23 = treeSet21.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj24 = java2.util2.Collections.max((java2.util2.Collection)treeSet21);
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list27);
    java2.util2.List list29 = java2.util2.Collections.unmodifiableList(list27);
    java2.util2.Collection collection30 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list29);
    boolean b31 = treeSet21.equals((java.lang.Object)collection30);
    java2.util2.List list34 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set35 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet36 = new java2.util2.TreeSet((java2.util2.Collection)set35);
    java.lang.Object[] obj_array37 = treeSet36.toArray();
    java2.util2.List list40 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list43 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list43);
    java2.util2.List list45 = java2.util2.Collections.unmodifiableList(list43);
    java2.util2.Collections.copy(list40, list43);
    boolean b47 = treeSet36.addAll((java2.util2.Collection)list40);
    java2.util2.Comparator comparator48 = treeSet36.comparator();
    boolean b49 = treeSet21.removeAll((java2.util2.Collection)treeSet36);
    boolean b50 = treeSet5.equals((java.lang.Object)b49);
    java2.util2.List list53 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set54 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set55 = java2.util2.Collections.unmodifiableSet(set54);
    java2.util2.TreeSet treeSet56 = new java2.util2.TreeSet((java2.util2.Collection)set54);
    java.lang.Object[] obj_array58 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array59 = treeSet56.toArray(obj_array58);
    java.lang.Object[] obj_array60 = treeSet5.toArray(obj_array59);
    java2.util2.List list63 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set64 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet65 = new java2.util2.TreeSet((java2.util2.Collection)set64);
    java.lang.Object[] obj_array66 = treeSet65.toArray();
    java2.util2.List list69 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list72 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list72);
    java2.util2.List list74 = java2.util2.Collections.unmodifiableList(list72);
    java2.util2.Collections.copy(list69, list72);
    boolean b76 = treeSet65.addAll((java2.util2.Collection)list69);
    java2.util2.List list79 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list80 = java2.util2.Collections.unmodifiableList(list79);
    java2.util2.Collections.fill(list69, (java.lang.Object)list80);
    java2.util2.Collection collection82 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list69);
    java2.util2.Collections.shuffle(list69);
    // The following exception was thrown during execution.
    try {
      boolean b84 = treeSet5.add((java.lang.Object)list69);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet21.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 0+ "'", obj24.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet36.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet36.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet36.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet56.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet56.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet56.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet65.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet65.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet65.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection82);

  }

  @Test
  public void test126() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test126"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet((java2.util2.Collection)set12);
    java.lang.Object[] obj_array14 = treeSet13.toArray();
    java.lang.Object[] obj_array15 = treeSet5.toArray(obj_array14);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet20 = new java2.util2.TreeSet((java2.util2.Collection)set19);
    java.lang.Object[] obj_array21 = treeSet20.toArray();
    java2.util2.List list24 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list27);
    java2.util2.List list29 = java2.util2.Collections.unmodifiableList(list27);
    java2.util2.Collections.copy(list24, list27);
    boolean b31 = treeSet20.addAll((java2.util2.Collection)list24);
    java2.util2.Enumeration enumeration32 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet20);
    // The following exception was thrown during execution.
    try {
      java2.util2.SortedSet sortedSet33 = treeSet5.headSet((java.lang.Object)treeSet20);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet20.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet20.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet20.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration32);

  }

  @Test
  public void test127() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test127"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);

  }

  @Test
  public void test128() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test128"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.first();
    treeSet4.clear();
    java2.util2.List list20 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set21 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet22 = new java2.util2.TreeSet((java2.util2.Collection)set21);
    java.lang.Object[] obj_array23 = treeSet22.toArray();
    java2.util2.List list26 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list29 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list29);
    java2.util2.List list31 = java2.util2.Collections.unmodifiableList(list29);
    java2.util2.Collections.copy(list26, list29);
    boolean b33 = treeSet22.addAll((java2.util2.Collection)list26);
    java.lang.Object obj34 = treeSet22.clone();
    java2.util2.List list37 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list38 = java2.util2.Collections.unmodifiableList(list37);
    java2.util2.List list41 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list42 = java2.util2.Collections.unmodifiableList(list41);
    java2.util2.List list45 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list45);
    int i48 = java2.util2.Collections.binarySearch(list45, (java.lang.Object)(short)100);
    boolean b49 = java2.util2.Collections.replaceAll(list37, (java.lang.Object)list42, (java.lang.Object)list45);
    boolean b50 = treeSet22.removeAll((java2.util2.Collection)list37);
    java.lang.Object[] obj_array51 = treeSet22.toArray();
    java2.util2.SortedSet sortedSet52 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet22);
    boolean b53 = treeSet4.addAll((java2.util2.Collection)treeSet22);
    java2.util2.List list57 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set58 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet59 = new java2.util2.TreeSet((java2.util2.Collection)set58);
    java.lang.Object[] obj_array60 = treeSet59.toArray();
    java2.util2.List list63 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list66 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list66);
    java2.util2.List list68 = java2.util2.Collections.unmodifiableList(list66);
    java2.util2.Collections.copy(list63, list66);
    boolean b70 = treeSet59.addAll((java2.util2.Collection)list63);
    java.lang.Object obj71 = treeSet59.first();
    java2.util2.SortedSet sortedSet73 = treeSet59.tailSet((java.lang.Object)"");
    java2.util2.List list74 = java2.util2.Collections.nCopies(1, (java.lang.Object)treeSet59);
    java.lang.Object obj75 = treeSet59.last();
    java2.util2.Comparator comparator76 = treeSet59.comparator();
    boolean b77 = treeSet22.addAll((java2.util2.Collection)treeSet59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 0+ "'", obj16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet22.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet22.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet22.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet59.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet59.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet59.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj71 + "' != '" + 0+ "'", obj71.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj75 + "' != '" + 0+ "'", obj75.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);

  }

  @Test
  public void test129() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test129"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet7 = treeSet5.headSet((java.lang.Object)(short)(-1));
    java2.util2.List list10 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list13 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list13);
    java2.util2.List list15 = java2.util2.Collections.unmodifiableList(list13);
    int i16 = java2.util2.Collections.indexOfSubList(list10, list15);
    java2.util2.List list19 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list22 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list22);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list22);
    java2.util2.Collections.copy(list19, list22);
    java2.util2.Collections.copy(list15, list19);
    java2.util2.List list29 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list32 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list32);
    java2.util2.List list34 = java2.util2.Collections.unmodifiableList(list32);
    java2.util2.Collections.copy(list29, list32);
    java2.util2.List list36 = java2.util2.Collections.unmodifiableList(list32);
    java2.util2.Collections.copy(list19, list36);
    java2.util2.List list40 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set41 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set42 = java2.util2.Collections.unmodifiableSet(set41);
    java2.util2.TreeSet treeSet43 = new java2.util2.TreeSet((java2.util2.Collection)set41);
    java2.util2.List list46 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list49 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list49);
    java2.util2.List list51 = java2.util2.Collections.unmodifiableList(list49);
    java2.util2.Collections.copy(list46, list49);
    java2.util2.List list53 = java2.util2.Collections.unmodifiableList(list49);
    java2.util2.List list56 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list59 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list59);
    java2.util2.List list61 = java2.util2.Collections.unmodifiableList(list59);
    int i62 = java2.util2.Collections.indexOfSubList(list56, list61);
    java2.util2.List list65 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list68 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list68);
    java2.util2.List list70 = java2.util2.Collections.unmodifiableList(list68);
    java2.util2.Collections.copy(list65, list68);
    java2.util2.Collections.copy(list61, list65);
    java2.util2.List list75 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list78 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list78);
    java2.util2.List list80 = java2.util2.Collections.unmodifiableList(list78);
    java2.util2.Collections.copy(list75, list78);
    int i82 = java2.util2.Collections.indexOfSubList(list65, list78);
    java2.util2.Comparator comparator83 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list78, comparator83);
    java2.util2.Collections.sort(list53, comparator83);
    int i86 = java2.util2.Collections.binarySearch(list19, (java.lang.Object)set41, comparator83);
    java2.util2.TreeSet treeSet87 = new java2.util2.TreeSet(comparator83);
    java.lang.Object obj88 = java2.util2.Collections.min((java2.util2.Collection)treeSet5, comparator83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet43.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet43.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet43.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet87.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet87.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet87.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj88 + "' != '" + 0+ "'", obj88.equals(0));

  }

  @Test
  public void test130() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test130"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet((java2.util2.Collection)set12);
    java.lang.Object[] obj_array14 = treeSet13.toArray();
    java.lang.Object[] obj_array15 = treeSet5.toArray(obj_array14);
    java2.util2.SortedSet sortedSet16 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet5);
    java2.util2.List list19 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list22 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list22);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list22);
    int i25 = java2.util2.Collections.indexOfSubList(list19, list24);
    java2.util2.List list28 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list31 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list31);
    java2.util2.List list33 = java2.util2.Collections.unmodifiableList(list31);
    java2.util2.Collections.copy(list28, list31);
    java2.util2.Collections.copy(list24, list28);
    java2.util2.List list38 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list41 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list41);
    java2.util2.List list43 = java2.util2.Collections.unmodifiableList(list41);
    java2.util2.Collections.copy(list38, list41);
    java2.util2.List list45 = java2.util2.Collections.unmodifiableList(list41);
    java2.util2.Collections.copy(list28, list45);
    java2.util2.List list49 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set50 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set51 = java2.util2.Collections.unmodifiableSet(set50);
    java2.util2.TreeSet treeSet52 = new java2.util2.TreeSet((java2.util2.Collection)set50);
    java2.util2.List list55 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list58 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list58);
    java2.util2.List list60 = java2.util2.Collections.unmodifiableList(list58);
    java2.util2.Collections.copy(list55, list58);
    java2.util2.List list62 = java2.util2.Collections.unmodifiableList(list58);
    java2.util2.List list65 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list68 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list68);
    java2.util2.List list70 = java2.util2.Collections.unmodifiableList(list68);
    int i71 = java2.util2.Collections.indexOfSubList(list65, list70);
    java2.util2.List list74 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list77 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list77);
    java2.util2.List list79 = java2.util2.Collections.unmodifiableList(list77);
    java2.util2.Collections.copy(list74, list77);
    java2.util2.Collections.copy(list70, list74);
    java2.util2.List list84 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list87 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list87);
    java2.util2.List list89 = java2.util2.Collections.unmodifiableList(list87);
    java2.util2.Collections.copy(list84, list87);
    int i91 = java2.util2.Collections.indexOfSubList(list74, list87);
    java2.util2.Comparator comparator92 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list87, comparator92);
    java2.util2.Collections.sort(list62, comparator92);
    int i95 = java2.util2.Collections.binarySearch(list28, (java.lang.Object)set50, comparator92);
    java2.util2.TreeSet treeSet96 = new java2.util2.TreeSet(comparator92);
    java.lang.Object obj97 = java2.util2.Collections.min((java2.util2.Collection)sortedSet16, comparator92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet52.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet52.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet52.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i95 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet96.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet96.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet96.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj97 + "' != '" + 0+ "'", obj97.equals(0));

  }

  @Test
  public void test131() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test131"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet5);
    java.lang.Object obj7 = treeSet5.clone();
    java2.util2.SortedSet sortedSet8 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet5);
    java2.util2.Comparator comparator9 = treeSet5.comparator();
    java2.util2.TreeSet treeSet10 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet5);
    boolean b11 = treeSet5.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet10.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test132() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test132"); }


    java2.util2.Comparator comparator0 = java2.util2.Collections.reverseOrder();
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java.lang.Object[] obj_array2 = treeSet1.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array2);

  }

  @Test
  public void test133() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test133"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list19 = java2.util2.Collections.unmodifiableList(list18);
    java2.util2.Collections.fill(list8, (java.lang.Object)list19);
    java2.util2.Collection collection21 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list8);
    java2.util2.List list24 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set25 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set26 = java2.util2.Collections.unmodifiableSet(set25);
    java2.util2.TreeSet treeSet27 = new java2.util2.TreeSet((java2.util2.Collection)set25);
    java2.util2.SortedSet sortedSet29 = treeSet27.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj30 = java2.util2.Collections.max((java2.util2.Collection)treeSet27);
    java2.util2.List list33 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list33);
    java2.util2.List list35 = java2.util2.Collections.unmodifiableList(list33);
    java2.util2.Collection collection36 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list35);
    boolean b37 = treeSet27.equals((java.lang.Object)collection36);
    int i38 = java2.util2.Collections.binarySearch(list8, (java.lang.Object)b37);
    java2.util2.List list41 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list44 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list44);
    java2.util2.List list46 = java2.util2.Collections.unmodifiableList(list44);
    int i47 = java2.util2.Collections.indexOfSubList(list41, list46);
    int i48 = java2.util2.Collections.indexOfSubList(list8, list41);
    int i50 = java2.util2.Collections.binarySearch(list41, (java.lang.Object)(short)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet27.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet27.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj30 + "' != '" + 0+ "'", obj30.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == (-1));

  }

  @Test
  public void test134() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test134"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list6);
    java2.util2.List list8 = java2.util2.Collections.unmodifiableList(list6);
    int i9 = java2.util2.Collections.indexOfSubList(list3, list8);
    java2.util2.List list10 = java2.util2.Collections.nCopies(100, (java.lang.Object)list8);
    java2.util2.Collections.rotate(list8, 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);

  }

  @Test
  public void test135() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test135"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    java.lang.String str1 = treeSet0.toString();
    java2.util2.List list4 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list4);
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.fill(list4, (java.lang.Object)(-1.0d));
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set13 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set14 = java2.util2.Collections.unmodifiableSet(set13);
    java2.util2.TreeSet treeSet15 = new java2.util2.TreeSet((java2.util2.Collection)set13);
    java2.util2.SortedSet sortedSet17 = treeSet15.tailSet((java.lang.Object)(short)0);
    java2.util2.Collection collection18 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)sortedSet17);
    java2.util2.List list19 = java2.util2.Collections.singletonList((java.lang.Object)collection18);
    int i20 = java2.util2.Collections.lastIndexOfSubList(list4, list19);
    java2.util2.SortedSet sortedSet21 = treeSet0.headSet((java.lang.Object)i20);
    // The following exception was thrown during execution.
    try {
      java.lang.Object obj22 = java2.util2.Collections.max((java2.util2.Collection)treeSet0);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[]"+ "'", str1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet15.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet15.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet21);

  }

  @Test
  public void test136() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test136"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list3 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.List list4 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.List list5 = java2.util2.Collections.unmodifiableList(list4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);

  }

  @Test
  public void test137() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test137"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list19 = java2.util2.Collections.unmodifiableList(list18);
    java2.util2.Collections.fill(list8, (java.lang.Object)list19);
    java2.util2.List list21 = java2.util2.Collections.synchronizedList(list8);
    // The following exception was thrown during execution.
    try {
      java2.util2.Collections.swap(list21, 1, 0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);

  }

  @Test
  public void test138() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test138"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list6);
    java2.util2.List list8 = java2.util2.Collections.unmodifiableList(list6);
    int i9 = java2.util2.Collections.indexOfSubList(list3, list8);
    java2.util2.Map map10 = java2.util2.Collections.singletonMap((java.lang.Object)0L, (java.lang.Object)list8);
    java2.util2.Map map11 = java2.util2.Collections.synchronizedMap(map10);
    java2.util2.Map map12 = java2.util2.Collections.synchronizedMap(map11);
    java2.util2.Map map13 = java2.util2.Collections.synchronizedMap(map11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map13);

  }

  @Test
  public void test139() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test139"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set4 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set4);
    java.lang.Object[] obj_array6 = treeSet5.toArray();
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list12);
    java2.util2.List list14 = java2.util2.Collections.unmodifiableList(list12);
    java2.util2.Collections.copy(list9, list12);
    boolean b16 = treeSet5.addAll((java2.util2.Collection)list9);
    java.lang.Object obj17 = treeSet5.first();
    java2.util2.SortedSet sortedSet19 = treeSet5.tailSet((java.lang.Object)"");
    java2.util2.List list20 = java2.util2.Collections.nCopies(1, (java.lang.Object)treeSet5);
    java.lang.Object obj21 = treeSet5.last();
    treeSet5.clear();
    java2.util2.List list26 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list29 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list29);
    java2.util2.List list31 = java2.util2.Collections.unmodifiableList(list29);
    int i32 = java2.util2.Collections.indexOfSubList(list26, list31);
    java2.util2.Map map33 = java2.util2.Collections.singletonMap((java.lang.Object)0L, (java.lang.Object)list31);
    java2.util2.List list37 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list40 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list40);
    java2.util2.List list42 = java2.util2.Collections.unmodifiableList(list40);
    int i43 = java2.util2.Collections.indexOfSubList(list37, list42);
    java2.util2.Map map44 = java2.util2.Collections.singletonMap((java.lang.Object)0L, (java.lang.Object)list42);
    int i45 = java2.util2.Collections.lastIndexOfSubList(list31, list42);
    // The following exception was thrown during execution.
    try {
      java2.util2.SortedSet sortedSet46 = treeSet5.tailSet((java.lang.Object)list31);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + 0+ "'", obj17.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + 0+ "'", obj21.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);

  }

  @Test
  public void test140() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test140"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.Enumeration enumeration16 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet4);
    java2.util2.List list19 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set20 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet21 = new java2.util2.TreeSet((java2.util2.Collection)set20);
    java.lang.Object[] obj_array22 = treeSet21.toArray();
    java2.util2.List list25 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list28 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list28);
    java2.util2.List list30 = java2.util2.Collections.unmodifiableList(list28);
    java2.util2.Collections.copy(list25, list28);
    boolean b32 = treeSet21.addAll((java2.util2.Collection)list25);
    java.lang.Object obj33 = treeSet21.clone();
    java2.util2.List list36 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list37 = java2.util2.Collections.unmodifiableList(list36);
    java2.util2.List list40 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list41 = java2.util2.Collections.unmodifiableList(list40);
    java2.util2.List list44 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list44);
    int i47 = java2.util2.Collections.binarySearch(list44, (java.lang.Object)(short)100);
    boolean b48 = java2.util2.Collections.replaceAll(list36, (java.lang.Object)list41, (java.lang.Object)list44);
    boolean b49 = treeSet21.removeAll((java2.util2.Collection)list36);
    java.lang.Object[] obj_array50 = treeSet21.toArray();
    boolean b51 = treeSet4.addAll((java2.util2.Collection)treeSet21);
    java2.util2.TreeSet treeSet52 = new java2.util2.TreeSet();
    java.lang.String str53 = treeSet52.toString();
    java.lang.Object obj54 = treeSet52.clone();
    java2.util2.List list55 = java2.util2.Collections.singletonList(obj54);
    boolean b56 = treeSet21.retainAll((java2.util2.Collection)list55);
    java2.util2.List list59 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set60 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet61 = new java2.util2.TreeSet((java2.util2.Collection)set60);
    // The following exception was thrown during execution.
    try {
      java2.util2.SortedSet sortedSet62 = treeSet21.tailSet((java.lang.Object)treeSet61);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet21.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet52.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet52.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet52.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "[]"+ "'", str53.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet61.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet61.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet61.toString(), "[0]");

  }

  @Test
  public void test141() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test141"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)1);
    int i4 = java2.util2.Collections.binarySearch(list2, (java.lang.Object)"");
    java2.util2.List list7 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list10 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list10);
    java2.util2.List list12 = java2.util2.Collections.unmodifiableList(list10);
    java2.util2.Collections.copy(list7, list10);
    java2.util2.Collections.fill(list7, (java.lang.Object)(short)(-1));
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set20 = java2.util2.Collections.unmodifiableSet(set19);
    java2.util2.TreeSet treeSet21 = new java2.util2.TreeSet((java2.util2.Collection)set19);
    java2.util2.SortedSet sortedSet23 = treeSet21.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj24 = java2.util2.Collections.max((java2.util2.Collection)treeSet21);
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list27);
    java2.util2.List list29 = java2.util2.Collections.unmodifiableList(list27);
    java2.util2.Collection collection30 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list29);
    boolean b31 = treeSet21.equals((java.lang.Object)collection30);
    java2.util2.List list34 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set35 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet36 = new java2.util2.TreeSet((java2.util2.Collection)set35);
    java.lang.Object[] obj_array37 = treeSet36.toArray();
    java2.util2.List list40 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list43 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list43);
    java2.util2.List list45 = java2.util2.Collections.unmodifiableList(list43);
    java2.util2.Collections.copy(list40, list43);
    boolean b47 = treeSet36.addAll((java2.util2.Collection)list40);
    java2.util2.Comparator comparator48 = treeSet36.comparator();
    boolean b49 = treeSet21.removeAll((java2.util2.Collection)treeSet36);
    java2.util2.List list52 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list55 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list55);
    java2.util2.List list57 = java2.util2.Collections.unmodifiableList(list55);
    int i58 = java2.util2.Collections.indexOfSubList(list52, list57);
    java2.util2.List list61 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list64 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list64);
    java2.util2.List list66 = java2.util2.Collections.unmodifiableList(list64);
    java2.util2.Collections.copy(list61, list64);
    java2.util2.Collections.copy(list57, list61);
    java2.util2.List list71 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list74 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list74);
    java2.util2.List list76 = java2.util2.Collections.unmodifiableList(list74);
    java2.util2.Collections.copy(list71, list74);
    int i78 = java2.util2.Collections.indexOfSubList(list61, list74);
    java2.util2.Comparator comparator79 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list74, comparator79);
    int i81 = java2.util2.Collections.binarySearch(list7, (java.lang.Object)b49, comparator79);
    java2.util2.Collections.sort(list2, comparator79);
    java2.util2.List list85 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list86 = java2.util2.Collections.unmodifiableList(list85);
    java2.util2.List list89 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list90 = java2.util2.Collections.unmodifiableList(list89);
    java2.util2.List list93 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list93);
    int i96 = java2.util2.Collections.binarySearch(list93, (java.lang.Object)(short)100);
    boolean b97 = java2.util2.Collections.replaceAll(list85, (java.lang.Object)list90, (java.lang.Object)list93);
    int i98 = java2.util2.Collections.lastIndexOfSubList(list2, list90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet21.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 0+ "'", obj24.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet36.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet36.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet36.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i96 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i98 == 0);

  }

  @Test
  public void test142() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test142"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.fill(list2, (java.lang.Object)(-1.0d));
    java2.util2.List list10 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set11 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set12 = java2.util2.Collections.unmodifiableSet(set11);
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet((java2.util2.Collection)set11);
    java2.util2.SortedSet sortedSet15 = treeSet13.tailSet((java.lang.Object)(short)0);
    java2.util2.Collection collection16 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)sortedSet15);
    java2.util2.List list17 = java2.util2.Collections.singletonList((java.lang.Object)collection16);
    int i18 = java2.util2.Collections.lastIndexOfSubList(list2, list17);
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set22 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set23 = java2.util2.Collections.unmodifiableSet(set22);
    java2.util2.TreeSet treeSet24 = new java2.util2.TreeSet((java2.util2.Collection)set22);
    java2.util2.SortedSet sortedSet25 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet24);
    java2.util2.Collections.fill(list2, (java.lang.Object)sortedSet25);
    java2.util2.Collection collection27 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)sortedSet25);
    java2.util2.Set set28 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)sortedSet25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet24.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet24.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet24.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set28);

  }

  @Test
  public void test143() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test143"); }


    java2.util2.List list4 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list7 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list7);
    java2.util2.List list9 = java2.util2.Collections.unmodifiableList(list7);
    int i10 = java2.util2.Collections.indexOfSubList(list4, list9);
    java2.util2.Map map11 = java2.util2.Collections.singletonMap((java.lang.Object)0L, (java.lang.Object)list9);
    java2.util2.List list12 = java2.util2.Collections.nCopies(1, (java.lang.Object)list9);
    java2.util2.List list15 = java2.util2.Collections.nCopies(0, (java.lang.Object)1);
    int i17 = java2.util2.Collections.binarySearch(list15, (java.lang.Object)"");
    java2.util2.List list20 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list23 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list23);
    java2.util2.List list25 = java2.util2.Collections.unmodifiableList(list23);
    java2.util2.Collections.copy(list20, list23);
    java2.util2.Collections.fill(list20, (java.lang.Object)(short)(-1));
    java2.util2.List list31 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set32 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set33 = java2.util2.Collections.unmodifiableSet(set32);
    java2.util2.TreeSet treeSet34 = new java2.util2.TreeSet((java2.util2.Collection)set32);
    java2.util2.SortedSet sortedSet36 = treeSet34.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj37 = java2.util2.Collections.max((java2.util2.Collection)treeSet34);
    java2.util2.List list40 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list40);
    java2.util2.List list42 = java2.util2.Collections.unmodifiableList(list40);
    java2.util2.Collection collection43 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list42);
    boolean b44 = treeSet34.equals((java.lang.Object)collection43);
    java2.util2.List list47 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set48 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet49 = new java2.util2.TreeSet((java2.util2.Collection)set48);
    java.lang.Object[] obj_array50 = treeSet49.toArray();
    java2.util2.List list53 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list56 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list56);
    java2.util2.List list58 = java2.util2.Collections.unmodifiableList(list56);
    java2.util2.Collections.copy(list53, list56);
    boolean b60 = treeSet49.addAll((java2.util2.Collection)list53);
    java2.util2.Comparator comparator61 = treeSet49.comparator();
    boolean b62 = treeSet34.removeAll((java2.util2.Collection)treeSet49);
    java2.util2.List list65 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list68 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list68);
    java2.util2.List list70 = java2.util2.Collections.unmodifiableList(list68);
    int i71 = java2.util2.Collections.indexOfSubList(list65, list70);
    java2.util2.List list74 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list77 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list77);
    java2.util2.List list79 = java2.util2.Collections.unmodifiableList(list77);
    java2.util2.Collections.copy(list74, list77);
    java2.util2.Collections.copy(list70, list74);
    java2.util2.List list84 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list87 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list87);
    java2.util2.List list89 = java2.util2.Collections.unmodifiableList(list87);
    java2.util2.Collections.copy(list84, list87);
    int i91 = java2.util2.Collections.indexOfSubList(list74, list87);
    java2.util2.Comparator comparator92 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list87, comparator92);
    int i94 = java2.util2.Collections.binarySearch(list20, (java.lang.Object)b62, comparator92);
    java2.util2.Collections.sort(list15, comparator92);
    int i96 = java2.util2.Collections.lastIndexOfSubList(list9, list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet34.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet34.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet34.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj37 + "' != '" + 0+ "'", obj37.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet49.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet49.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet49.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i96 == 0);

  }

  @Test
  public void test144() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test144"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet7 = treeSet5.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj8 = java2.util2.Collections.max((java2.util2.Collection)treeSet5);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list14);
    java2.util2.List list16 = java2.util2.Collections.unmodifiableList(list14);
    int i17 = java2.util2.Collections.indexOfSubList(list11, list16);
    java2.util2.List list20 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list23 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list23);
    java2.util2.List list25 = java2.util2.Collections.unmodifiableList(list23);
    java2.util2.Collections.copy(list20, list23);
    java2.util2.Collections.copy(list16, list20);
    java2.util2.Collection collection28 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list20);
    java2.util2.Collection collection29 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list20);
    java2.util2.List list32 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set33 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set34 = java2.util2.Collections.unmodifiableSet(set33);
    java2.util2.TreeSet treeSet35 = new java2.util2.TreeSet((java2.util2.Collection)set33);
    java2.util2.SortedSet sortedSet37 = treeSet35.tailSet((java.lang.Object)(short)0);
    java2.util2.List list40 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set41 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set42 = java2.util2.Collections.unmodifiableSet(set41);
    java2.util2.TreeSet treeSet43 = new java2.util2.TreeSet((java2.util2.Collection)set41);
    java2.util2.List list46 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set47 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set48 = java2.util2.Collections.unmodifiableSet(set47);
    java2.util2.TreeSet treeSet49 = new java2.util2.TreeSet((java2.util2.Collection)set47);
    java.lang.Object[] obj_array51 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array52 = treeSet49.toArray(obj_array51);
    java2.util2.List list55 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set56 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet57 = new java2.util2.TreeSet((java2.util2.Collection)set56);
    java.lang.Object[] obj_array58 = treeSet57.toArray();
    java.lang.Object[] obj_array59 = treeSet49.toArray(obj_array58);
    java.lang.Object[] obj_array60 = treeSet43.toArray(obj_array58);
    java.lang.Object[] obj_array61 = treeSet35.toArray(obj_array58);
    java2.util2.List list65 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list68 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list68);
    java2.util2.List list70 = java2.util2.Collections.unmodifiableList(list68);
    int i71 = java2.util2.Collections.indexOfSubList(list65, list70);
    java2.util2.Map map72 = java2.util2.Collections.singletonMap((java.lang.Object)0L, (java.lang.Object)list70);
    boolean b73 = treeSet35.containsAll((java2.util2.Collection)list70);
    // The following exception was thrown during execution.
    try {
      java2.util2.SortedSet sortedSet74 = treeSet5.subSet((java.lang.Object)collection29, (java.lang.Object)b73);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 0+ "'", obj8.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet35.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet35.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet35.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet43.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet43.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet43.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet49.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet49.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet49.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet57.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet57.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet57.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);

  }

  @Test
  public void test145() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test145"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet5);
    int i7 = treeSet5.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);

  }

  @Test
  public void test146() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test146"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.first();
    java2.util2.SortedSet sortedSet18 = treeSet4.tailSet((java.lang.Object)"");
    treeSet4.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 0+ "'", obj16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet18);

  }

  @Test
  public void test147() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test147"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    int i8 = java2.util2.Collections.indexOfSubList(list2, list7);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list14);
    java2.util2.List list16 = java2.util2.Collections.unmodifiableList(list14);
    java2.util2.Collections.copy(list11, list14);
    java2.util2.Collections.copy(list7, list11);
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list24 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list24);
    java2.util2.List list26 = java2.util2.Collections.unmodifiableList(list24);
    java2.util2.Collections.copy(list21, list24);
    java2.util2.List list28 = java2.util2.Collections.unmodifiableList(list24);
    java2.util2.Collections.copy(list11, list28);
    java2.util2.List list32 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set33 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set34 = java2.util2.Collections.unmodifiableSet(set33);
    java2.util2.TreeSet treeSet35 = new java2.util2.TreeSet((java2.util2.Collection)set33);
    java2.util2.List list38 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list41 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list41);
    java2.util2.List list43 = java2.util2.Collections.unmodifiableList(list41);
    java2.util2.Collections.copy(list38, list41);
    java2.util2.List list45 = java2.util2.Collections.unmodifiableList(list41);
    java2.util2.List list48 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list51 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list51);
    java2.util2.List list53 = java2.util2.Collections.unmodifiableList(list51);
    int i54 = java2.util2.Collections.indexOfSubList(list48, list53);
    java2.util2.List list57 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list60 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list60);
    java2.util2.List list62 = java2.util2.Collections.unmodifiableList(list60);
    java2.util2.Collections.copy(list57, list60);
    java2.util2.Collections.copy(list53, list57);
    java2.util2.List list67 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list70 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list70);
    java2.util2.List list72 = java2.util2.Collections.unmodifiableList(list70);
    java2.util2.Collections.copy(list67, list70);
    int i74 = java2.util2.Collections.indexOfSubList(list57, list70);
    java2.util2.Comparator comparator75 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list70, comparator75);
    java2.util2.Collections.sort(list45, comparator75);
    int i78 = java2.util2.Collections.binarySearch(list11, (java.lang.Object)set33, comparator75);
    java2.util2.TreeSet treeSet79 = new java2.util2.TreeSet(comparator75);
    java2.util2.TreeSet treeSet80 = new java2.util2.TreeSet(comparator75);
    boolean b81 = treeSet80.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet35.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet35.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet35.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet79.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet79.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet79.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet80.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet80.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet80.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);

  }

  @Test
  public void test148() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test148"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list9 = java2.util2.Collections.unmodifiableList(list8);
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list12);
    java2.util2.List list16 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list16);
    int i19 = java2.util2.Collections.binarySearch(list16, (java.lang.Object)(short)100);
    boolean b20 = java2.util2.Collections.replaceAll(list8, (java.lang.Object)list13, (java.lang.Object)list16);
    boolean b21 = treeSet5.retainAll((java2.util2.Collection)list8);
    // The following exception was thrown during execution.
    try {
      java.lang.Object obj22 = treeSet5.first();
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);

  }

  @Test
  public void test149() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test149"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    java.lang.String str1 = treeSet0.toString();
    // The following exception was thrown during execution.
    try {
      java.lang.Object obj2 = java2.util2.Collections.max((java2.util2.Collection)treeSet0);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[]"+ "'", str1.equals("[]"));

  }

  @Test
  public void test150() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test150"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list9);
    java2.util2.List list11 = java2.util2.Collections.unmodifiableList(list9);
    int i12 = java2.util2.Collections.indexOfSubList(list6, list11);
    java2.util2.List list13 = java2.util2.Collections.synchronizedList(list11);
    int i14 = java2.util2.Collections.lastIndexOfSubList(list2, list11);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list21);
    java2.util2.List list23 = java2.util2.Collections.unmodifiableList(list21);
    int i24 = java2.util2.Collections.indexOfSubList(list18, list23);
    java2.util2.Map map25 = java2.util2.Collections.singletonMap((java.lang.Object)0L, (java.lang.Object)list23);
    java2.util2.List list28 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list31 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list31);
    java2.util2.List list33 = java2.util2.Collections.unmodifiableList(list31);
    int i34 = java2.util2.Collections.indexOfSubList(list28, list33);
    java2.util2.Collections.sort(list33);
    java2.util2.Collections.rotate(list33, 0);
    java2.util2.List list38 = java2.util2.Collections.unmodifiableList(list33);
    java2.util2.List list39 = java2.util2.Collections.unmodifiableList(list33);
    java2.util2.List list40 = java2.util2.Collections.synchronizedList(list33);
    int i41 = java2.util2.Collections.lastIndexOfSubList(list23, list33);
    int i42 = java2.util2.Collections.indexOfSubList(list11, list33);
    java2.util2.List list43 = java2.util2.Collections.synchronizedList(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);

  }

  @Test
  public void test151() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test151"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list2);
    java2.util2.List list4 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.Collection collection5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list4);
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet(collection5);
    // The following exception was thrown during execution.
    try {
      java.lang.Object obj7 = java2.util2.Collections.max(collection5);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[]");

  }

  @Test
  public void test152() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test152"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list19 = java2.util2.Collections.unmodifiableList(list18);
    java2.util2.Collections.fill(list8, (java.lang.Object)list19);
    java2.util2.Collections.shuffle(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);

  }

  @Test
  public void test153() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test153"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)1);
    int i4 = java2.util2.Collections.binarySearch(list2, (java.lang.Object)"");
    java2.util2.List list7 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list10 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list10);
    java2.util2.List list12 = java2.util2.Collections.unmodifiableList(list10);
    java2.util2.Collections.copy(list7, list10);
    java2.util2.Collections.fill(list7, (java.lang.Object)(short)(-1));
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set20 = java2.util2.Collections.unmodifiableSet(set19);
    java2.util2.TreeSet treeSet21 = new java2.util2.TreeSet((java2.util2.Collection)set19);
    java2.util2.SortedSet sortedSet23 = treeSet21.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj24 = java2.util2.Collections.max((java2.util2.Collection)treeSet21);
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list27);
    java2.util2.List list29 = java2.util2.Collections.unmodifiableList(list27);
    java2.util2.Collection collection30 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list29);
    boolean b31 = treeSet21.equals((java.lang.Object)collection30);
    java2.util2.List list34 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set35 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet36 = new java2.util2.TreeSet((java2.util2.Collection)set35);
    java.lang.Object[] obj_array37 = treeSet36.toArray();
    java2.util2.List list40 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list43 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list43);
    java2.util2.List list45 = java2.util2.Collections.unmodifiableList(list43);
    java2.util2.Collections.copy(list40, list43);
    boolean b47 = treeSet36.addAll((java2.util2.Collection)list40);
    java2.util2.Comparator comparator48 = treeSet36.comparator();
    boolean b49 = treeSet21.removeAll((java2.util2.Collection)treeSet36);
    java2.util2.List list52 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list55 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list55);
    java2.util2.List list57 = java2.util2.Collections.unmodifiableList(list55);
    int i58 = java2.util2.Collections.indexOfSubList(list52, list57);
    java2.util2.List list61 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list64 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list64);
    java2.util2.List list66 = java2.util2.Collections.unmodifiableList(list64);
    java2.util2.Collections.copy(list61, list64);
    java2.util2.Collections.copy(list57, list61);
    java2.util2.List list71 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list74 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list74);
    java2.util2.List list76 = java2.util2.Collections.unmodifiableList(list74);
    java2.util2.Collections.copy(list71, list74);
    int i78 = java2.util2.Collections.indexOfSubList(list61, list74);
    java2.util2.Comparator comparator79 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list74, comparator79);
    int i81 = java2.util2.Collections.binarySearch(list7, (java.lang.Object)b49, comparator79);
    java2.util2.Collections.sort(list2, comparator79);
    java2.util2.TreeSet treeSet83 = new java2.util2.TreeSet(comparator79);
    java2.util2.TreeSet treeSet84 = new java2.util2.TreeSet(comparator79);
    java2.util2.TreeSet treeSet85 = new java2.util2.TreeSet(comparator79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet21.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 0+ "'", obj24.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet36.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet36.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet36.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet83.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet83.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet83.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet84.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet84.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet84.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet85.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet85.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet85.toString(), "[]");

  }

  @Test
  public void test154() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test154"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.first();
    java2.util2.SortedSet sortedSet18 = treeSet4.tailSet((java.lang.Object)"");
    java.lang.String str19 = treeSet4.toString();
    java2.util2.SortedSet sortedSet20 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet4);
    java2.util2.List list23 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set24 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set25 = java2.util2.Collections.unmodifiableSet(set24);
    java2.util2.TreeSet treeSet26 = new java2.util2.TreeSet((java2.util2.Collection)set24);
    java.lang.Object[] obj_array28 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array29 = treeSet26.toArray(obj_array28);
    java2.util2.List list32 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set33 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet34 = new java2.util2.TreeSet((java2.util2.Collection)set33);
    java.lang.Object[] obj_array35 = treeSet34.toArray();
    java.lang.Object[] obj_array36 = treeSet26.toArray(obj_array35);
    java.lang.Object obj37 = treeSet26.last();
    java2.util2.Map map39 = java2.util2.Collections.singletonMap((java.lang.Object)treeSet26, (java.lang.Object)0.0f);
    java2.util2.Map map40 = java2.util2.Collections.synchronizedMap(map39);
    // The following exception was thrown during execution.
    try {
      boolean b41 = treeSet4.add((java.lang.Object)map40);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 0+ "'", obj16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[0]"+ "'", str19.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet26.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet26.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet26.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet34.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet34.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet34.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj37 + "' != '" + 0+ "'", obj37.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map40);

  }

  @Test
  public void test155() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test155"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set13 = java2.util2.Collections.unmodifiableSet(set12);
    java2.util2.TreeSet treeSet14 = new java2.util2.TreeSet((java2.util2.Collection)set12);
    java2.util2.List list17 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set18 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set19 = java2.util2.Collections.unmodifiableSet(set18);
    java2.util2.TreeSet treeSet20 = new java2.util2.TreeSet((java2.util2.Collection)set18);
    java.lang.Object[] obj_array22 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array23 = treeSet20.toArray(obj_array22);
    java2.util2.List list26 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set27 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet28 = new java2.util2.TreeSet((java2.util2.Collection)set27);
    java.lang.Object[] obj_array29 = treeSet28.toArray();
    java.lang.Object[] obj_array30 = treeSet20.toArray(obj_array29);
    java.lang.Object[] obj_array31 = treeSet14.toArray(obj_array29);
    java.lang.Object[] obj_array32 = treeSet5.toArray(obj_array31);
    java.lang.Object obj33 = java2.util2.Collections.max((java2.util2.Collection)treeSet5);
    java2.util2.Set set34 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet14.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet20.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet20.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet20.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet28.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet28.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet28.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + 0+ "'", obj33.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);

  }

  @Test
  public void test156() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test156"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet((java2.util2.Collection)set12);
    java.lang.Object[] obj_array14 = treeSet13.toArray();
    java.lang.Object[] obj_array15 = treeSet5.toArray(obj_array14);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set20 = java2.util2.Collections.unmodifiableSet(set19);
    java2.util2.TreeSet treeSet21 = new java2.util2.TreeSet((java2.util2.Collection)set19);
    java2.util2.SortedSet sortedSet23 = treeSet21.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj24 = java2.util2.Collections.max((java2.util2.Collection)treeSet21);
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list27);
    java2.util2.List list29 = java2.util2.Collections.unmodifiableList(list27);
    java2.util2.Collection collection30 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list29);
    boolean b31 = treeSet21.equals((java.lang.Object)collection30);
    java2.util2.List list34 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set35 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet36 = new java2.util2.TreeSet((java2.util2.Collection)set35);
    java.lang.Object[] obj_array37 = treeSet36.toArray();
    java2.util2.List list40 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list43 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list43);
    java2.util2.List list45 = java2.util2.Collections.unmodifiableList(list43);
    java2.util2.Collections.copy(list40, list43);
    boolean b47 = treeSet36.addAll((java2.util2.Collection)list40);
    java2.util2.Comparator comparator48 = treeSet36.comparator();
    boolean b49 = treeSet21.removeAll((java2.util2.Collection)treeSet36);
    boolean b50 = treeSet5.equals((java.lang.Object)b49);
    java2.util2.Iterator iterator51 = treeSet5.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet21.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 0+ "'", obj24.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet36.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet36.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet36.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator51);

  }

  @Test
  public void test157() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test157"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.Enumeration enumeration16 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet4);
    java2.util2.List list19 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set20 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet21 = new java2.util2.TreeSet((java2.util2.Collection)set20);
    java.lang.Object[] obj_array22 = treeSet21.toArray();
    java2.util2.List list25 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list28 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list28);
    java2.util2.List list30 = java2.util2.Collections.unmodifiableList(list28);
    java2.util2.Collections.copy(list25, list28);
    boolean b32 = treeSet21.addAll((java2.util2.Collection)list25);
    java.lang.Object obj33 = treeSet21.clone();
    java2.util2.List list36 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list37 = java2.util2.Collections.unmodifiableList(list36);
    java2.util2.List list40 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list41 = java2.util2.Collections.unmodifiableList(list40);
    java2.util2.List list44 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list44);
    int i47 = java2.util2.Collections.binarySearch(list44, (java.lang.Object)(short)100);
    boolean b48 = java2.util2.Collections.replaceAll(list36, (java.lang.Object)list41, (java.lang.Object)list44);
    boolean b49 = treeSet21.removeAll((java2.util2.Collection)list36);
    java.lang.Object[] obj_array50 = treeSet21.toArray();
    boolean b51 = treeSet4.addAll((java2.util2.Collection)treeSet21);
    java2.util2.TreeSet treeSet52 = new java2.util2.TreeSet();
    java.lang.String str53 = treeSet52.toString();
    java.lang.Object obj54 = treeSet52.clone();
    java2.util2.List list55 = java2.util2.Collections.singletonList(obj54);
    boolean b56 = treeSet21.retainAll((java2.util2.Collection)list55);
    java2.util2.Enumeration enumeration57 = java2.util2.Collections.enumeration((java2.util2.Collection)list55);
    java2.util2.ArrayList arrayList58 = java2.util2.Collections.list(enumeration57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet21.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet52.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet52.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet52.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "[]"+ "'", str53.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList58);

  }

  @Test
  public void test158() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test158"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet((java2.util2.Collection)set12);
    java.lang.Object[] obj_array14 = treeSet13.toArray();
    java.lang.Object[] obj_array15 = treeSet5.toArray(obj_array14);
    java2.util2.SortedSet sortedSet16 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet5);
    int i17 = treeSet5.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);

  }

  @Test
  public void test159() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test159"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list3 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list6);
    java2.util2.List list10 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list10);
    int i13 = java2.util2.Collections.binarySearch(list10, (java.lang.Object)(short)100);
    boolean b14 = java2.util2.Collections.replaceAll(list2, (java.lang.Object)list7, (java.lang.Object)list10);
    java2.util2.Collections.reverse(list10);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list21);
    java2.util2.List list23 = java2.util2.Collections.unmodifiableList(list21);
    java2.util2.Collection collection24 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list23);
    java2.util2.Collections.copy(list18, list23);
    java2.util2.List list28 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list28);
    java2.util2.List list32 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.fill(list28, (java.lang.Object)(-1.0d));
    java2.util2.List list36 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set37 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set38 = java2.util2.Collections.unmodifiableSet(set37);
    java2.util2.TreeSet treeSet39 = new java2.util2.TreeSet((java2.util2.Collection)set37);
    java2.util2.SortedSet sortedSet41 = treeSet39.tailSet((java.lang.Object)(short)0);
    java2.util2.Collection collection42 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)sortedSet41);
    java2.util2.List list43 = java2.util2.Collections.singletonList((java.lang.Object)collection42);
    int i44 = java2.util2.Collections.lastIndexOfSubList(list28, list43);
    int i45 = java2.util2.Collections.lastIndexOfSubList(list18, list28);
    java2.util2.List list46 = java2.util2.Collections.unmodifiableList(list18);
    java2.util2.Collections.copy(list10, list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet39.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet39.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet39.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);

  }

  @Test
  public void test160() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test160"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.first();
    treeSet4.clear();
    java2.util2.List list20 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set21 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet22 = new java2.util2.TreeSet((java2.util2.Collection)set21);
    java.lang.Object[] obj_array23 = treeSet22.toArray();
    java2.util2.List list26 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list29 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list29);
    java2.util2.List list31 = java2.util2.Collections.unmodifiableList(list29);
    java2.util2.Collections.copy(list26, list29);
    boolean b33 = treeSet22.addAll((java2.util2.Collection)list26);
    java.lang.Object obj34 = treeSet22.clone();
    java2.util2.List list37 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list38 = java2.util2.Collections.unmodifiableList(list37);
    java2.util2.List list41 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list42 = java2.util2.Collections.unmodifiableList(list41);
    java2.util2.List list45 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list45);
    int i48 = java2.util2.Collections.binarySearch(list45, (java.lang.Object)(short)100);
    boolean b49 = java2.util2.Collections.replaceAll(list37, (java.lang.Object)list42, (java.lang.Object)list45);
    boolean b50 = treeSet22.removeAll((java2.util2.Collection)list37);
    java.lang.Object[] obj_array51 = treeSet22.toArray();
    java2.util2.SortedSet sortedSet52 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet22);
    boolean b53 = treeSet4.addAll((java2.util2.Collection)treeSet22);
    java2.util2.TreeSet treeSet54 = new java2.util2.TreeSet((java2.util2.Collection)treeSet22);
    java2.util2.List list57 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list60 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list60);
    java2.util2.List list62 = java2.util2.Collections.unmodifiableList(list60);
    java2.util2.Collections.copy(list57, list60);
    java2.util2.Collections.rotate(list60, 1);
    boolean b66 = treeSet22.retainAll((java2.util2.Collection)list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 0+ "'", obj16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet22.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet22.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet22.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet54.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet54.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet54.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);

  }

  @Test
  public void test161() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test161"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list6);
    java2.util2.List list8 = java2.util2.Collections.unmodifiableList(list6);
    int i9 = java2.util2.Collections.indexOfSubList(list3, list8);
    java2.util2.List list10 = java2.util2.Collections.nCopies(100, (java.lang.Object)list8);
    java2.util2.List list11 = java2.util2.Collections.singletonList((java.lang.Object)list10);
    // The following exception was thrown during execution.
    try {
      java2.util2.Collections.rotate(list10, 1);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);

  }

  @Test
  public void test162() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test162"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set9 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet10 = new java2.util2.TreeSet((java2.util2.Collection)set9);
    java.lang.Object[] obj_array11 = treeSet10.toArray();
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list17 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list17);
    java2.util2.List list19 = java2.util2.Collections.unmodifiableList(list17);
    java2.util2.Collections.copy(list14, list17);
    boolean b21 = treeSet10.addAll((java2.util2.Collection)list14);
    java.lang.Object obj22 = treeSet10.clone();
    java2.util2.List list25 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list26 = java2.util2.Collections.unmodifiableList(list25);
    java2.util2.List list29 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list30 = java2.util2.Collections.unmodifiableList(list29);
    java2.util2.List list33 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list33);
    int i36 = java2.util2.Collections.binarySearch(list33, (java.lang.Object)(short)100);
    boolean b37 = java2.util2.Collections.replaceAll(list25, (java.lang.Object)list30, (java.lang.Object)list33);
    boolean b38 = treeSet10.removeAll((java2.util2.Collection)list25);
    java.lang.Object[] obj_array39 = treeSet10.toArray();
    java2.util2.List list43 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set44 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set45 = java2.util2.Collections.unmodifiableSet(set44);
    java2.util2.TreeSet treeSet46 = new java2.util2.TreeSet((java2.util2.Collection)set44);
    java2.util2.SortedSet sortedSet48 = treeSet46.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj49 = java2.util2.Collections.max((java2.util2.Collection)treeSet46);
    java2.util2.List list52 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list52);
    java2.util2.List list54 = java2.util2.Collections.unmodifiableList(list52);
    java2.util2.Collection collection55 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list54);
    boolean b56 = treeSet46.equals((java.lang.Object)collection55);
    java2.util2.List list59 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set60 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet61 = new java2.util2.TreeSet((java2.util2.Collection)set60);
    java.lang.Object[] obj_array62 = treeSet61.toArray();
    java2.util2.List list65 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list68 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list68);
    java2.util2.List list70 = java2.util2.Collections.unmodifiableList(list68);
    java2.util2.Collections.copy(list65, list68);
    boolean b72 = treeSet61.addAll((java2.util2.Collection)list65);
    java2.util2.Comparator comparator73 = treeSet61.comparator();
    boolean b74 = treeSet46.removeAll((java2.util2.Collection)treeSet61);
    java2.util2.List list75 = java2.util2.Collections.nCopies(1, (java.lang.Object)b74);
    boolean b76 = treeSet10.removeAll((java2.util2.Collection)list75);
    boolean b77 = treeSet4.containsAll((java2.util2.Collection)treeSet10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet10.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet46.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet46.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet46.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj49 + "' != '" + 0+ "'", obj49.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet61.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet61.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet61.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);

  }

  @Test
  public void test163() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test163"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    java2.util2.Collection collection8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list7);
    java2.util2.Collections.copy(list2, list7);
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list12);
    java2.util2.List list16 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.fill(list12, (java.lang.Object)(-1.0d));
    java2.util2.List list20 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set21 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set22 = java2.util2.Collections.unmodifiableSet(set21);
    java2.util2.TreeSet treeSet23 = new java2.util2.TreeSet((java2.util2.Collection)set21);
    java2.util2.SortedSet sortedSet25 = treeSet23.tailSet((java.lang.Object)(short)0);
    java2.util2.Collection collection26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)sortedSet25);
    java2.util2.List list27 = java2.util2.Collections.singletonList((java.lang.Object)collection26);
    int i28 = java2.util2.Collections.lastIndexOfSubList(list12, list27);
    java2.util2.List list31 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set32 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set33 = java2.util2.Collections.unmodifiableSet(set32);
    java2.util2.TreeSet treeSet34 = new java2.util2.TreeSet((java2.util2.Collection)set32);
    java2.util2.SortedSet sortedSet35 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet34);
    java2.util2.Collections.fill(list12, (java.lang.Object)sortedSet35);
    java2.util2.Collections.reverse(list12);
    java2.util2.List list38 = java2.util2.Collections.unmodifiableList(list12);
    java2.util2.List list41 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set42 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet43 = new java2.util2.TreeSet((java2.util2.Collection)set42);
    java.lang.Object[] obj_array44 = treeSet43.toArray();
    java2.util2.List list47 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list50 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list50);
    java2.util2.List list52 = java2.util2.Collections.unmodifiableList(list50);
    java2.util2.Collections.copy(list47, list50);
    boolean b54 = treeSet43.addAll((java2.util2.Collection)list47);
    java2.util2.List list57 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list58 = java2.util2.Collections.unmodifiableList(list57);
    java2.util2.Collections.fill(list47, (java.lang.Object)list58);
    java2.util2.Collection collection60 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list47);
    java2.util2.Collections.copy(list12, list47);
    java2.util2.Collections.fill(list7, (java.lang.Object)list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet23.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet23.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet23.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet34.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet34.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet34.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet43.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet43.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet43.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection60);

  }

  @Test
  public void test164() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test164"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet5);
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list12);
    java2.util2.List list14 = java2.util2.Collections.unmodifiableList(list12);
    int i15 = java2.util2.Collections.indexOfSubList(list9, list14);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list21);
    java2.util2.List list23 = java2.util2.Collections.unmodifiableList(list21);
    java2.util2.Collections.copy(list18, list21);
    java2.util2.Collections.copy(list14, list18);
    java2.util2.List list28 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list31 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list31);
    java2.util2.List list33 = java2.util2.Collections.unmodifiableList(list31);
    java2.util2.Collections.copy(list28, list31);
    int i35 = java2.util2.Collections.indexOfSubList(list18, list31);
    boolean b36 = treeSet5.removeAll((java2.util2.Collection)list31);
    java2.util2.List list39 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set40 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet41 = new java2.util2.TreeSet((java2.util2.Collection)set40);
    java.lang.Object[] obj_array42 = treeSet41.toArray();
    java2.util2.List list45 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list48 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list48);
    java2.util2.List list50 = java2.util2.Collections.unmodifiableList(list48);
    java2.util2.Collections.copy(list45, list48);
    boolean b52 = treeSet41.addAll((java2.util2.Collection)list45);
    java2.util2.Enumeration enumeration53 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet41);
    java2.util2.List list56 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set57 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet58 = new java2.util2.TreeSet((java2.util2.Collection)set57);
    java.lang.Object[] obj_array59 = treeSet58.toArray();
    java2.util2.List list62 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list65 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list65);
    java2.util2.List list67 = java2.util2.Collections.unmodifiableList(list65);
    java2.util2.Collections.copy(list62, list65);
    boolean b69 = treeSet58.addAll((java2.util2.Collection)list62);
    java.lang.Object obj70 = treeSet58.clone();
    java2.util2.List list73 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list74 = java2.util2.Collections.unmodifiableList(list73);
    java2.util2.List list77 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list78 = java2.util2.Collections.unmodifiableList(list77);
    java2.util2.List list81 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list81);
    int i84 = java2.util2.Collections.binarySearch(list81, (java.lang.Object)(short)100);
    boolean b85 = java2.util2.Collections.replaceAll(list73, (java.lang.Object)list78, (java.lang.Object)list81);
    boolean b86 = treeSet58.removeAll((java2.util2.Collection)list73);
    java.lang.Object[] obj_array87 = treeSet58.toArray();
    boolean b88 = treeSet41.addAll((java2.util2.Collection)treeSet58);
    java2.util2.Collections.fill(list31, (java.lang.Object)b88);
    // The following exception was thrown during execution.
    try {
      java2.util2.Collections.swap(list31, 100, 1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet41.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet41.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet41.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet58.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet58.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet58.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);

  }

  @Test
  public void test165() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test165"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list6);
    java2.util2.List list8 = java2.util2.Collections.unmodifiableList(list6);
    int i9 = java2.util2.Collections.indexOfSubList(list3, list8);
    java2.util2.Map map10 = java2.util2.Collections.singletonMap((java.lang.Object)0L, (java.lang.Object)list8);
    java2.util2.Map map11 = java2.util2.Collections.synchronizedMap(map10);
    java2.util2.Map map12 = java2.util2.Collections.unmodifiableMap(map10);
    java2.util2.Map map13 = java2.util2.Collections.synchronizedMap(map10);
    java2.util2.Map map14 = java2.util2.Collections.synchronizedMap(map13);
    java2.util2.Map map15 = java2.util2.Collections.synchronizedMap(map14);
    java2.util2.Map map16 = java2.util2.Collections.synchronizedMap(map15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map16);

  }

  @Test
  public void test166() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test166"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list19 = java2.util2.Collections.unmodifiableList(list18);
    java2.util2.Collections.fill(list8, (java.lang.Object)list19);
    java2.util2.Collection collection21 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list8);
    // The following exception was thrown during execution.
    try {
      java2.util2.Collections.swap(list8, 1, 0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection21);

  }

  @Test
  public void test167() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test167"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set4 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set4);
    java.lang.Object[] obj_array6 = treeSet5.toArray();
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list12);
    java2.util2.List list14 = java2.util2.Collections.unmodifiableList(list12);
    java2.util2.Collections.copy(list9, list12);
    boolean b16 = treeSet5.addAll((java2.util2.Collection)list9);
    java.lang.Object obj17 = treeSet5.first();
    java2.util2.SortedSet sortedSet19 = treeSet5.tailSet((java.lang.Object)"");
    java2.util2.List list20 = java2.util2.Collections.nCopies(1, (java.lang.Object)treeSet5);
    java2.util2.SortedSet sortedSet21 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + 0+ "'", obj17.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet21);

  }

  @Test
  public void test168() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test168"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.first();
    java2.util2.SortedSet sortedSet18 = treeSet4.tailSet((java.lang.Object)"");
    java.lang.String str19 = treeSet4.toString();
    java2.util2.SortedSet sortedSet20 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet4);
    java.lang.Object obj21 = treeSet4.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 0+ "'", obj16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[0]"+ "'", str19.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj21);

  }

  @Test
  public void test169() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test169"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.clone();
    java2.util2.List list19 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list20 = java2.util2.Collections.unmodifiableList(list19);
    java2.util2.List list23 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list23);
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list27);
    int i30 = java2.util2.Collections.binarySearch(list27, (java.lang.Object)(short)100);
    boolean b31 = java2.util2.Collections.replaceAll(list19, (java.lang.Object)list24, (java.lang.Object)list27);
    boolean b32 = treeSet4.removeAll((java2.util2.Collection)list19);
    java.lang.Object[] obj_array33 = treeSet4.toArray();
    java2.util2.List list37 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set38 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set39 = java2.util2.Collections.unmodifiableSet(set38);
    java2.util2.TreeSet treeSet40 = new java2.util2.TreeSet((java2.util2.Collection)set38);
    java2.util2.SortedSet sortedSet42 = treeSet40.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj43 = java2.util2.Collections.max((java2.util2.Collection)treeSet40);
    java2.util2.List list46 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list46);
    java2.util2.List list48 = java2.util2.Collections.unmodifiableList(list46);
    java2.util2.Collection collection49 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list48);
    boolean b50 = treeSet40.equals((java.lang.Object)collection49);
    java2.util2.List list53 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set54 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet55 = new java2.util2.TreeSet((java2.util2.Collection)set54);
    java.lang.Object[] obj_array56 = treeSet55.toArray();
    java2.util2.List list59 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list62 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list62);
    java2.util2.List list64 = java2.util2.Collections.unmodifiableList(list62);
    java2.util2.Collections.copy(list59, list62);
    boolean b66 = treeSet55.addAll((java2.util2.Collection)list59);
    java2.util2.Comparator comparator67 = treeSet55.comparator();
    boolean b68 = treeSet40.removeAll((java2.util2.Collection)treeSet55);
    java2.util2.List list69 = java2.util2.Collections.nCopies(1, (java.lang.Object)b68);
    boolean b70 = treeSet4.removeAll((java2.util2.Collection)list69);
    java2.util2.List list73 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list73);
    java2.util2.List list77 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.fill(list73, (java.lang.Object)(-1.0d));
    java2.util2.List list79 = java2.util2.Collections.unmodifiableList(list73);
    int i80 = java2.util2.Collections.indexOfSubList(list69, list79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet40.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet40.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet40.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj43 + "' != '" + 0+ "'", obj43.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet55.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet55.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet55.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);

  }

  @Test
  public void test170() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test170"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet7 = treeSet5.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj8 = java2.util2.Collections.max((java2.util2.Collection)treeSet5);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collection collection14 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list13);
    boolean b15 = treeSet5.equals((java.lang.Object)collection14);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet20 = new java2.util2.TreeSet((java2.util2.Collection)set19);
    java.lang.Object[] obj_array21 = treeSet20.toArray();
    java2.util2.List list24 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list27);
    java2.util2.List list29 = java2.util2.Collections.unmodifiableList(list27);
    java2.util2.Collections.copy(list24, list27);
    boolean b31 = treeSet20.addAll((java2.util2.Collection)list24);
    java2.util2.Comparator comparator32 = treeSet20.comparator();
    boolean b33 = treeSet5.removeAll((java2.util2.Collection)treeSet20);
    java2.util2.List list36 = java2.util2.Collections.nCopies(0, (java.lang.Object)1);
    boolean b37 = treeSet5.add((java.lang.Object)list36);
    java2.util2.TreeSet treeSet38 = new java2.util2.TreeSet((java2.util2.Collection)list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[[]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 0+ "'", obj8.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet20.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet20.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet20.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet38.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet38.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet38.toString(), "[]");

  }

  @Test
  public void test171() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test171"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.Enumeration enumeration16 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet4);
    java2.util2.List list19 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set20 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet21 = new java2.util2.TreeSet((java2.util2.Collection)set20);
    java.lang.Object[] obj_array22 = treeSet21.toArray();
    java2.util2.List list25 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list28 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list28);
    java2.util2.List list30 = java2.util2.Collections.unmodifiableList(list28);
    java2.util2.Collections.copy(list25, list28);
    boolean b32 = treeSet21.addAll((java2.util2.Collection)list25);
    java.lang.Object obj33 = treeSet21.clone();
    java2.util2.List list36 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list37 = java2.util2.Collections.unmodifiableList(list36);
    java2.util2.List list40 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list41 = java2.util2.Collections.unmodifiableList(list40);
    java2.util2.List list44 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list44);
    int i47 = java2.util2.Collections.binarySearch(list44, (java.lang.Object)(short)100);
    boolean b48 = java2.util2.Collections.replaceAll(list36, (java.lang.Object)list41, (java.lang.Object)list44);
    boolean b49 = treeSet21.removeAll((java2.util2.Collection)list36);
    java.lang.Object[] obj_array50 = treeSet21.toArray();
    boolean b51 = treeSet4.addAll((java2.util2.Collection)treeSet21);
    java.lang.String str52 = treeSet21.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet21.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet21.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "[0]"+ "'", str52.equals("[0]"));

  }

  @Test
  public void test172() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test172"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list6);
    java2.util2.List list8 = java2.util2.Collections.unmodifiableList(list6);
    int i9 = java2.util2.Collections.indexOfSubList(list3, list8);
    java2.util2.Map map10 = java2.util2.Collections.singletonMap((java.lang.Object)0L, (java.lang.Object)list8);
    java2.util2.Map map11 = java2.util2.Collections.synchronizedMap(map10);
    java2.util2.Map map12 = java2.util2.Collections.unmodifiableMap(map10);
    java2.util2.Map map13 = java2.util2.Collections.synchronizedMap(map10);
    java2.util2.Map map14 = java2.util2.Collections.synchronizedMap(map10);
    java2.util2.Map map15 = java2.util2.Collections.synchronizedMap(map10);
    java2.util2.Map map16 = java2.util2.Collections.unmodifiableMap(map10);
    java2.util2.Map map17 = java2.util2.Collections.synchronizedMap(map10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map17);

  }

  @Test
  public void test173() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test173"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    java2.util2.Collection collection8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list7);
    java2.util2.Collections.copy(list2, list7);
    // The following exception was thrown during execution.
    try {
      java2.util2.Collections.swap(list7, 0, (-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);

  }

  @Test
  public void test174() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test174"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.Enumeration enumeration16 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet4);
    java2.util2.ArrayList arrayList17 = java2.util2.Collections.list(enumeration16);
    java2.util2.ArrayList arrayList18 = java2.util2.Collections.list(enumeration16);
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list24 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list24);
    java2.util2.List list26 = java2.util2.Collections.unmodifiableList(list24);
    java2.util2.Collections.copy(list21, list24);
    java2.util2.List list28 = java2.util2.Collections.unmodifiableList(list24);
    java2.util2.List list31 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list34 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list34);
    java2.util2.List list36 = java2.util2.Collections.unmodifiableList(list34);
    int i37 = java2.util2.Collections.indexOfSubList(list31, list36);
    java2.util2.List list40 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list43 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list43);
    java2.util2.List list45 = java2.util2.Collections.unmodifiableList(list43);
    java2.util2.Collections.copy(list40, list43);
    java2.util2.Collections.copy(list36, list40);
    java2.util2.List list50 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list53 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list53);
    java2.util2.List list55 = java2.util2.Collections.unmodifiableList(list53);
    java2.util2.Collections.copy(list50, list53);
    int i57 = java2.util2.Collections.indexOfSubList(list40, list53);
    java2.util2.Comparator comparator58 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list53, comparator58);
    java2.util2.Collections.sort(list28, comparator58);
    java2.util2.Collections.sort((java2.util2.List)arrayList18, comparator58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator58);

  }

  @Test
  public void test175() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test175"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.clone();
    java2.util2.List list19 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list20 = java2.util2.Collections.unmodifiableList(list19);
    java2.util2.List list23 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list23);
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list27);
    int i30 = java2.util2.Collections.binarySearch(list27, (java.lang.Object)(short)100);
    boolean b31 = java2.util2.Collections.replaceAll(list19, (java.lang.Object)list24, (java.lang.Object)list27);
    boolean b32 = treeSet4.removeAll((java2.util2.Collection)list19);
    java2.util2.Collection collection33 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection33);

  }

  @Test
  public void test176() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test176"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.clone();
    java2.util2.List list19 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list20 = java2.util2.Collections.unmodifiableList(list19);
    java2.util2.List list23 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list23);
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list27);
    int i30 = java2.util2.Collections.binarySearch(list27, (java.lang.Object)(short)100);
    boolean b31 = java2.util2.Collections.replaceAll(list19, (java.lang.Object)list24, (java.lang.Object)list27);
    boolean b32 = treeSet4.removeAll((java2.util2.Collection)list19);
    java.lang.Object[] obj_array33 = treeSet4.toArray();
    java2.util2.SortedSet sortedSet34 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet4);
    java2.util2.List list35 = java2.util2.Collections.singletonList((java.lang.Object)sortedSet34);
    // The following exception was thrown during execution.
    try {
      java2.util2.Collections.sort(list35);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);

  }

  @Test
  public void test177() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test177"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.fill(list2, (java.lang.Object)(-1.0d));
    java2.util2.List list10 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set11 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set12 = java2.util2.Collections.unmodifiableSet(set11);
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet((java2.util2.Collection)set11);
    java2.util2.SortedSet sortedSet15 = treeSet13.tailSet((java.lang.Object)(short)0);
    java2.util2.Collection collection16 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)sortedSet15);
    java2.util2.List list17 = java2.util2.Collections.singletonList((java.lang.Object)collection16);
    int i18 = java2.util2.Collections.lastIndexOfSubList(list2, list17);
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list22 = java2.util2.Collections.unmodifiableList(list21);
    java2.util2.List list23 = java2.util2.Collections.unmodifiableList(list21);
    java2.util2.Collections.copy(list17, list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);

  }

  @Test
  public void test178() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test178"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    java2.util2.Collections.copy(list2, list5);
    java2.util2.List list9 = java2.util2.Collections.unmodifiableList(list5);
    java2.util2.Collection collection10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list5);
    java2.util2.TreeSet treeSet11 = new java2.util2.TreeSet((java2.util2.Collection)list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet11.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet11.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet11.toString(), "[]");

  }

  @Test
  public void test179() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test179"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet7 = treeSet5.headSet((java.lang.Object)(short)(-1));
    java2.util2.Collection collection8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet5);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list15 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list18);
    java2.util2.List list20 = java2.util2.Collections.unmodifiableList(list18);
    int i21 = java2.util2.Collections.indexOfSubList(list15, list20);
    java2.util2.List list22 = java2.util2.Collections.synchronizedList(list20);
    int i23 = java2.util2.Collections.lastIndexOfSubList(list11, list20);
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set28 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set29 = java2.util2.Collections.unmodifiableSet(set28);
    java2.util2.TreeSet treeSet30 = new java2.util2.TreeSet((java2.util2.Collection)set28);
    java2.util2.SortedSet sortedSet31 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet30);
    java2.util2.List list34 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list37 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list37);
    java2.util2.List list39 = java2.util2.Collections.unmodifiableList(list37);
    int i40 = java2.util2.Collections.indexOfSubList(list34, list39);
    java2.util2.List list43 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list46 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list46);
    java2.util2.List list48 = java2.util2.Collections.unmodifiableList(list46);
    java2.util2.Collections.copy(list43, list46);
    java2.util2.Collections.copy(list39, list43);
    java2.util2.List list53 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list56 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list56);
    java2.util2.List list58 = java2.util2.Collections.unmodifiableList(list56);
    java2.util2.Collections.copy(list53, list56);
    int i60 = java2.util2.Collections.indexOfSubList(list43, list56);
    boolean b61 = treeSet30.removeAll((java2.util2.Collection)list56);
    java2.util2.Comparator comparator62 = treeSet30.comparator();
    java2.util2.List list65 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set66 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set67 = java2.util2.Collections.unmodifiableSet(set66);
    boolean b68 = treeSet30.equals((java.lang.Object)set66);
    boolean b69 = java2.util2.Collections.replaceAll(list20, (java.lang.Object)(-1.0d), (java.lang.Object)treeSet30);
    boolean b70 = treeSet5.addAll((java2.util2.Collection)treeSet30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet30.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet30.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet30.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);

  }

  @Test
  public void test180() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test180"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.first();
    java2.util2.SortedSet sortedSet18 = treeSet4.tailSet((java.lang.Object)"");
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)1);
    int i23 = java2.util2.Collections.binarySearch(list21, (java.lang.Object)"");
    java2.util2.Comparator comparator24 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list21, comparator24);
    // The following exception was thrown during execution.
    try {
      java.lang.Object obj26 = java2.util2.Collections.min((java2.util2.Collection)sortedSet18, comparator24);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 0+ "'", obj16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator24);

  }

  @Test
  public void test181() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test181"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.first();
    treeSet4.clear();
    java2.util2.List list20 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set21 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet22 = new java2.util2.TreeSet((java2.util2.Collection)set21);
    java.lang.Object[] obj_array23 = treeSet22.toArray();
    java2.util2.List list26 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list29 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list29);
    java2.util2.List list31 = java2.util2.Collections.unmodifiableList(list29);
    java2.util2.Collections.copy(list26, list29);
    boolean b33 = treeSet22.addAll((java2.util2.Collection)list26);
    java.lang.Object obj34 = treeSet22.clone();
    java2.util2.List list37 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list38 = java2.util2.Collections.unmodifiableList(list37);
    java2.util2.List list41 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list42 = java2.util2.Collections.unmodifiableList(list41);
    java2.util2.List list45 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list45);
    int i48 = java2.util2.Collections.binarySearch(list45, (java.lang.Object)(short)100);
    boolean b49 = java2.util2.Collections.replaceAll(list37, (java.lang.Object)list42, (java.lang.Object)list45);
    boolean b50 = treeSet22.removeAll((java2.util2.Collection)list37);
    java.lang.Object[] obj_array51 = treeSet22.toArray();
    java2.util2.SortedSet sortedSet52 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet22);
    boolean b53 = treeSet4.addAll((java2.util2.Collection)treeSet22);
    java.lang.Object[] obj_array54 = treeSet4.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 0+ "'", obj16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet22.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet22.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet22.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array54);

  }

  @Test
  public void test182() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test182"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    java2.util2.Collections.copy(list2, list5);
    java2.util2.Collections.shuffle(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);

  }

  @Test
  public void test183() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test183"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.clone();
    java2.util2.List list19 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list22 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list22);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list22);
    int i25 = java2.util2.Collections.indexOfSubList(list19, list24);
    java2.util2.List list28 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list31 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list31);
    java2.util2.List list33 = java2.util2.Collections.unmodifiableList(list31);
    java2.util2.Collections.copy(list28, list31);
    java2.util2.Collections.copy(list24, list28);
    java2.util2.List list38 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list41 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list41);
    java2.util2.List list43 = java2.util2.Collections.unmodifiableList(list41);
    java2.util2.Collections.copy(list38, list41);
    int i45 = java2.util2.Collections.indexOfSubList(list28, list41);
    boolean b46 = treeSet4.removeAll((java2.util2.Collection)list41);
    java2.util2.List list50 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list53 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list53);
    java2.util2.List list55 = java2.util2.Collections.unmodifiableList(list53);
    int i56 = java2.util2.Collections.indexOfSubList(list50, list55);
    java2.util2.Map map57 = java2.util2.Collections.singletonMap((java.lang.Object)0L, (java.lang.Object)list55);
    java2.util2.List list61 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list64 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list64);
    java2.util2.List list66 = java2.util2.Collections.unmodifiableList(list64);
    int i67 = java2.util2.Collections.indexOfSubList(list61, list66);
    java2.util2.Map map68 = java2.util2.Collections.singletonMap((java.lang.Object)0L, (java.lang.Object)list66);
    int i69 = java2.util2.Collections.lastIndexOfSubList(list55, list66);
    boolean b70 = treeSet4.equals((java.lang.Object)list55);
    java2.util2.SortedSet sortedSet71 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet4);
    java.lang.Object[] obj_array72 = treeSet4.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array72);

  }

  @Test
  public void test184() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test184"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list2);
    java2.util2.List list4 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.Collection collection5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list4);
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet(collection5);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection(collection5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);

  }

  @Test
  public void test185() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test185"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list19 = java2.util2.Collections.unmodifiableList(list18);
    java2.util2.Collections.fill(list8, (java.lang.Object)list19);
    java2.util2.List list23 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set24 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set25 = java2.util2.Collections.unmodifiableSet(set24);
    java2.util2.TreeSet treeSet26 = new java2.util2.TreeSet((java2.util2.Collection)set24);
    java2.util2.List list29 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list30 = java2.util2.Collections.unmodifiableList(list29);
    java2.util2.List list33 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list34 = java2.util2.Collections.unmodifiableList(list33);
    java2.util2.List list37 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list37);
    int i40 = java2.util2.Collections.binarySearch(list37, (java.lang.Object)(short)100);
    boolean b41 = java2.util2.Collections.replaceAll(list29, (java.lang.Object)list34, (java.lang.Object)list37);
    boolean b42 = treeSet26.retainAll((java2.util2.Collection)list29);
    java2.util2.Collections.rotate(list29, 100);
    int i45 = java2.util2.Collections.lastIndexOfSubList(list8, list29);
    java2.util2.Collections.shuffle(list8);
    // The following exception was thrown during execution.
    try {
      java.lang.Object obj47 = java2.util2.Collections.min((java2.util2.Collection)list8);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet26.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet26.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet26.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);

  }

  @Test
  public void test186() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test186"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list19 = java2.util2.Collections.unmodifiableList(list18);
    java2.util2.Collections.fill(list8, (java.lang.Object)list19);
    java2.util2.List list21 = java2.util2.Collections.unmodifiableList(list19);
    java2.util2.List list22 = java2.util2.Collections.synchronizedList(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);

  }

  @Test
  public void test187() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test187"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set4 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set4);
    java.lang.Object[] obj_array6 = treeSet5.toArray();
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list12);
    java2.util2.List list14 = java2.util2.Collections.unmodifiableList(list12);
    java2.util2.Collections.copy(list9, list12);
    boolean b16 = treeSet5.addAll((java2.util2.Collection)list9);
    java.lang.Object obj17 = treeSet5.first();
    java2.util2.List list18 = java2.util2.Collections.nCopies(100, (java.lang.Object)treeSet5);
    java2.util2.List list19 = java2.util2.Collections.unmodifiableList(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + 0+ "'", obj17.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);

  }

  @Test
  public void test188() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test188"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)(-1.0d));
    java2.util2.List list4 = java2.util2.Collections.nCopies(0, (java.lang.Object)1);
    int i6 = java2.util2.Collections.binarySearch(list4, (java.lang.Object)"");
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list12);
    java2.util2.List list14 = java2.util2.Collections.unmodifiableList(list12);
    java2.util2.Collections.copy(list9, list12);
    java2.util2.Collections.fill(list9, (java.lang.Object)(short)(-1));
    java2.util2.List list20 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set21 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set22 = java2.util2.Collections.unmodifiableSet(set21);
    java2.util2.TreeSet treeSet23 = new java2.util2.TreeSet((java2.util2.Collection)set21);
    java2.util2.SortedSet sortedSet25 = treeSet23.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj26 = java2.util2.Collections.max((java2.util2.Collection)treeSet23);
    java2.util2.List list29 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list29);
    java2.util2.List list31 = java2.util2.Collections.unmodifiableList(list29);
    java2.util2.Collection collection32 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list31);
    boolean b33 = treeSet23.equals((java.lang.Object)collection32);
    java2.util2.List list36 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set37 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet38 = new java2.util2.TreeSet((java2.util2.Collection)set37);
    java.lang.Object[] obj_array39 = treeSet38.toArray();
    java2.util2.List list42 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list45 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list45);
    java2.util2.List list47 = java2.util2.Collections.unmodifiableList(list45);
    java2.util2.Collections.copy(list42, list45);
    boolean b49 = treeSet38.addAll((java2.util2.Collection)list42);
    java2.util2.Comparator comparator50 = treeSet38.comparator();
    boolean b51 = treeSet23.removeAll((java2.util2.Collection)treeSet38);
    java2.util2.List list54 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list57 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list57);
    java2.util2.List list59 = java2.util2.Collections.unmodifiableList(list57);
    int i60 = java2.util2.Collections.indexOfSubList(list54, list59);
    java2.util2.List list63 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list66 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list66);
    java2.util2.List list68 = java2.util2.Collections.unmodifiableList(list66);
    java2.util2.Collections.copy(list63, list66);
    java2.util2.Collections.copy(list59, list63);
    java2.util2.List list73 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list76 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list76);
    java2.util2.List list78 = java2.util2.Collections.unmodifiableList(list76);
    java2.util2.Collections.copy(list73, list76);
    int i80 = java2.util2.Collections.indexOfSubList(list63, list76);
    java2.util2.Comparator comparator81 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list76, comparator81);
    int i83 = java2.util2.Collections.binarySearch(list9, (java.lang.Object)b51, comparator81);
    java2.util2.Collections.sort(list4, comparator81);
    java.lang.Object obj85 = java2.util2.Collections.min((java2.util2.Collection)set1, comparator81);
    java.lang.Object obj86 = java2.util2.Collections.max((java2.util2.Collection)set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet23.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet23.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet23.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + 0+ "'", obj26.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet38.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet38.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet38.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj85 + "' != '" + (-1.0d)+ "'", obj85.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj86 + "' != '" + (-1.0d)+ "'", obj86.equals((-1.0d)));

  }

  @Test
  public void test189() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test189"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.clone();
    java2.util2.Comparator comparator17 = treeSet4.comparator();
    java2.util2.Comparator comparator18 = treeSet4.comparator();
    java.lang.Object obj19 = java2.util2.Collections.min((java2.util2.Collection)treeSet4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + 0+ "'", obj19.equals(0));

  }

  @Test
  public void test190() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test190"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set4 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set4);
    java.lang.Object[] obj_array6 = treeSet5.toArray();
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list12);
    java2.util2.List list14 = java2.util2.Collections.unmodifiableList(list12);
    java2.util2.Collections.copy(list9, list12);
    boolean b16 = treeSet5.addAll((java2.util2.Collection)list9);
    java.lang.Object obj17 = treeSet5.first();
    java2.util2.SortedSet sortedSet19 = treeSet5.tailSet((java.lang.Object)"");
    java2.util2.List list20 = java2.util2.Collections.nCopies(1, (java.lang.Object)treeSet5);
    java.lang.Object obj21 = treeSet5.last();
    treeSet5.clear();
    boolean b23 = treeSet5.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + 0+ "'", obj17.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + 0+ "'", obj21.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);

  }

  @Test
  public void test191() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test191"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet5);
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list12);
    java2.util2.List list14 = java2.util2.Collections.unmodifiableList(list12);
    int i15 = java2.util2.Collections.indexOfSubList(list9, list14);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list21);
    java2.util2.List list23 = java2.util2.Collections.unmodifiableList(list21);
    java2.util2.Collections.copy(list18, list21);
    java2.util2.Collections.copy(list14, list18);
    java2.util2.List list28 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list31 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list31);
    java2.util2.List list33 = java2.util2.Collections.unmodifiableList(list31);
    java2.util2.Collections.copy(list28, list31);
    int i35 = java2.util2.Collections.indexOfSubList(list18, list31);
    boolean b36 = treeSet5.removeAll((java2.util2.Collection)list31);
    java2.util2.Comparator comparator37 = treeSet5.comparator();
    java2.util2.List list40 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set41 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set42 = java2.util2.Collections.unmodifiableSet(set41);
    boolean b43 = treeSet5.equals((java.lang.Object)set41);
    java2.util2.TreeSet treeSet44 = new java2.util2.TreeSet((java2.util2.Collection)set41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet44.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet44.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet44.toString(), "[0]");

  }

  @Test
  public void test192() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test192"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list6);
    java2.util2.List list8 = java2.util2.Collections.unmodifiableList(list6);
    java2.util2.Collections.copy(list3, list6);
    java2.util2.List list10 = java2.util2.Collections.unmodifiableList(list6);
    java2.util2.Collection collection11 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list6);
    java2.util2.List list12 = java2.util2.Collections.nCopies(1, (java.lang.Object)list6);
    java2.util2.List list15 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set16 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet17 = new java2.util2.TreeSet((java2.util2.Collection)set16);
    java.lang.Object[] obj_array18 = treeSet17.toArray();
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list24 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list24);
    java2.util2.List list26 = java2.util2.Collections.unmodifiableList(list24);
    java2.util2.Collections.copy(list21, list24);
    boolean b28 = treeSet17.addAll((java2.util2.Collection)list21);
    java.lang.Object obj29 = treeSet17.first();
    java2.util2.SortedSet sortedSet31 = treeSet17.tailSet((java.lang.Object)"");
    java.lang.String str32 = treeSet17.toString();
    java2.util2.SortedSet sortedSet33 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet17);
    // The following exception was thrown during execution.
    try {
      int i34 = java2.util2.Collections.binarySearch(list12, (java.lang.Object)treeSet17);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet17.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet17.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet17.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 0+ "'", obj29.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "[0]"+ "'", str32.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet33);

  }

  @Test
  public void test193() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test193"); }


    java2.util2.List list4 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list7 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list7);
    java2.util2.List list9 = java2.util2.Collections.unmodifiableList(list7);
    int i10 = java2.util2.Collections.indexOfSubList(list4, list9);
    java2.util2.Map map11 = java2.util2.Collections.singletonMap((java.lang.Object)0L, (java.lang.Object)list9);
    java2.util2.Map map12 = java2.util2.Collections.synchronizedMap(map11);
    java2.util2.Map map13 = java2.util2.Collections.unmodifiableMap(map11);
    java2.util2.Map map14 = java2.util2.Collections.synchronizedMap(map11);
    java2.util2.Map map15 = java2.util2.Collections.synchronizedMap(map11);
    java2.util2.Map map16 = java2.util2.Collections.synchronizedMap(map11);
    java2.util2.Map map17 = java2.util2.Collections.unmodifiableMap(map11);
    java2.util2.List list18 = java2.util2.Collections.nCopies(10, (java.lang.Object)map11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);

  }

  @Test
  public void test194() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test194"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    int i8 = java2.util2.Collections.indexOfSubList(list2, list7);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list14);
    java2.util2.List list16 = java2.util2.Collections.unmodifiableList(list14);
    java2.util2.Collections.copy(list11, list14);
    java2.util2.Collections.copy(list7, list11);
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list24 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list24);
    java2.util2.List list26 = java2.util2.Collections.unmodifiableList(list24);
    java2.util2.Collections.copy(list21, list24);
    java2.util2.List list28 = java2.util2.Collections.unmodifiableList(list24);
    java2.util2.Collections.copy(list11, list28);
    java2.util2.List list32 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set33 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set34 = java2.util2.Collections.unmodifiableSet(set33);
    java2.util2.TreeSet treeSet35 = new java2.util2.TreeSet((java2.util2.Collection)set33);
    java2.util2.List list38 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list41 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list41);
    java2.util2.List list43 = java2.util2.Collections.unmodifiableList(list41);
    java2.util2.Collections.copy(list38, list41);
    java2.util2.List list45 = java2.util2.Collections.unmodifiableList(list41);
    java2.util2.List list48 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list51 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list51);
    java2.util2.List list53 = java2.util2.Collections.unmodifiableList(list51);
    int i54 = java2.util2.Collections.indexOfSubList(list48, list53);
    java2.util2.List list57 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list60 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list60);
    java2.util2.List list62 = java2.util2.Collections.unmodifiableList(list60);
    java2.util2.Collections.copy(list57, list60);
    java2.util2.Collections.copy(list53, list57);
    java2.util2.List list67 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list70 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list70);
    java2.util2.List list72 = java2.util2.Collections.unmodifiableList(list70);
    java2.util2.Collections.copy(list67, list70);
    int i74 = java2.util2.Collections.indexOfSubList(list57, list70);
    java2.util2.Comparator comparator75 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list70, comparator75);
    java2.util2.Collections.sort(list45, comparator75);
    int i78 = java2.util2.Collections.binarySearch(list11, (java.lang.Object)set33, comparator75);
    java2.util2.Set set79 = java2.util2.Collections.synchronizedSet(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet35.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet35.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet35.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set79);

  }

  @Test
  public void test195() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test195"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    java.lang.String str1 = treeSet0.toString();
    java.lang.Object obj2 = treeSet0.clone();
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet((java2.util2.Collection)set6);
    java.lang.Object[] obj_array8 = treeSet7.toArray();
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list14);
    java2.util2.List list16 = java2.util2.Collections.unmodifiableList(list14);
    java2.util2.Collections.copy(list11, list14);
    boolean b18 = treeSet7.addAll((java2.util2.Collection)list11);
    java.lang.Object obj19 = treeSet7.clone();
    java2.util2.List list20 = java2.util2.Collections.singletonList(obj19);
    boolean b21 = treeSet0.remove(obj19);
    java2.util2.Iterator iterator22 = treeSet0.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[]"+ "'", str1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator22);

  }

  @Test
  public void test196() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test196"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.Enumeration enumeration16 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet4);
    java2.util2.List list19 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set20 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet21 = new java2.util2.TreeSet((java2.util2.Collection)set20);
    java.lang.Object[] obj_array22 = treeSet21.toArray();
    java2.util2.List list25 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list28 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list28);
    java2.util2.List list30 = java2.util2.Collections.unmodifiableList(list28);
    java2.util2.Collections.copy(list25, list28);
    boolean b32 = treeSet21.addAll((java2.util2.Collection)list25);
    java.lang.Object obj33 = treeSet21.clone();
    java2.util2.List list36 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list37 = java2.util2.Collections.unmodifiableList(list36);
    java2.util2.List list40 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list41 = java2.util2.Collections.unmodifiableList(list40);
    java2.util2.List list44 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list44);
    int i47 = java2.util2.Collections.binarySearch(list44, (java.lang.Object)(short)100);
    boolean b48 = java2.util2.Collections.replaceAll(list36, (java.lang.Object)list41, (java.lang.Object)list44);
    boolean b49 = treeSet21.removeAll((java2.util2.Collection)list36);
    java.lang.Object[] obj_array50 = treeSet21.toArray();
    boolean b51 = treeSet4.addAll((java2.util2.Collection)treeSet21);
    java2.util2.TreeSet treeSet52 = new java2.util2.TreeSet();
    java.lang.String str53 = treeSet52.toString();
    java.lang.Object obj54 = treeSet52.clone();
    java2.util2.List list55 = java2.util2.Collections.singletonList(obj54);
    boolean b56 = treeSet21.retainAll((java2.util2.Collection)list55);
    // The following exception was thrown during execution.
    try {
      java.lang.Object obj57 = treeSet21.first();
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet21.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet52.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet52.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet52.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "[]"+ "'", str53.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);

  }

  @Test
  public void test197() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test197"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet7 = treeSet5.headSet((java.lang.Object)(short)(-1));
    java2.util2.List list10 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set11 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet12 = new java2.util2.TreeSet((java2.util2.Collection)set11);
    java.lang.Object[] obj_array13 = treeSet12.toArray();
    java2.util2.List list16 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list19 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list19);
    java2.util2.List list21 = java2.util2.Collections.unmodifiableList(list19);
    java2.util2.Collections.copy(list16, list19);
    boolean b23 = treeSet12.addAll((java2.util2.Collection)list16);
    java.lang.Object obj24 = treeSet12.first();
    treeSet12.clear();
    java2.util2.List list28 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set29 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet30 = new java2.util2.TreeSet((java2.util2.Collection)set29);
    java.lang.Object[] obj_array31 = treeSet30.toArray();
    java2.util2.List list34 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list37 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list37);
    java2.util2.List list39 = java2.util2.Collections.unmodifiableList(list37);
    java2.util2.Collections.copy(list34, list37);
    boolean b41 = treeSet30.addAll((java2.util2.Collection)list34);
    java.lang.Object obj42 = treeSet30.clone();
    java2.util2.List list45 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list46 = java2.util2.Collections.unmodifiableList(list45);
    java2.util2.List list49 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list50 = java2.util2.Collections.unmodifiableList(list49);
    java2.util2.List list53 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list53);
    int i56 = java2.util2.Collections.binarySearch(list53, (java.lang.Object)(short)100);
    boolean b57 = java2.util2.Collections.replaceAll(list45, (java.lang.Object)list50, (java.lang.Object)list53);
    boolean b58 = treeSet30.removeAll((java2.util2.Collection)list45);
    java.lang.Object[] obj_array59 = treeSet30.toArray();
    java2.util2.SortedSet sortedSet60 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet30);
    boolean b61 = treeSet12.addAll((java2.util2.Collection)treeSet30);
    java2.util2.SortedSet sortedSet62 = treeSet5.tailSet((java.lang.Object)b61);
    java2.util2.List list63 = java2.util2.Collections.singletonList((java.lang.Object)sortedSet62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet12.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet12.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 0+ "'", obj24.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet30.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet30.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet30.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list63);

  }

  @Test
  public void test198() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test198"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list9 = java2.util2.Collections.unmodifiableList(list8);
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list12);
    java2.util2.List list16 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list16);
    int i19 = java2.util2.Collections.binarySearch(list16, (java.lang.Object)(short)100);
    boolean b20 = java2.util2.Collections.replaceAll(list8, (java.lang.Object)list13, (java.lang.Object)list16);
    boolean b21 = treeSet5.retainAll((java2.util2.Collection)list8);
    java2.util2.List list24 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set25 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set26 = java2.util2.Collections.unmodifiableSet(set25);
    java2.util2.TreeSet treeSet27 = new java2.util2.TreeSet((java2.util2.Collection)set25);
    java2.util2.SortedSet sortedSet28 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet27);
    java2.util2.Collections.fill(list8, (java.lang.Object)sortedSet28);
    java2.util2.List list32 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set33 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set34 = java2.util2.Collections.unmodifiableSet(set33);
    java2.util2.Collections.fill(list8, (java.lang.Object)set33);
    java2.util2.Collections.reverse(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet27.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet27.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);

  }

  @Test
  public void test199() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test199"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet20 = new java2.util2.TreeSet((java2.util2.Collection)set19);
    java.lang.Object[] obj_array21 = treeSet20.toArray();
    java2.util2.List list24 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list27);
    java2.util2.List list29 = java2.util2.Collections.unmodifiableList(list27);
    java2.util2.Collections.copy(list24, list27);
    boolean b31 = treeSet20.addAll((java2.util2.Collection)list24);
    java.lang.Object obj32 = treeSet20.clone();
    java2.util2.List list35 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list38 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list38);
    java2.util2.List list40 = java2.util2.Collections.unmodifiableList(list38);
    int i41 = java2.util2.Collections.indexOfSubList(list35, list40);
    java2.util2.List list44 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list47 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list47);
    java2.util2.List list49 = java2.util2.Collections.unmodifiableList(list47);
    java2.util2.Collections.copy(list44, list47);
    java2.util2.Collections.copy(list40, list44);
    java2.util2.List list54 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list57 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list57);
    java2.util2.List list59 = java2.util2.Collections.unmodifiableList(list57);
    java2.util2.Collections.copy(list54, list57);
    int i61 = java2.util2.Collections.indexOfSubList(list44, list57);
    boolean b62 = treeSet20.removeAll((java2.util2.Collection)list57);
    java2.util2.List list66 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list69 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list69);
    java2.util2.List list71 = java2.util2.Collections.unmodifiableList(list69);
    int i72 = java2.util2.Collections.indexOfSubList(list66, list71);
    java2.util2.Map map73 = java2.util2.Collections.singletonMap((java.lang.Object)0L, (java.lang.Object)list71);
    java2.util2.List list77 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list80 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list80);
    java2.util2.List list82 = java2.util2.Collections.unmodifiableList(list80);
    int i83 = java2.util2.Collections.indexOfSubList(list77, list82);
    java2.util2.Map map84 = java2.util2.Collections.singletonMap((java.lang.Object)0L, (java.lang.Object)list82);
    int i85 = java2.util2.Collections.lastIndexOfSubList(list71, list82);
    boolean b86 = treeSet20.equals((java.lang.Object)list71);
    java2.util2.SortedSet sortedSet87 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet20);
    boolean b88 = treeSet4.retainAll((java2.util2.Collection)treeSet20);
    java.lang.Object obj89 = treeSet20.last();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet20.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet20.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet20.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj89 + "' != '" + 0+ "'", obj89.equals(0));

  }

  @Test
  public void test200() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test200"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet5);
    java.lang.Object[] obj_array7 = treeSet5.toArray();
    java.lang.Object[] obj_array8 = treeSet5.toArray();
    java.lang.Object obj9 = treeSet5.last();
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set13 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set14 = java2.util2.Collections.unmodifiableSet(set13);
    java2.util2.TreeSet treeSet15 = new java2.util2.TreeSet((java2.util2.Collection)set13);
    java2.util2.SortedSet sortedSet16 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet15);
    java2.util2.List list19 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list22 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list22);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list22);
    int i25 = java2.util2.Collections.indexOfSubList(list19, list24);
    java2.util2.List list28 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list31 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list31);
    java2.util2.List list33 = java2.util2.Collections.unmodifiableList(list31);
    java2.util2.Collections.copy(list28, list31);
    java2.util2.Collections.copy(list24, list28);
    java2.util2.List list38 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list41 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list41);
    java2.util2.List list43 = java2.util2.Collections.unmodifiableList(list41);
    java2.util2.Collections.copy(list38, list41);
    int i45 = java2.util2.Collections.indexOfSubList(list28, list41);
    boolean b46 = treeSet15.removeAll((java2.util2.Collection)list41);
    java2.util2.Comparator comparator47 = treeSet15.comparator();
    java2.util2.List list50 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set51 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set52 = java2.util2.Collections.unmodifiableSet(set51);
    boolean b53 = treeSet15.equals((java.lang.Object)set51);
    java.lang.Object obj54 = java2.util2.Collections.max((java2.util2.Collection)treeSet15);
    boolean b55 = treeSet5.contains(obj54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 0+ "'", obj9.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet15.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet15.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj54 + "' != '" + 0+ "'", obj54.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);

  }

  @Test
  public void test201() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test201"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.Enumeration enumeration16 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet4);
    java2.util2.ArrayList arrayList17 = java2.util2.Collections.list(enumeration16);
    java2.util2.ArrayList arrayList18 = java2.util2.Collections.list(enumeration16);
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set22 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set23 = java2.util2.Collections.unmodifiableSet(set22);
    java2.util2.TreeSet treeSet24 = new java2.util2.TreeSet((java2.util2.Collection)set22);
    java.lang.Object[] obj_array26 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array27 = treeSet24.toArray(obj_array26);
    java.lang.Object[] obj_array28 = arrayList18.toArray(obj_array26);
    java2.util2.List list31 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set32 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set33 = java2.util2.Collections.unmodifiableSet(set32);
    java2.util2.TreeSet treeSet34 = new java2.util2.TreeSet((java2.util2.Collection)set32);
    java2.util2.SortedSet sortedSet35 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet34);
    java.lang.Object[] obj_array36 = treeSet34.toArray();
    java.lang.Object obj37 = java2.util2.Collections.max((java2.util2.Collection)treeSet34);
    java2.util2.Collections.fill((java2.util2.List)arrayList18, (java.lang.Object)treeSet34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet24.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet24.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet24.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet34.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet34.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet34.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj37 + "' != '" + 0+ "'", obj37.equals(0));

  }

  @Test
  public void test202() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test202"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet7 = treeSet5.headSet((java.lang.Object)(short)(-1));
    java2.util2.List list10 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set11 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet12 = new java2.util2.TreeSet((java2.util2.Collection)set11);
    java.lang.Object[] obj_array13 = treeSet12.toArray();
    java2.util2.List list16 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list19 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list19);
    java2.util2.List list21 = java2.util2.Collections.unmodifiableList(list19);
    java2.util2.Collections.copy(list16, list19);
    boolean b23 = treeSet12.addAll((java2.util2.Collection)list16);
    java.lang.Object obj24 = treeSet12.first();
    treeSet12.clear();
    java2.util2.List list28 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set29 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet30 = new java2.util2.TreeSet((java2.util2.Collection)set29);
    java.lang.Object[] obj_array31 = treeSet30.toArray();
    java2.util2.List list34 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list37 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list37);
    java2.util2.List list39 = java2.util2.Collections.unmodifiableList(list37);
    java2.util2.Collections.copy(list34, list37);
    boolean b41 = treeSet30.addAll((java2.util2.Collection)list34);
    java.lang.Object obj42 = treeSet30.clone();
    java2.util2.List list45 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list46 = java2.util2.Collections.unmodifiableList(list45);
    java2.util2.List list49 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list50 = java2.util2.Collections.unmodifiableList(list49);
    java2.util2.List list53 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list53);
    int i56 = java2.util2.Collections.binarySearch(list53, (java.lang.Object)(short)100);
    boolean b57 = java2.util2.Collections.replaceAll(list45, (java.lang.Object)list50, (java.lang.Object)list53);
    boolean b58 = treeSet30.removeAll((java2.util2.Collection)list45);
    java.lang.Object[] obj_array59 = treeSet30.toArray();
    java2.util2.SortedSet sortedSet60 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet30);
    boolean b61 = treeSet12.addAll((java2.util2.Collection)treeSet30);
    java2.util2.SortedSet sortedSet62 = treeSet5.tailSet((java.lang.Object)b61);
    java2.util2.Set set63 = java2.util2.Collections.singleton((java.lang.Object)b61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet12.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet12.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 0+ "'", obj24.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet30.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet30.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet30.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set63);

  }

  @Test
  public void test203() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test203"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list6);
    java2.util2.List list8 = java2.util2.Collections.unmodifiableList(list6);
    int i9 = java2.util2.Collections.indexOfSubList(list3, list8);
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list15 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list15);
    java2.util2.List list17 = java2.util2.Collections.unmodifiableList(list15);
    java2.util2.Collections.copy(list12, list15);
    java2.util2.Collections.copy(list8, list12);
    java2.util2.List list22 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list25 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list25);
    java2.util2.List list27 = java2.util2.Collections.unmodifiableList(list25);
    java2.util2.Collections.copy(list22, list25);
    int i29 = java2.util2.Collections.indexOfSubList(list12, list25);
    java2.util2.Comparator comparator30 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list25, comparator30);
    boolean b32 = treeSet0.addAll((java2.util2.Collection)list25);
    java2.util2.List list35 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set36 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set37 = java2.util2.Collections.unmodifiableSet(set36);
    java2.util2.TreeSet treeSet38 = new java2.util2.TreeSet((java2.util2.Collection)set36);
    java2.util2.SortedSet sortedSet39 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet38);
    java.lang.Object obj40 = treeSet38.clone();
    java2.util2.SortedSet sortedSet41 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet38);
    java2.util2.Comparator comparator42 = treeSet38.comparator();
    java2.util2.Comparator comparator43 = treeSet38.comparator();
    boolean b44 = treeSet0.equals((java.lang.Object)comparator43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet38.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet38.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet38.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);

  }

  @Test
  public void test204() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test204"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set9 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set10 = java2.util2.Collections.unmodifiableSet(set9);
    java2.util2.TreeSet treeSet11 = new java2.util2.TreeSet((java2.util2.Collection)set9);
    java.lang.Object[] obj_array13 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array14 = treeSet11.toArray(obj_array13);
    java2.util2.List list17 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set18 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet19 = new java2.util2.TreeSet((java2.util2.Collection)set18);
    java.lang.Object[] obj_array20 = treeSet19.toArray();
    java.lang.Object[] obj_array21 = treeSet11.toArray(obj_array20);
    java.lang.Object[] obj_array22 = treeSet5.toArray(obj_array20);
    java2.util2.SortedSet sortedSet23 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet5);
    java2.util2.Comparator comparator24 = treeSet5.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet11.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet11.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet11.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet19.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet19.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator24);

  }

  @Test
  public void test205() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test205"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.Comparator comparator16 = treeSet4.comparator();
    java2.util2.List list19 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set20 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet21 = new java2.util2.TreeSet((java2.util2.Collection)set20);
    java.lang.Object[] obj_array22 = treeSet21.toArray();
    java2.util2.List list25 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list28 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list28);
    java2.util2.List list30 = java2.util2.Collections.unmodifiableList(list28);
    java2.util2.Collections.copy(list25, list28);
    boolean b32 = treeSet21.addAll((java2.util2.Collection)list25);
    java.lang.Object obj33 = treeSet21.first();
    java2.util2.SortedSet sortedSet35 = treeSet21.tailSet((java.lang.Object)"");
    java.lang.String str36 = treeSet21.toString();
    java2.util2.SortedSet sortedSet37 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet21);
    boolean b39 = treeSet21.equals((java.lang.Object)"hi!");
    java2.util2.SortedSet sortedSet40 = treeSet4.headSet((java.lang.Object)"hi!");
    java2.util2.Collection collection41 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet21.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet21.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + 0+ "'", obj33.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "[0]"+ "'", str36.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection41);

  }

  @Test
  public void test206() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test206"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list9);
    java2.util2.List list11 = java2.util2.Collections.unmodifiableList(list9);
    int i12 = java2.util2.Collections.indexOfSubList(list6, list11);
    java2.util2.List list13 = java2.util2.Collections.synchronizedList(list11);
    int i14 = java2.util2.Collections.lastIndexOfSubList(list2, list11);
    java2.util2.Collection collection15 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list2);
    java2.util2.TreeSet treeSet16 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet16.toString(), "[]");

  }

  @Test
  public void test207() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test207"); }


    java2.util2.Comparator comparator0 = java2.util2.Collections.reverseOrder();
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.List list4 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set5 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet((java2.util2.Collection)set5);
    java.lang.Object[] obj_array7 = treeSet6.toArray();
    java2.util2.List list10 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list13 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list13);
    java2.util2.List list15 = java2.util2.Collections.unmodifiableList(list13);
    java2.util2.Collections.copy(list10, list13);
    boolean b17 = treeSet6.addAll((java2.util2.Collection)list10);
    java2.util2.Comparator comparator18 = treeSet6.comparator();
    java2.util2.Iterator iterator19 = treeSet6.iterator();
    java.lang.Object obj20 = treeSet6.first();
    java2.util2.SortedSet sortedSet21 = treeSet1.headSet(obj20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + 0+ "'", obj20.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet21);

  }

  @Test
  public void test208() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test208"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet5);
    java.lang.Object obj7 = treeSet5.clone();
    java2.util2.SortedSet sortedSet8 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet5);
    java2.util2.Comparator comparator9 = treeSet5.comparator();
    boolean b10 = treeSet5.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test209() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test209"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set9 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set10 = java2.util2.Collections.unmodifiableSet(set9);
    java2.util2.TreeSet treeSet11 = new java2.util2.TreeSet((java2.util2.Collection)set9);
    java.lang.Object[] obj_array13 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array14 = treeSet11.toArray(obj_array13);
    java2.util2.List list17 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set18 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet19 = new java2.util2.TreeSet((java2.util2.Collection)set18);
    java.lang.Object[] obj_array20 = treeSet19.toArray();
    java.lang.Object[] obj_array21 = treeSet11.toArray(obj_array20);
    java.lang.Object[] obj_array22 = treeSet5.toArray(obj_array20);
    java2.util2.SortedSet sortedSet23 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet5);
    java2.util2.Collection collection24 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet11.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet11.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet11.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet19.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet19.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection24);

  }

  @Test
  public void test210() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test210"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.fill(list2, (java.lang.Object)(-1.0d));
    java2.util2.List list10 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set11 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set12 = java2.util2.Collections.unmodifiableSet(set11);
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet((java2.util2.Collection)set11);
    java2.util2.SortedSet sortedSet15 = treeSet13.tailSet((java.lang.Object)(short)0);
    java2.util2.Collection collection16 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)sortedSet15);
    java2.util2.List list17 = java2.util2.Collections.singletonList((java.lang.Object)collection16);
    int i18 = java2.util2.Collections.lastIndexOfSubList(list2, list17);
    java2.util2.Collections.shuffle(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == (-1));

  }

  @Test
  public void test211() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test211"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    java2.util2.Collections.copy(list2, list5);
    java2.util2.Collections.fill(list2, (java.lang.Object)(short)(-1));
    java2.util2.List list13 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set14 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set15 = java2.util2.Collections.unmodifiableSet(set14);
    java2.util2.TreeSet treeSet16 = new java2.util2.TreeSet((java2.util2.Collection)set14);
    java2.util2.SortedSet sortedSet18 = treeSet16.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj19 = java2.util2.Collections.max((java2.util2.Collection)treeSet16);
    java2.util2.List list22 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list22);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list22);
    java2.util2.Collection collection25 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list24);
    boolean b26 = treeSet16.equals((java.lang.Object)collection25);
    java2.util2.List list29 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set30 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet31 = new java2.util2.TreeSet((java2.util2.Collection)set30);
    java.lang.Object[] obj_array32 = treeSet31.toArray();
    java2.util2.List list35 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list38 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list38);
    java2.util2.List list40 = java2.util2.Collections.unmodifiableList(list38);
    java2.util2.Collections.copy(list35, list38);
    boolean b42 = treeSet31.addAll((java2.util2.Collection)list35);
    java2.util2.Comparator comparator43 = treeSet31.comparator();
    boolean b44 = treeSet16.removeAll((java2.util2.Collection)treeSet31);
    java2.util2.List list47 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list50 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list50);
    java2.util2.List list52 = java2.util2.Collections.unmodifiableList(list50);
    int i53 = java2.util2.Collections.indexOfSubList(list47, list52);
    java2.util2.List list56 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list59 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list59);
    java2.util2.List list61 = java2.util2.Collections.unmodifiableList(list59);
    java2.util2.Collections.copy(list56, list59);
    java2.util2.Collections.copy(list52, list56);
    java2.util2.List list66 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list69 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list69);
    java2.util2.List list71 = java2.util2.Collections.unmodifiableList(list69);
    java2.util2.Collections.copy(list66, list69);
    int i73 = java2.util2.Collections.indexOfSubList(list56, list69);
    java2.util2.Comparator comparator74 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list69, comparator74);
    int i76 = java2.util2.Collections.binarySearch(list2, (java.lang.Object)b44, comparator74);
    java2.util2.Collections.reverse(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet16.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + 0+ "'", obj19.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet31.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet31.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet31.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == (-1));

  }

  @Test
  public void test212() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test212"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    java2.util2.Collections.copy(list2, list5);
    java2.util2.Collections.reverse(list2);
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set13 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set14 = java2.util2.Collections.unmodifiableSet(set13);
    java2.util2.TreeSet treeSet15 = new java2.util2.TreeSet((java2.util2.Collection)set13);
    java2.util2.SortedSet sortedSet16 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet15);
    java2.util2.List list19 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list22 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list22);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list22);
    int i25 = java2.util2.Collections.indexOfSubList(list19, list24);
    java2.util2.List list28 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list31 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list31);
    java2.util2.List list33 = java2.util2.Collections.unmodifiableList(list31);
    java2.util2.Collections.copy(list28, list31);
    java2.util2.Collections.copy(list24, list28);
    java2.util2.List list38 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list41 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list41);
    java2.util2.List list43 = java2.util2.Collections.unmodifiableList(list41);
    java2.util2.Collections.copy(list38, list41);
    int i45 = java2.util2.Collections.indexOfSubList(list28, list41);
    boolean b46 = treeSet15.removeAll((java2.util2.Collection)list41);
    java2.util2.List list49 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list52 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list52);
    java2.util2.List list54 = java2.util2.Collections.unmodifiableList(list52);
    java2.util2.Collections.copy(list49, list52);
    java2.util2.List list56 = java2.util2.Collections.unmodifiableList(list52);
    java2.util2.List list59 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list62 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list62);
    java2.util2.List list64 = java2.util2.Collections.unmodifiableList(list62);
    int i65 = java2.util2.Collections.indexOfSubList(list59, list64);
    java2.util2.List list68 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list71 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list71);
    java2.util2.List list73 = java2.util2.Collections.unmodifiableList(list71);
    java2.util2.Collections.copy(list68, list71);
    java2.util2.Collections.copy(list64, list68);
    java2.util2.List list78 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list81 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list81);
    java2.util2.List list83 = java2.util2.Collections.unmodifiableList(list81);
    java2.util2.Collections.copy(list78, list81);
    int i85 = java2.util2.Collections.indexOfSubList(list68, list81);
    java2.util2.Comparator comparator86 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list81, comparator86);
    java2.util2.Collections.sort(list56, comparator86);
    java2.util2.Collections.copy(list41, list56);
    java2.util2.Collections.reverse(list41);
    int i91 = java2.util2.Collections.indexOfSubList(list2, list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet15.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet15.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 0);

  }

  @Test
  public void test213() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test213"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    int i8 = java2.util2.Collections.indexOfSubList(list2, list7);
    java2.util2.Collections.shuffle(list7);
    java2.util2.List list10 = java2.util2.Collections.singletonList((java.lang.Object)list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);

  }

  @Test
  public void test214() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test214"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list9 = java2.util2.Collections.unmodifiableList(list8);
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list12);
    java2.util2.List list16 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list16);
    int i19 = java2.util2.Collections.binarySearch(list16, (java.lang.Object)(short)100);
    boolean b20 = java2.util2.Collections.replaceAll(list8, (java.lang.Object)list13, (java.lang.Object)list16);
    boolean b21 = treeSet5.retainAll((java2.util2.Collection)list8);
    java2.util2.List list24 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set25 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set26 = java2.util2.Collections.unmodifiableSet(set25);
    java2.util2.TreeSet treeSet27 = new java2.util2.TreeSet((java2.util2.Collection)set25);
    java2.util2.SortedSet sortedSet29 = treeSet27.tailSet((java.lang.Object)(short)0);
    java2.util2.Collection collection30 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)sortedSet29);
    java2.util2.Set set31 = java2.util2.Collections.singleton((java.lang.Object)collection30);
    int i32 = java2.util2.Collections.binarySearch(list8, (java.lang.Object)set31);
    java2.util2.Enumeration enumeration33 = java2.util2.Collections.enumeration((java2.util2.Collection)set31);
    java2.util2.ArrayList arrayList34 = java2.util2.Collections.list(enumeration33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet27.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet27.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList34);

  }

  @Test
  public void test215() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test215"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    java.lang.String str1 = treeSet0.toString();
    java.lang.Object obj2 = treeSet0.clone();
    java2.util2.List list3 = java2.util2.Collections.singletonList(obj2);
    java2.util2.List list4 = java2.util2.Collections.singletonList(obj2);
    // The following exception was thrown during execution.
    try {
      java2.util2.Collections.sort(list4);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[]"+ "'", str1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list4);

  }

  @Test
  public void test216() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test216"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)1);
    int i4 = java2.util2.Collections.binarySearch(list2, (java.lang.Object)"");
    java2.util2.List list7 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list10 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list10);
    java2.util2.List list12 = java2.util2.Collections.unmodifiableList(list10);
    java2.util2.Collections.copy(list7, list10);
    java2.util2.Collections.fill(list7, (java.lang.Object)(short)(-1));
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set20 = java2.util2.Collections.unmodifiableSet(set19);
    java2.util2.TreeSet treeSet21 = new java2.util2.TreeSet((java2.util2.Collection)set19);
    java2.util2.SortedSet sortedSet23 = treeSet21.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj24 = java2.util2.Collections.max((java2.util2.Collection)treeSet21);
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list27);
    java2.util2.List list29 = java2.util2.Collections.unmodifiableList(list27);
    java2.util2.Collection collection30 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list29);
    boolean b31 = treeSet21.equals((java.lang.Object)collection30);
    java2.util2.List list34 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set35 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet36 = new java2.util2.TreeSet((java2.util2.Collection)set35);
    java.lang.Object[] obj_array37 = treeSet36.toArray();
    java2.util2.List list40 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list43 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list43);
    java2.util2.List list45 = java2.util2.Collections.unmodifiableList(list43);
    java2.util2.Collections.copy(list40, list43);
    boolean b47 = treeSet36.addAll((java2.util2.Collection)list40);
    java2.util2.Comparator comparator48 = treeSet36.comparator();
    boolean b49 = treeSet21.removeAll((java2.util2.Collection)treeSet36);
    java2.util2.List list52 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list55 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list55);
    java2.util2.List list57 = java2.util2.Collections.unmodifiableList(list55);
    int i58 = java2.util2.Collections.indexOfSubList(list52, list57);
    java2.util2.List list61 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list64 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list64);
    java2.util2.List list66 = java2.util2.Collections.unmodifiableList(list64);
    java2.util2.Collections.copy(list61, list64);
    java2.util2.Collections.copy(list57, list61);
    java2.util2.List list71 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list74 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list74);
    java2.util2.List list76 = java2.util2.Collections.unmodifiableList(list74);
    java2.util2.Collections.copy(list71, list74);
    int i78 = java2.util2.Collections.indexOfSubList(list61, list74);
    java2.util2.Comparator comparator79 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list74, comparator79);
    int i81 = java2.util2.Collections.binarySearch(list7, (java.lang.Object)b49, comparator79);
    java2.util2.Collections.sort(list2, comparator79);
    java2.util2.Collections.reverse(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet21.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 0+ "'", obj24.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet36.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet36.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet36.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == (-1));

  }

  @Test
  public void test217() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test217"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list19 = java2.util2.Collections.unmodifiableList(list18);
    java2.util2.Collections.fill(list8, (java.lang.Object)list19);
    java2.util2.Collection collection21 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list8);
    java2.util2.List list22 = java2.util2.Collections.unmodifiableList(list8);
    java2.util2.List list25 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set26 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set27 = java2.util2.Collections.unmodifiableSet(set26);
    java2.util2.TreeSet treeSet28 = new java2.util2.TreeSet((java2.util2.Collection)set26);
    java.lang.Object obj29 = treeSet28.first();
    java.lang.Object obj30 = java2.util2.Collections.min((java2.util2.Collection)treeSet28);
    java2.util2.List list33 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set34 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set35 = java2.util2.Collections.unmodifiableSet(set34);
    java2.util2.TreeSet treeSet36 = new java2.util2.TreeSet((java2.util2.Collection)set34);
    java2.util2.List list39 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list40 = java2.util2.Collections.unmodifiableList(list39);
    java2.util2.List list43 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list44 = java2.util2.Collections.unmodifiableList(list43);
    java2.util2.List list47 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list47);
    int i50 = java2.util2.Collections.binarySearch(list47, (java.lang.Object)(short)100);
    boolean b51 = java2.util2.Collections.replaceAll(list39, (java.lang.Object)list44, (java.lang.Object)list47);
    boolean b52 = treeSet36.retainAll((java2.util2.Collection)list39);
    java2.util2.Collections.rotate(list39, 100);
    boolean b55 = treeSet28.retainAll((java2.util2.Collection)list39);
    java2.util2.Collections.copy(list8, list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet28.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet28.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet28.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 0+ "'", obj29.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj30 + "' != '" + 0+ "'", obj30.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet36.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet36.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet36.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);

  }

  @Test
  public void test218() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test218"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set4 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set4);
    java.lang.Object[] obj_array6 = treeSet5.toArray();
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list12);
    java2.util2.List list14 = java2.util2.Collections.unmodifiableList(list12);
    java2.util2.Collections.copy(list9, list12);
    boolean b16 = treeSet5.addAll((java2.util2.Collection)list9);
    java.lang.Object obj17 = treeSet5.first();
    java2.util2.List list18 = java2.util2.Collections.nCopies(100, (java.lang.Object)treeSet5);
    java2.util2.List list22 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list25 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list25);
    java2.util2.List list27 = java2.util2.Collections.unmodifiableList(list25);
    java2.util2.Collections.copy(list22, list25);
    java2.util2.List list29 = java2.util2.Collections.unmodifiableList(list25);
    java2.util2.Collection collection30 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list25);
    java2.util2.List list31 = java2.util2.Collections.nCopies(1, (java.lang.Object)list25);
    boolean b32 = treeSet5.remove((java.lang.Object)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + 0+ "'", obj17.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);

  }

  @Test
  public void test219() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test219"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    int i8 = java2.util2.Collections.indexOfSubList(list2, list7);
    java2.util2.List list9 = java2.util2.Collections.synchronizedList(list7);
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list15 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list15);
    java2.util2.List list17 = java2.util2.Collections.unmodifiableList(list15);
    int i18 = java2.util2.Collections.indexOfSubList(list12, list17);
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list24 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list24);
    java2.util2.List list26 = java2.util2.Collections.unmodifiableList(list24);
    java2.util2.Collections.copy(list21, list24);
    java2.util2.Collections.copy(list17, list21);
    java2.util2.List list31 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list34 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list34);
    java2.util2.List list36 = java2.util2.Collections.unmodifiableList(list34);
    java2.util2.Collections.copy(list31, list34);
    int i38 = java2.util2.Collections.indexOfSubList(list21, list34);
    java2.util2.Collections.copy(list7, list21);
    java2.util2.List list42 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set43 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set44 = java2.util2.Collections.unmodifiableSet(set43);
    java2.util2.TreeSet treeSet45 = new java2.util2.TreeSet((java2.util2.Collection)set43);
    java2.util2.SortedSet sortedSet46 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet45);
    java.lang.Object obj47 = treeSet45.clone();
    java2.util2.SortedSet sortedSet48 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet45);
    java2.util2.Comparator comparator49 = treeSet45.comparator();
    java2.util2.TreeSet treeSet50 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet45);
    java.lang.String str51 = treeSet50.toString();
    int i52 = java2.util2.Collections.binarySearch(list7, (java.lang.Object)treeSet50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet45.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet45.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet45.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet50.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet50.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet50.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "[0]"+ "'", str51.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == (-1));

  }

  @Test
  public void test220() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test220"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet7 = treeSet5.tailSet((java.lang.Object)(short)0);
    java2.util2.List list10 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set11 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set12 = java2.util2.Collections.unmodifiableSet(set11);
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet((java2.util2.Collection)set11);
    java2.util2.List list16 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set17 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set18 = java2.util2.Collections.unmodifiableSet(set17);
    java2.util2.TreeSet treeSet19 = new java2.util2.TreeSet((java2.util2.Collection)set17);
    java.lang.Object[] obj_array21 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array22 = treeSet19.toArray(obj_array21);
    java2.util2.List list25 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set26 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet27 = new java2.util2.TreeSet((java2.util2.Collection)set26);
    java.lang.Object[] obj_array28 = treeSet27.toArray();
    java.lang.Object[] obj_array29 = treeSet19.toArray(obj_array28);
    java.lang.Object[] obj_array30 = treeSet13.toArray(obj_array28);
    java.lang.Object[] obj_array31 = treeSet5.toArray(obj_array28);
    java2.util2.List list35 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list38 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list38);
    java2.util2.List list40 = java2.util2.Collections.unmodifiableList(list38);
    int i41 = java2.util2.Collections.indexOfSubList(list35, list40);
    java2.util2.Map map42 = java2.util2.Collections.singletonMap((java.lang.Object)0L, (java.lang.Object)list40);
    boolean b43 = treeSet5.containsAll((java2.util2.Collection)list40);
    java2.util2.Collections.rotate(list40, 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet19.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet19.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet27.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet27.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);

  }

  @Test
  public void test221() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test221"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    java2.util2.Collections.copy(list2, list5);
    java2.util2.List list9 = java2.util2.Collections.unmodifiableList(list5);
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set13 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set14 = java2.util2.Collections.unmodifiableSet(set13);
    java2.util2.TreeSet treeSet15 = new java2.util2.TreeSet((java2.util2.Collection)set13);
    java2.util2.SortedSet sortedSet16 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet15);
    java.lang.Object obj17 = treeSet15.clone();
    java2.util2.TreeSet treeSet18 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet15);
    java2.util2.Collections.fill(list9, (java.lang.Object)treeSet15);
    int i20 = treeSet15.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet15.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet15.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet18.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet18.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);

  }

  @Test
  public void test222() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test222"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.clone();
    java2.util2.List list19 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list20 = java2.util2.Collections.unmodifiableList(list19);
    java2.util2.List list23 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list23);
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list27);
    int i30 = java2.util2.Collections.binarySearch(list27, (java.lang.Object)(short)100);
    boolean b31 = java2.util2.Collections.replaceAll(list19, (java.lang.Object)list24, (java.lang.Object)list27);
    boolean b32 = treeSet4.removeAll((java2.util2.Collection)list19);
    java.lang.Object[] obj_array33 = treeSet4.toArray();
    java2.util2.SortedSet sortedSet34 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet4);
    java2.util2.List list38 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list41 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list41);
    java2.util2.List list43 = java2.util2.Collections.unmodifiableList(list41);
    int i44 = java2.util2.Collections.indexOfSubList(list38, list43);
    java2.util2.Map map45 = java2.util2.Collections.singletonMap((java.lang.Object)0L, (java.lang.Object)list43);
    java2.util2.Map map46 = java2.util2.Collections.synchronizedMap(map45);
    java2.util2.Map map47 = java2.util2.Collections.unmodifiableMap(map45);
    java2.util2.Map map48 = java2.util2.Collections.synchronizedMap(map45);
    java2.util2.Map map49 = java2.util2.Collections.synchronizedMap(map45);
    java2.util2.Map map50 = java2.util2.Collections.synchronizedMap(map45);
    java2.util2.Map map51 = java2.util2.Collections.synchronizedMap(map45);
    java2.util2.Map map52 = java2.util2.Collections.unmodifiableMap(map51);
    // The following exception was thrown during execution.
    try {
      boolean b53 = treeSet4.remove((java.lang.Object)map52);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map52);

  }

  @Test
  public void test223() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test223"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.Comparator comparator16 = treeSet4.comparator();
    java2.util2.Iterator iterator17 = treeSet4.iterator();
    java2.util2.List list20 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set21 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set22 = java2.util2.Collections.unmodifiableSet(set21);
    java2.util2.TreeSet treeSet23 = new java2.util2.TreeSet((java2.util2.Collection)set21);
    java2.util2.SortedSet sortedSet25 = treeSet23.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj26 = java2.util2.Collections.max((java2.util2.Collection)treeSet23);
    // The following exception was thrown during execution.
    try {
      boolean b27 = treeSet4.contains((java.lang.Object)treeSet23);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet23.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet23.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet23.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + 0+ "'", obj26.equals(0));

  }

  @Test
  public void test224() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test224"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet((java2.util2.Collection)set12);
    java.lang.Object[] obj_array14 = treeSet13.toArray();
    java.lang.Object[] obj_array15 = treeSet5.toArray(obj_array14);
    java.lang.Object obj16 = java2.util2.Collections.max((java2.util2.Collection)treeSet5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 0+ "'", obj16.equals(0));

  }

  @Test
  public void test225() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test225"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    int i8 = java2.util2.Collections.indexOfSubList(list2, list7);
    java2.util2.Collections.shuffle(list7);
    java2.util2.List list13 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list16 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list16);
    java2.util2.List list18 = java2.util2.Collections.unmodifiableList(list16);
    int i19 = java2.util2.Collections.indexOfSubList(list13, list18);
    java2.util2.Map map20 = java2.util2.Collections.singletonMap((java.lang.Object)0L, (java.lang.Object)list18);
    java2.util2.List list23 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list26 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list26);
    java2.util2.List list28 = java2.util2.Collections.unmodifiableList(list26);
    int i29 = java2.util2.Collections.indexOfSubList(list23, list28);
    java2.util2.Collections.sort(list28);
    java2.util2.Collections.rotate(list28, 0);
    java2.util2.List list33 = java2.util2.Collections.unmodifiableList(list28);
    java2.util2.List list34 = java2.util2.Collections.unmodifiableList(list28);
    java2.util2.List list35 = java2.util2.Collections.synchronizedList(list28);
    int i36 = java2.util2.Collections.lastIndexOfSubList(list18, list28);
    int i37 = java2.util2.Collections.indexOfSubList(list7, list18);
    java2.util2.TreeSet treeSet38 = new java2.util2.TreeSet((java2.util2.Collection)list7);
    java2.util2.SortedSet sortedSet39 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet38.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet38.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet38.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet39);

  }

  @Test
  public void test226() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test226"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    int i8 = java2.util2.Collections.indexOfSubList(list2, list7);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list15 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.fill(list11, (java.lang.Object)(-1.0d));
    java2.util2.List list19 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set20 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set21 = java2.util2.Collections.unmodifiableSet(set20);
    java2.util2.TreeSet treeSet22 = new java2.util2.TreeSet((java2.util2.Collection)set20);
    java2.util2.SortedSet sortedSet24 = treeSet22.tailSet((java.lang.Object)(short)0);
    java2.util2.Collection collection25 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)sortedSet24);
    java2.util2.List list26 = java2.util2.Collections.singletonList((java.lang.Object)collection25);
    int i27 = java2.util2.Collections.lastIndexOfSubList(list11, list26);
    java2.util2.List list30 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set31 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set32 = java2.util2.Collections.unmodifiableSet(set31);
    java2.util2.TreeSet treeSet33 = new java2.util2.TreeSet((java2.util2.Collection)set31);
    java2.util2.SortedSet sortedSet34 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet33);
    java2.util2.Collections.fill(list11, (java.lang.Object)sortedSet34);
    java2.util2.Collections.reverse(list11);
    java2.util2.List list37 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list2, list11);
    java2.util2.List list39 = java2.util2.Collections.unmodifiableList(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet22.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet22.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet22.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet33.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet33.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet33.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);

  }

  @Test
  public void test227() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test227"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.first();
    java2.util2.SortedSet sortedSet18 = treeSet4.tailSet((java.lang.Object)"");
    java.lang.String str19 = treeSet4.toString();
    java2.util2.List list22 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list25 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list25);
    java2.util2.List list27 = java2.util2.Collections.unmodifiableList(list25);
    java2.util2.Collection collection28 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list27);
    java2.util2.Collections.copy(list22, list27);
    boolean b30 = treeSet4.retainAll((java2.util2.Collection)list22);
    java2.util2.Collections.reverse(list22);
    java2.util2.TreeSet treeSet32 = new java2.util2.TreeSet();
    java2.util2.List list35 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list38 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list38);
    java2.util2.List list40 = java2.util2.Collections.unmodifiableList(list38);
    int i41 = java2.util2.Collections.indexOfSubList(list35, list40);
    java2.util2.List list44 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list47 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list47);
    java2.util2.List list49 = java2.util2.Collections.unmodifiableList(list47);
    java2.util2.Collections.copy(list44, list47);
    java2.util2.Collections.copy(list40, list44);
    java2.util2.List list54 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list57 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list57);
    java2.util2.List list59 = java2.util2.Collections.unmodifiableList(list57);
    java2.util2.Collections.copy(list54, list57);
    int i61 = java2.util2.Collections.indexOfSubList(list44, list57);
    java2.util2.Comparator comparator62 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list57, comparator62);
    boolean b64 = treeSet32.addAll((java2.util2.Collection)list57);
    java2.util2.Collections.copy(list22, list57);
    java2.util2.Collection collection66 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 0+ "'", obj16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[0]"+ "'", str19.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet32.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet32.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet32.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection66);

  }

  @Test
  public void test228() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test228"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.Set set6 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet4);
    java2.util2.SortedSet sortedSet7 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);

  }

  @Test
  public void test229() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test229"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    java2.util2.Collections.copy(list2, list5);
    java2.util2.List list9 = java2.util2.Collections.unmodifiableList(list5);
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set13 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set14 = java2.util2.Collections.unmodifiableSet(set13);
    java2.util2.TreeSet treeSet15 = new java2.util2.TreeSet((java2.util2.Collection)set13);
    java2.util2.SortedSet sortedSet16 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet15);
    java.lang.Object obj17 = treeSet15.clone();
    java2.util2.TreeSet treeSet18 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet15);
    java2.util2.Collections.fill(list9, (java.lang.Object)treeSet15);
    java2.util2.Collection collection20 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet15.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet15.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet18.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet18.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);

  }

  @Test
  public void test230() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test230"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.clone();
    java2.util2.Comparator comparator17 = treeSet4.comparator();
    java2.util2.TreeSet treeSet18 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet4);
    treeSet18.clear();
    java2.util2.List list22 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set23 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set24 = java2.util2.Collections.unmodifiableSet(set23);
    java2.util2.TreeSet treeSet25 = new java2.util2.TreeSet((java2.util2.Collection)set23);
    java2.util2.List list28 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set29 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set30 = java2.util2.Collections.unmodifiableSet(set29);
    java2.util2.TreeSet treeSet31 = new java2.util2.TreeSet((java2.util2.Collection)set29);
    java.lang.Object[] obj_array33 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array34 = treeSet31.toArray(obj_array33);
    java2.util2.List list37 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set38 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet39 = new java2.util2.TreeSet((java2.util2.Collection)set38);
    java.lang.Object[] obj_array40 = treeSet39.toArray();
    java.lang.Object[] obj_array41 = treeSet31.toArray(obj_array40);
    java.lang.Object[] obj_array42 = treeSet25.toArray(obj_array40);
    java.lang.Object[] obj_array43 = treeSet18.toArray(obj_array40);
    java2.util2.List list46 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set47 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet48 = new java2.util2.TreeSet((java2.util2.Collection)set47);
    java.lang.Object[] obj_array49 = treeSet48.toArray();
    java2.util2.List list52 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list55 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list55);
    java2.util2.List list57 = java2.util2.Collections.unmodifiableList(list55);
    java2.util2.Collections.copy(list52, list55);
    boolean b59 = treeSet48.addAll((java2.util2.Collection)list52);
    java.lang.Object obj60 = treeSet48.clone();
    java2.util2.List list63 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list64 = java2.util2.Collections.unmodifiableList(list63);
    java2.util2.List list67 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list68 = java2.util2.Collections.unmodifiableList(list67);
    java2.util2.List list71 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list71);
    int i74 = java2.util2.Collections.binarySearch(list71, (java.lang.Object)(short)100);
    boolean b75 = java2.util2.Collections.replaceAll(list63, (java.lang.Object)list68, (java.lang.Object)list71);
    boolean b76 = treeSet48.removeAll((java2.util2.Collection)list63);
    java.lang.Object[] obj_array77 = treeSet48.toArray();
    java.lang.Object obj78 = treeSet48.last();
    boolean b79 = treeSet18.add(obj78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet18.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet18.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet25.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet25.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet25.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet31.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet31.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet31.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet39.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet39.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet39.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet48.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet48.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet48.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj78 + "' != '" + 0+ "'", obj78.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);

  }

  @Test
  public void test231() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test231"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.clone();
    java2.util2.List list19 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list22 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list22);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list22);
    int i25 = java2.util2.Collections.indexOfSubList(list19, list24);
    java2.util2.List list28 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list31 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list31);
    java2.util2.List list33 = java2.util2.Collections.unmodifiableList(list31);
    java2.util2.Collections.copy(list28, list31);
    java2.util2.Collections.copy(list24, list28);
    java2.util2.List list38 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list41 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list41);
    java2.util2.List list43 = java2.util2.Collections.unmodifiableList(list41);
    java2.util2.Collections.copy(list38, list41);
    int i45 = java2.util2.Collections.indexOfSubList(list28, list41);
    boolean b46 = treeSet4.removeAll((java2.util2.Collection)list41);
    java2.util2.List list50 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list53 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list53);
    java2.util2.List list55 = java2.util2.Collections.unmodifiableList(list53);
    int i56 = java2.util2.Collections.indexOfSubList(list50, list55);
    java2.util2.Map map57 = java2.util2.Collections.singletonMap((java.lang.Object)0L, (java.lang.Object)list55);
    java2.util2.List list61 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list64 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list64);
    java2.util2.List list66 = java2.util2.Collections.unmodifiableList(list64);
    int i67 = java2.util2.Collections.indexOfSubList(list61, list66);
    java2.util2.Map map68 = java2.util2.Collections.singletonMap((java.lang.Object)0L, (java.lang.Object)list66);
    int i69 = java2.util2.Collections.lastIndexOfSubList(list55, list66);
    boolean b70 = treeSet4.equals((java.lang.Object)list55);
    java2.util2.Comparator comparator71 = treeSet4.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator71);

  }

  @Test
  public void test232() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test232"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.first();
    java2.util2.SortedSet sortedSet18 = treeSet4.tailSet((java.lang.Object)"");
    java.lang.String str19 = treeSet4.toString();
    java.lang.Object[] obj_array20 = treeSet4.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 0+ "'", obj16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[0]"+ "'", str19.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array20);

  }

  @Test
  public void test233() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test233"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.Comparator comparator7 = treeSet6.comparator();
    // The following exception was thrown during execution.
    try {
      boolean b9 = treeSet6.remove((java.lang.Object)(-1.0f));
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator7);

  }

  @Test
  public void test234() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test234"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.clone();
    java2.util2.List list19 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list22 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list22);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list22);
    int i25 = java2.util2.Collections.indexOfSubList(list19, list24);
    java2.util2.List list28 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list31 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list31);
    java2.util2.List list33 = java2.util2.Collections.unmodifiableList(list31);
    java2.util2.Collections.copy(list28, list31);
    java2.util2.Collections.copy(list24, list28);
    java2.util2.List list38 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list41 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list41);
    java2.util2.List list43 = java2.util2.Collections.unmodifiableList(list41);
    java2.util2.Collections.copy(list38, list41);
    int i45 = java2.util2.Collections.indexOfSubList(list28, list41);
    boolean b46 = treeSet4.removeAll((java2.util2.Collection)list41);
    java2.util2.List list47 = java2.util2.Collections.synchronizedList(list41);
    java2.util2.List list50 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set51 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set52 = java2.util2.Collections.unmodifiableSet(set51);
    java2.util2.TreeSet treeSet53 = new java2.util2.TreeSet((java2.util2.Collection)set51);
    java2.util2.SortedSet sortedSet54 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet53);
    java2.util2.List list57 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list60 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list60);
    java2.util2.List list62 = java2.util2.Collections.unmodifiableList(list60);
    int i63 = java2.util2.Collections.indexOfSubList(list57, list62);
    java2.util2.List list66 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list69 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list69);
    java2.util2.List list71 = java2.util2.Collections.unmodifiableList(list69);
    java2.util2.Collections.copy(list66, list69);
    java2.util2.Collections.copy(list62, list66);
    java2.util2.List list76 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list79 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list79);
    java2.util2.List list81 = java2.util2.Collections.unmodifiableList(list79);
    java2.util2.Collections.copy(list76, list79);
    int i83 = java2.util2.Collections.indexOfSubList(list66, list79);
    boolean b84 = treeSet53.removeAll((java2.util2.Collection)list79);
    java2.util2.Comparator comparator85 = treeSet53.comparator();
    java2.util2.List list88 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set89 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set90 = java2.util2.Collections.unmodifiableSet(set89);
    boolean b91 = treeSet53.equals((java.lang.Object)set89);
    java.lang.Object[] obj_array92 = treeSet53.toArray();
    int i93 = java2.util2.Collections.binarySearch(list41, (java.lang.Object)obj_array92);
    java2.util2.Collections.sort(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet53.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet53.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet53.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == (-1));

  }

  @Test
  public void test235() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test235"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet5);
    java.lang.Object obj7 = treeSet5.clone();
    java2.util2.SortedSet sortedSet8 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet5);
    int i9 = treeSet5.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);

  }

  @Test
  public void test236() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test236"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set4 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set4);
    java.lang.Object[] obj_array6 = treeSet5.toArray();
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list12);
    java2.util2.List list14 = java2.util2.Collections.unmodifiableList(list12);
    java2.util2.Collections.copy(list9, list12);
    boolean b16 = treeSet5.addAll((java2.util2.Collection)list9);
    java.lang.Object obj17 = treeSet5.first();
    java2.util2.SortedSet sortedSet19 = treeSet5.tailSet((java.lang.Object)"");
    java2.util2.List list20 = java2.util2.Collections.nCopies(1, (java.lang.Object)treeSet5);
    java.lang.Object obj21 = treeSet5.last();
    java2.util2.List list24 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list27);
    java2.util2.List list29 = java2.util2.Collections.unmodifiableList(list27);
    java2.util2.Collection collection30 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list29);
    java2.util2.Collections.copy(list24, list29);
    java2.util2.List list34 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list34);
    java2.util2.List list38 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.fill(list34, (java.lang.Object)(-1.0d));
    java2.util2.List list42 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set43 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set44 = java2.util2.Collections.unmodifiableSet(set43);
    java2.util2.TreeSet treeSet45 = new java2.util2.TreeSet((java2.util2.Collection)set43);
    java2.util2.SortedSet sortedSet47 = treeSet45.tailSet((java.lang.Object)(short)0);
    java2.util2.Collection collection48 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)sortedSet47);
    java2.util2.List list49 = java2.util2.Collections.singletonList((java.lang.Object)collection48);
    int i50 = java2.util2.Collections.lastIndexOfSubList(list34, list49);
    int i51 = java2.util2.Collections.lastIndexOfSubList(list24, list34);
    boolean b52 = treeSet5.addAll((java2.util2.Collection)list24);
    java2.util2.SortedSet sortedSet53 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet5);
    java2.util2.Collection collection54 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + 0+ "'", obj17.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + 0+ "'", obj21.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet45.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet45.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet45.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection54);

  }

  @Test
  public void test237() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test237"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list6);
    java2.util2.List list8 = java2.util2.Collections.unmodifiableList(list6);
    int i9 = java2.util2.Collections.indexOfSubList(list3, list8);
    java2.util2.List list10 = java2.util2.Collections.synchronizedList(list8);
    java2.util2.List list13 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set14 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet15 = new java2.util2.TreeSet((java2.util2.Collection)set14);
    java.lang.Object[] obj_array16 = treeSet15.toArray();
    java2.util2.List list19 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list22 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list22);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list22);
    java2.util2.Collections.copy(list19, list22);
    boolean b26 = treeSet15.addAll((java2.util2.Collection)list19);
    java.lang.Object obj27 = treeSet15.first();
    java2.util2.SortedSet sortedSet29 = treeSet15.tailSet((java.lang.Object)"");
    java.lang.String str30 = treeSet15.toString();
    java2.util2.Set set31 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet15);
    int i32 = java2.util2.Collections.binarySearch(list8, (java.lang.Object)treeSet15);
    java2.util2.List list35 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list38 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list38);
    java2.util2.List list40 = java2.util2.Collections.unmodifiableList(list38);
    int i41 = java2.util2.Collections.indexOfSubList(list35, list40);
    java2.util2.Collections.sort(list40);
    java2.util2.Collections.rotate(list40, 0);
    java2.util2.List list45 = java2.util2.Collections.unmodifiableList(list40);
    boolean b46 = treeSet15.equals((java.lang.Object)list45);
    boolean b47 = treeSet0.equals((java.lang.Object)b46);
    java2.util2.List list50 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set51 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set52 = java2.util2.Collections.unmodifiableSet(set51);
    java2.util2.TreeSet treeSet53 = new java2.util2.TreeSet((java2.util2.Collection)set51);
    java2.util2.List list56 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list57 = java2.util2.Collections.unmodifiableList(list56);
    java2.util2.List list60 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list61 = java2.util2.Collections.unmodifiableList(list60);
    java2.util2.List list64 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list64);
    int i67 = java2.util2.Collections.binarySearch(list64, (java.lang.Object)(short)100);
    boolean b68 = java2.util2.Collections.replaceAll(list56, (java.lang.Object)list61, (java.lang.Object)list64);
    boolean b69 = treeSet53.retainAll((java2.util2.Collection)list56);
    boolean b70 = treeSet0.retainAll((java2.util2.Collection)treeSet53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet15.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet15.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + 0+ "'", obj27.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "[0]"+ "'", str30.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet53.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet53.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet53.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);

  }

  @Test
  public void test238() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test238"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.Enumeration enumeration16 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet4);
    java2.util2.List list19 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set20 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet21 = new java2.util2.TreeSet((java2.util2.Collection)set20);
    java.lang.Object[] obj_array22 = treeSet21.toArray();
    java2.util2.List list25 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list28 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list28);
    java2.util2.List list30 = java2.util2.Collections.unmodifiableList(list28);
    java2.util2.Collections.copy(list25, list28);
    boolean b32 = treeSet21.addAll((java2.util2.Collection)list25);
    java.lang.Object obj33 = treeSet21.clone();
    java2.util2.List list36 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list37 = java2.util2.Collections.unmodifiableList(list36);
    java2.util2.List list40 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list41 = java2.util2.Collections.unmodifiableList(list40);
    java2.util2.List list44 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list44);
    int i47 = java2.util2.Collections.binarySearch(list44, (java.lang.Object)(short)100);
    boolean b48 = java2.util2.Collections.replaceAll(list36, (java.lang.Object)list41, (java.lang.Object)list44);
    boolean b49 = treeSet21.removeAll((java2.util2.Collection)list36);
    java.lang.Object[] obj_array50 = treeSet21.toArray();
    boolean b51 = treeSet4.addAll((java2.util2.Collection)treeSet21);
    java2.util2.TreeSet treeSet52 = new java2.util2.TreeSet();
    java.lang.String str53 = treeSet52.toString();
    java.lang.Object obj54 = treeSet52.clone();
    java2.util2.List list55 = java2.util2.Collections.singletonList(obj54);
    boolean b56 = treeSet21.retainAll((java2.util2.Collection)list55);
    java2.util2.TreeSet treeSet57 = new java2.util2.TreeSet((java2.util2.Collection)treeSet21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet21.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet52.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet52.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet52.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "[]"+ "'", str53.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet57.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet57.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet57.toString(), "[]");

  }

  @Test
  public void test239() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test239"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    int i8 = java2.util2.Collections.indexOfSubList(list2, list7);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list14);
    java2.util2.List list16 = java2.util2.Collections.unmodifiableList(list14);
    java2.util2.Collections.copy(list11, list14);
    java2.util2.Collections.copy(list7, list11);
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list24 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list24);
    java2.util2.List list26 = java2.util2.Collections.unmodifiableList(list24);
    java2.util2.Collections.copy(list21, list24);
    int i28 = java2.util2.Collections.indexOfSubList(list11, list24);
    java2.util2.Collection collection29 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list11);
    java2.util2.Enumeration enumeration30 = java2.util2.Collections.enumeration((java2.util2.Collection)list11);
    java2.util2.List list33 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list36 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list36);
    java2.util2.List list38 = java2.util2.Collections.unmodifiableList(list36);
    java2.util2.Collection collection39 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list38);
    java2.util2.Collections.copy(list33, list38);
    java2.util2.List list43 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list43);
    java2.util2.List list47 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.fill(list43, (java.lang.Object)(-1.0d));
    java2.util2.List list51 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set52 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set53 = java2.util2.Collections.unmodifiableSet(set52);
    java2.util2.TreeSet treeSet54 = new java2.util2.TreeSet((java2.util2.Collection)set52);
    java2.util2.SortedSet sortedSet56 = treeSet54.tailSet((java.lang.Object)(short)0);
    java2.util2.Collection collection57 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)sortedSet56);
    java2.util2.List list58 = java2.util2.Collections.singletonList((java.lang.Object)collection57);
    int i59 = java2.util2.Collections.lastIndexOfSubList(list43, list58);
    int i60 = java2.util2.Collections.lastIndexOfSubList(list33, list43);
    java2.util2.List list61 = java2.util2.Collections.unmodifiableList(list33);
    java2.util2.List list62 = java2.util2.Collections.singletonList((java.lang.Object)list61);
    int i63 = java2.util2.Collections.binarySearch(list11, (java.lang.Object)list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet54.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet54.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet54.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == (-1));

  }

  @Test
  public void test240() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test240"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.clone();
    treeSet4.clear();
    java2.util2.Comparator comparator18 = treeSet4.comparator();
    java2.util2.TreeSet treeSet19 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet19.toString(), "[]");

  }

  @Test
  public void test241() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test241"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.first();
    treeSet4.clear();
    java2.util2.TreeSet treeSet18 = new java2.util2.TreeSet();
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list24 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list24);
    java2.util2.List list26 = java2.util2.Collections.unmodifiableList(list24);
    int i27 = java2.util2.Collections.indexOfSubList(list21, list26);
    java2.util2.List list30 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list33 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list33);
    java2.util2.List list35 = java2.util2.Collections.unmodifiableList(list33);
    java2.util2.Collections.copy(list30, list33);
    java2.util2.Collections.copy(list26, list30);
    java2.util2.List list40 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list43 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list43);
    java2.util2.List list45 = java2.util2.Collections.unmodifiableList(list43);
    java2.util2.Collections.copy(list40, list43);
    int i47 = java2.util2.Collections.indexOfSubList(list30, list43);
    java2.util2.Comparator comparator48 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list43, comparator48);
    boolean b50 = treeSet18.addAll((java2.util2.Collection)list43);
    java2.util2.Iterator iterator51 = treeSet18.iterator();
    boolean b52 = treeSet4.contains((java.lang.Object)treeSet18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 0+ "'", obj16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet18.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);

  }

  @Test
  public void test242() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test242"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet7 = treeSet5.tailSet((java.lang.Object)(short)0);
    java2.util2.Collection collection8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)sortedSet7);
    java2.util2.Set set9 = java2.util2.Collections.singleton((java.lang.Object)collection8);
    // The following exception was thrown during execution.
    try {
      java2.util2.Enumeration enumeration10 = java2.util2.Collections.enumeration(collection8);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);

  }

  @Test
  public void test243() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test243"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object obj6 = treeSet5.first();
    java.lang.Object obj7 = java2.util2.Collections.min((java2.util2.Collection)treeSet5);
    java2.util2.List list10 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set11 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set12 = java2.util2.Collections.unmodifiableSet(set11);
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet((java2.util2.Collection)set11);
    java2.util2.List list16 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list17 = java2.util2.Collections.unmodifiableList(list16);
    java2.util2.List list20 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list21 = java2.util2.Collections.unmodifiableList(list20);
    java2.util2.List list24 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list24);
    int i27 = java2.util2.Collections.binarySearch(list24, (java.lang.Object)(short)100);
    boolean b28 = java2.util2.Collections.replaceAll(list16, (java.lang.Object)list21, (java.lang.Object)list24);
    boolean b29 = treeSet13.retainAll((java2.util2.Collection)list16);
    java2.util2.Collections.rotate(list16, 100);
    boolean b32 = treeSet5.retainAll((java2.util2.Collection)list16);
    java2.util2.List list35 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    int i36 = java2.util2.Collections.indexOfSubList(list16, list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 0+ "'", obj6.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 0+ "'", obj7.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);

  }

  @Test
  public void test244() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test244"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.Comparator comparator16 = treeSet4.comparator();
    java2.util2.Iterator iterator17 = treeSet4.iterator();
    java2.util2.Set set18 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet4);
    treeSet4.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);

  }

}
