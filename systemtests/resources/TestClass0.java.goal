package foo.bar;

import org.junit.Test;

public class TestClass0 {

  public static boolean debug = false;

  @Test
  public void test1() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test1"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    boolean b2 = treeSet0.contains((java.lang.Object)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);

  }

  @Test
  public void test2() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test2"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)' ');
    java2.util2.Set set2 = java2.util2.Collections.unmodifiableSet(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);

  }

  @Test
  public void test3() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test3"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)' ');
    boolean b3 = treeSet0.containsAll((java2.util2.Collection)set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);

  }

  @Test
  public void test4() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test4"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    java2.util2.SortedSet sortedSet1 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet1);

  }

  @Test
  public void test5() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test5"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    int i1 = treeSet0.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);

  }

  @Test
  public void test6() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test6"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    java2.util2.Map map2 = java2.util2.Collections.singletonMap((java.lang.Object)treeSet0, (java.lang.Object)(-1));
    java2.util2.Map map3 = java2.util2.Collections.synchronizedMap(map2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map3);

  }

  @Test
  public void test7() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test7"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    java.lang.Object obj1 = treeSet0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj1);

  }

  @Test
  public void test8() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test8"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    boolean b2 = treeSet0.remove((java.lang.Object)10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);

  }

  @Test
  public void test9() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test9"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet((java2.util2.Collection)treeSet0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");

  }

  @Test
  public void test10() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test10"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj1 = treeSet0.last();
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");

  }

  @Test
  public void test11() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test11"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    java2.util2.Comparator comparator1 = treeSet0.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator1);

  }

  @Test
  public void test12() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test12"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    boolean b2 = treeSet0.equals((java.lang.Object)1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);

  }

  @Test
  public void test13() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test13"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    boolean b2 = treeSet0.remove((java.lang.Object)'4');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);

  }

  @Test
  public void test14() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test14"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    java2.util2.Iterator iterator1 = treeSet0.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator1);

  }

  @Test
  public void test15() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test15"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)set2);
    boolean b4 = treeSet0.addAll((java2.util2.Collection)set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[1.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);

  }

  @Test
  public void test16() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test16"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    treeSet0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");

  }

  @Test
  public void test17() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test17"); }


    java2.util2.Comparator comparator0 = java2.util2.Collections.reverseOrder();
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");

  }

  @Test
  public void test18() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test18"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    java2.util2.Map map2 = java2.util2.Collections.singletonMap((java.lang.Object)treeSet0, (java.lang.Object)(short)0);
    java2.util2.Map map3 = java2.util2.Collections.synchronizedMap(map2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map3);

  }

  @Test
  public void test19() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test19"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet();
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection4 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set3);
    boolean b5 = treeSet1.removeAll(collection4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet6 = treeSet0.headSet((java.lang.Object)collection4);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test20() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test20"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set2);
    boolean b4 = treeSet0.removeAll(collection3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj5 = java2.util2.Collections.min((java2.util2.Collection)treeSet0);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test21() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test21"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    java.lang.String str1 = treeSet0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[]"+ "'", str1.equals("[]"));

  }

  @Test
  public void test22() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test22"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    java2.util2.Map map2 = java2.util2.Collections.singletonMap((java.lang.Object)treeSet0, (java.lang.Object)(short)0);
    java2.util2.Map map3 = java2.util2.Collections.unmodifiableMap(map2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map3);

  }

  @Test
  public void test23() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test23"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");

  }

  @Test
  public void test24() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test24"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)' ');
    java2.util2.Comparator comparator2 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj3 = java2.util2.Collections.max((java2.util2.Collection)set1, comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + ' '+ "'", obj3.equals(' '));

  }

  @Test
  public void test25() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test25"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    boolean b1 = treeSet0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);

  }

  @Test
  public void test26() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test26"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet3 = treeSet0.subSet((java.lang.Object)"", (java.lang.Object)0L);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");

  }

  @Test
  public void test27() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test27"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.unmodifiableSet(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);

  }

  @Test
  public void test28() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test28"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    java2.util2.SortedSet sortedSet2 = treeSet0.headSet((java.lang.Object)10.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet2);

  }

  @Test
  public void test29() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test29"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    boolean b2 = treeSet0.contains((java.lang.Object)(short)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);

  }

  @Test
  public void test30() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test30"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    java2.util2.SortedSet sortedSet1 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet1);

  }

  @Test
  public void test31() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test31"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    boolean b3 = treeSet0.containsAll((java2.util2.Collection)set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);

  }

  @Test
  public void test32() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test32"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    boolean b2 = treeSet0.add((java.lang.Object)1L);
    java2.util2.Iterator iterator3 = treeSet0.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator3);

  }

  @Test
  public void test33() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test33"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Comparator comparator2 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj3 = java2.util2.Collections.min((java2.util2.Collection)set1, comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10L+ "'", obj3.equals(10L));

  }

  @Test
  public void test34() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test34"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap((java2.util2.List)arrayList4, (-1), 1);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);

  }

  @Test
  public void test35() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test35"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet();
    java2.util2.Map map3 = java2.util2.Collections.singletonMap((java.lang.Object)treeSet1, (java.lang.Object)(-1));
    boolean b4 = treeSet0.equals((java.lang.Object)treeSet1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);

  }

  @Test
  public void test36() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test36"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    boolean b2 = treeSet0.add((java.lang.Object)1L);
    java2.util2.Comparator comparator3 = treeSet0.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator3);

  }

  @Test
  public void test37() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test37"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Collections.sort((java2.util2.List)arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);

  }

  @Test
  public void test38() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test38"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj1 = treeSet0.first();
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");

  }

  @Test
  public void test39() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test39"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    boolean b2 = treeSet0.add((java.lang.Object)1L);
    java2.util2.Set set5 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection6 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set5);
    java2.util2.Comparator comparator7 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj8 = java2.util2.Collections.max(collection6, comparator7);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet9 = treeSet0.subSet((java.lang.Object)1.0f, obj8);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 10L+ "'", obj8.equals(10L));

  }

  @Test
  public void test40() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test40"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.Comparator comparator3 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj4 = java2.util2.Collections.min((java2.util2.Collection)set2, comparator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj4);

  }

  @Test
  public void test41() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test41"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    boolean b2 = treeSet0.add((java.lang.Object)1L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b4 = treeSet0.add((java.lang.Object)(byte)0);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);

  }

  @Test
  public void test42() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test42"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.List list5 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);

  }

  @Test
  public void test43() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test43"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Comparator comparator5 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort((java2.util2.List)arrayList4, comparator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator5);

  }

  @Test
  public void test44() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test44"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    boolean b2 = treeSet0.add((java.lang.Object)1L);
    java.lang.Object obj3 = java2.util2.Collections.min((java2.util2.Collection)treeSet0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 1L+ "'", obj3.equals(1L));

  }

  @Test
  public void test45() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test45"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap((java2.util2.List)arrayList4, 0, 100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);

  }

  @Test
  public void test46() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test46"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Collections.copy((java2.util2.List)arrayList4, (java2.util2.List)arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);

  }

  @Test
  public void test47() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test47"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Collections.shuffle((java2.util2.List)arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);

  }

  @Test
  public void test48() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test48"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    java2.util2.Comparator comparator1 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj2 = java2.util2.Collections.max((java2.util2.Collection)treeSet0, comparator1);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator1);

  }

  @Test
  public void test49() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test49"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.Collection collection3 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)set1);
    java2.util2.Comparator comparator4 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj5 = java2.util2.Collections.min((java2.util2.Collection)set1, comparator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 1.0f+ "'", obj5.equals(1.0f));

  }

  @Test
  public void test50() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test50"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.List list5 = java2.util2.Collections.singletonList((java.lang.Object)enumeration3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap(list5, 1, 1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);

  }

  @Test
  public void test51() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test51"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.List list5 = java2.util2.Collections.singletonList((java.lang.Object)enumeration3);
    java2.util2.List list6 = java2.util2.Collections.unmodifiableList(list5);
    java2.util2.Collections.rotate(list6, 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);

  }

  @Test
  public void test52() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test52"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set2);
    java2.util2.Enumeration enumeration4 = java2.util2.Collections.enumeration((java2.util2.Collection)set2);
    java2.util2.ArrayList arrayList5 = java2.util2.Collections.list(enumeration4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet7 = treeSet0.subSet((java.lang.Object)enumeration4, (java.lang.Object)(short)0);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList5);

  }

  @Test
  public void test53() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test53"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    int i6 = java2.util2.Collections.binarySearch((java2.util2.List)arrayList4, (java.lang.Object)100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-2));

  }

  @Test
  public void test54() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test54"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.List list5 = java2.util2.Collections.singletonList((java.lang.Object)enumeration3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int i7 = java2.util2.Collections.binarySearch(list5, (java.lang.Object)(byte)100);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);

  }

  @Test
  public void test55() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test55"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    boolean b2 = treeSet0.add((java.lang.Object)1L);
    java.lang.Object obj3 = treeSet0.last();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 1L+ "'", obj3.equals(1L));

  }

  @Test
  public void test56() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test56"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    boolean b2 = treeSet0.add((java.lang.Object)1L);
    java.lang.Object obj3 = treeSet0.first();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 1L+ "'", obj3.equals(1L));

  }

  @Test
  public void test57() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test57"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.List list5 = java2.util2.Collections.singletonList((java.lang.Object)enumeration3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj6 = java2.util2.Collections.min((java2.util2.Collection)list5);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);

  }

  @Test
  public void test58() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test58"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set2);
    java2.util2.Enumeration enumeration4 = java2.util2.Collections.enumeration((java2.util2.Collection)set2);
    java2.util2.ArrayList arrayList5 = java2.util2.Collections.list(enumeration4);
    boolean b6 = treeSet0.containsAll((java2.util2.Collection)arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);

  }

  @Test
  public void test59() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test59"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.List list5 = java2.util2.Collections.singletonList((java.lang.Object)enumeration3);
    java2.util2.List list6 = java2.util2.Collections.unmodifiableList(list5);
    java2.util2.Comparator comparator7 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(list6, comparator7);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator7);

  }

  @Test
  public void test60() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test60"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    boolean b2 = treeSet0.add((java.lang.Object)1L);
    int i3 = treeSet0.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);

  }

  @Test
  public void test61() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test61"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java.lang.Object obj3 = java2.util2.Collections.min((java2.util2.Collection)set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10L+ "'", obj3.equals(10L));

  }

  @Test
  public void test62() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test62"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    boolean b2 = treeSet0.add((java.lang.Object)1L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b4 = treeSet0.contains((java.lang.Object)(short)0);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);

  }

  @Test
  public void test63() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test63"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)' ');
    java2.util2.Set set2 = java2.util2.Collections.synchronizedSet(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);

  }

  @Test
  public void test64() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test64"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.List list5 = java2.util2.Collections.singletonList((java.lang.Object)enumeration3);
    java2.util2.List list6 = java2.util2.Collections.unmodifiableList(list5);
    java2.util2.Set set8 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set8);
    java2.util2.Enumeration enumeration10 = java2.util2.Collections.enumeration((java2.util2.Collection)set8);
    java2.util2.ArrayList arrayList11 = java2.util2.Collections.list(enumeration10);
    java2.util2.ArrayList arrayList12 = java2.util2.Collections.list(enumeration10);
    java2.util2.Collections.copy(list6, (java2.util2.List)arrayList12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList12);

  }

  @Test
  public void test65() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test65"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    boolean b2 = treeSet0.add((java.lang.Object)1L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet5 = treeSet0.subSet((java.lang.Object)100L, (java.lang.Object)10);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);

  }

  @Test
  public void test66() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test66"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.List list10 = java2.util2.Collections.singletonList((java.lang.Object)enumeration8);
    java2.util2.List list11 = java2.util2.Collections.unmodifiableList(list10);
    java2.util2.Collections.copy((java2.util2.List)arrayList4, list10);
    java2.util2.Set set14 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection15 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set14);
    java2.util2.Comparator comparator16 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj17 = java2.util2.Collections.max(collection15, comparator16);
    java.lang.Object obj18 = java2.util2.Collections.min(collection15);
    java2.util2.Comparator comparator19 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int i20 = java2.util2.Collections.binarySearch(list10, obj18, comparator19);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + 10L+ "'", obj17.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 10L+ "'", obj18.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator19);

  }

  @Test
  public void test67() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test67"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Collections.fill((java2.util2.List)arrayList4, (java.lang.Object)arrayList9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap((java2.util2.List)arrayList9, 1, (-2));
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);

  }

  @Test
  public void test68() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test68"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.List list10 = java2.util2.Collections.singletonList((java.lang.Object)enumeration8);
    boolean b11 = arrayList4.retainAll((java2.util2.Collection)list10);
    java2.util2.Set set13 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection14 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set13);
    java2.util2.Enumeration enumeration15 = java2.util2.Collections.enumeration((java2.util2.Collection)set13);
    java2.util2.ArrayList arrayList16 = java2.util2.Collections.list(enumeration15);
    java2.util2.Set set18 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection19 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set18);
    java2.util2.Enumeration enumeration20 = java2.util2.Collections.enumeration((java2.util2.Collection)set18);
    java2.util2.ArrayList arrayList21 = java2.util2.Collections.list(enumeration20);
    java2.util2.Collections.fill((java2.util2.List)arrayList16, (java.lang.Object)arrayList21);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.copy((java2.util2.List)arrayList4, (java2.util2.List)arrayList21);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList21);

  }

  @Test
  public void test69() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test69"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    boolean b2 = treeSet0.add((java.lang.Object)1L);
    java2.util2.Set set3 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);

  }

  @Test
  public void test70() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test70"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.List list5 = java2.util2.Collections.singletonList((java.lang.Object)enumeration3);
    java2.util2.List list6 = java2.util2.Collections.unmodifiableList(list5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj7 = java2.util2.Collections.min((java2.util2.Collection)list5);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);

  }

  @Test
  public void test71() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test71"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    boolean b2 = treeSet0.add((java.lang.Object)1L);
    boolean b3 = treeSet0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);

  }

  @Test
  public void test72() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test72"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    boolean b2 = treeSet0.add((java.lang.Object)1L);
    java2.util2.Set set5 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection6 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set5);
    java2.util2.Enumeration enumeration7 = java2.util2.Collections.enumeration((java2.util2.Collection)set5);
    java2.util2.ArrayList arrayList8 = java2.util2.Collections.list(enumeration7);
    java2.util2.List list9 = java2.util2.Collections.singletonList((java.lang.Object)enumeration7);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet10 = treeSet0.subSet((java.lang.Object)(-1), (java.lang.Object)list9);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);

  }

  @Test
  public void test73() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test73"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.List list5 = java2.util2.Collections.singletonList((java.lang.Object)enumeration3);
    java2.util2.List list6 = java2.util2.Collections.unmodifiableList(list5);
    java2.util2.Set set8 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set8);
    java2.util2.Enumeration enumeration10 = java2.util2.Collections.enumeration((java2.util2.Collection)set8);
    java2.util2.ArrayList arrayList11 = java2.util2.Collections.list(enumeration10);
    java2.util2.List list12 = java2.util2.Collections.singletonList((java.lang.Object)enumeration10);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list12);
    int i14 = java2.util2.Collections.indexOfSubList(list6, list12);
    java2.util2.List list15 = java2.util2.Collections.unmodifiableList(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);

  }

  @Test
  public void test74() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test74"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    boolean b2 = treeSet0.add((java.lang.Object)1L);
    java.lang.String str3 = treeSet0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[1]"+ "'", str3.equals("[1]"));

  }

  @Test
  public void test75() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test75"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Collections.fill((java2.util2.List)arrayList4, (java.lang.Object)arrayList9);
    java.lang.Object[] obj_array11 = arrayList9.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array11);

  }

  @Test
  public void test76() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test76"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.List list5 = java2.util2.Collections.singletonList((java.lang.Object)enumeration3);
    java2.util2.List list6 = java2.util2.Collections.unmodifiableList(list5);
    java.lang.Object obj7 = new java.lang.Object();
    java2.util2.Comparator comparator8 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int i9 = java2.util2.Collections.binarySearch(list5, obj7, comparator8);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator8);

  }

  @Test
  public void test77() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test77"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    boolean b2 = treeSet0.add((java.lang.Object)1L);
    java2.util2.SortedSet sortedSet4 = treeSet0.headSet((java.lang.Object)'a');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet4);

  }

  @Test
  public void test78() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test78"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.List list5 = java2.util2.Collections.singletonList((java.lang.Object)enumeration3);
    java2.util2.List list6 = java2.util2.Collections.unmodifiableList(list5);
    java2.util2.Set set8 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set8);
    java2.util2.Enumeration enumeration10 = java2.util2.Collections.enumeration((java2.util2.Collection)set8);
    java2.util2.ArrayList arrayList11 = java2.util2.Collections.list(enumeration10);
    java2.util2.List list12 = java2.util2.Collections.singletonList((java.lang.Object)enumeration10);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list12);
    int i14 = java2.util2.Collections.indexOfSubList(list6, list12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap(list6, (-2), (-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test79() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test79"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.List list5 = java2.util2.Collections.singletonList((java.lang.Object)enumeration3);
    java2.util2.List list6 = java2.util2.Collections.unmodifiableList(list5);
    java2.util2.Set set8 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set8);
    java2.util2.Enumeration enumeration10 = java2.util2.Collections.enumeration((java2.util2.Collection)set8);
    java2.util2.ArrayList arrayList11 = java2.util2.Collections.list(enumeration10);
    java2.util2.List list12 = java2.util2.Collections.singletonList((java.lang.Object)enumeration10);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list12);
    int i14 = java2.util2.Collections.indexOfSubList(list6, list12);
    java2.util2.Comparator comparator15 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(list12, comparator15);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator15);

  }

  @Test
  public void test80() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test80"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.Set set5 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection6 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set5);
    java2.util2.Enumeration enumeration7 = java2.util2.Collections.enumeration((java2.util2.Collection)set5);
    java2.util2.ArrayList arrayList8 = java2.util2.Collections.list(enumeration7);
    java2.util2.Set set10 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection11 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set10);
    java2.util2.Enumeration enumeration12 = java2.util2.Collections.enumeration((java2.util2.Collection)set10);
    java2.util2.ArrayList arrayList13 = java2.util2.Collections.list(enumeration12);
    java2.util2.Set set15 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection16 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set15);
    java2.util2.Enumeration enumeration17 = java2.util2.Collections.enumeration((java2.util2.Collection)set15);
    java2.util2.ArrayList arrayList18 = java2.util2.Collections.list(enumeration17);
    java2.util2.List list19 = java2.util2.Collections.singletonList((java.lang.Object)enumeration17);
    java2.util2.List list20 = java2.util2.Collections.unmodifiableList(list19);
    java2.util2.Collections.copy((java2.util2.List)arrayList13, list19);
    boolean b22 = arrayList8.containsAll((java2.util2.Collection)arrayList13);
    java2.util2.TreeSet treeSet23 = new java2.util2.TreeSet();
    java2.util2.Set set26 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set27 = java2.util2.Collections.singleton((java.lang.Object)set26);
    java2.util2.Enumeration enumeration28 = java2.util2.Collections.enumeration((java2.util2.Collection)set26);
    java2.util2.Map map29 = java2.util2.Collections.singletonMap((java.lang.Object)10.0f, (java.lang.Object)enumeration28);
    boolean b30 = java2.util2.Collections.replaceAll((java2.util2.List)arrayList13, (java.lang.Object)treeSet23, (java.lang.Object)map29);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b31 = treeSet3.remove((java.lang.Object)treeSet23);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet23.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet23.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet23.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);

  }

  @Test
  public void test81() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test81"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.Set set4 = java2.util2.Collections.synchronizedSet(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);

  }

  @Test
  public void test82() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test82"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    boolean b2 = treeSet0.add((java.lang.Object)1L);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet();
    boolean b5 = treeSet3.add((java.lang.Object)1L);
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet();
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet();
    java2.util2.Set set9 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set9);
    boolean b11 = treeSet7.removeAll(collection10);
    java2.util2.Comparator comparator12 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj13 = java2.util2.Collections.max(collection10, comparator12);
    boolean b14 = treeSet6.containsAll(collection10);
    boolean b15 = treeSet3.removeAll(collection10);
    boolean b16 = treeSet0.removeAll((java2.util2.Collection)treeSet3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 10L+ "'", obj13.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);

  }

  @Test
  public void test83() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test83"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.List list10 = java2.util2.Collections.singletonList((java.lang.Object)enumeration8);
    java2.util2.List list11 = java2.util2.Collections.unmodifiableList(list10);
    java2.util2.Collections.copy((java2.util2.List)arrayList4, list10);
    java2.util2.Set set14 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set15 = java2.util2.Collections.singleton((java.lang.Object)set14);
    boolean b16 = arrayList4.retainAll((java2.util2.Collection)set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);

  }

  @Test
  public void test84() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test84"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java.lang.String str5 = arrayList4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[10]"+ "'", str5.equals("[10]"));

  }

  @Test
  public void test85() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test85"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    boolean b2 = treeSet0.add((java.lang.Object)1L);
    java2.util2.SortedSet sortedSet4 = treeSet0.headSet((java.lang.Object)(short)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet4);

  }

  @Test
  public void test86() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test86"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java.lang.Object obj5 = treeSet4.first();
    treeSet4.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj5);

  }

  @Test
  public void test87() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test87"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    boolean b2 = treeSet0.add((java.lang.Object)1L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b4 = treeSet0.contains((java.lang.Object)(short)10);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);

  }

  @Test
  public void test88() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test88"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.List list5 = java2.util2.Collections.singletonList((java.lang.Object)enumeration3);
    java2.util2.List list6 = java2.util2.Collections.unmodifiableList(list5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj7 = java2.util2.Collections.min((java2.util2.Collection)list6);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);

  }

  @Test
  public void test89() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test89"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    boolean b2 = treeSet0.add((java.lang.Object)1L);
    java2.util2.SortedSet sortedSet3 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet3);

  }

  @Test
  public void test90() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test90"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Collections.fill((java2.util2.List)arrayList4, (java.lang.Object)arrayList9);
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set12);
    java2.util2.Enumeration enumeration14 = java2.util2.Collections.enumeration((java2.util2.Collection)set12);
    java2.util2.ArrayList arrayList15 = java2.util2.Collections.list(enumeration14);
    java2.util2.List list16 = java2.util2.Collections.singletonList((java.lang.Object)enumeration14);
    java2.util2.List list17 = java2.util2.Collections.unmodifiableList(list16);
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set19);
    java2.util2.Enumeration enumeration21 = java2.util2.Collections.enumeration((java2.util2.Collection)set19);
    java2.util2.ArrayList arrayList22 = java2.util2.Collections.list(enumeration21);
    java2.util2.List list23 = java2.util2.Collections.singletonList((java.lang.Object)enumeration21);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list23);
    int i25 = java2.util2.Collections.indexOfSubList(list17, list23);
    java2.util2.Collections.fill((java2.util2.List)arrayList9, (java.lang.Object)list23);
    java2.util2.Collections.rotate((java2.util2.List)arrayList9, 0);
    java2.util2.Set set31 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection32 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set31);
    java2.util2.Enumeration enumeration33 = java2.util2.Collections.enumeration((java2.util2.Collection)set31);
    java2.util2.ArrayList arrayList34 = java2.util2.Collections.list(enumeration33);
    java2.util2.Set set36 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection37 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set36);
    java2.util2.Enumeration enumeration38 = java2.util2.Collections.enumeration((java2.util2.Collection)set36);
    java2.util2.ArrayList arrayList39 = java2.util2.Collections.list(enumeration38);
    java2.util2.List list40 = java2.util2.Collections.singletonList((java.lang.Object)enumeration38);
    java2.util2.List list41 = java2.util2.Collections.unmodifiableList(list40);
    java2.util2.Collections.copy((java2.util2.List)arrayList34, list40);
    boolean b43 = java2.util2.Collections.replaceAll((java2.util2.List)arrayList9, (java.lang.Object)(byte)10, (java.lang.Object)list40);
    java2.util2.List list44 = java2.util2.Collections.unmodifiableList(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);

  }

  @Test
  public void test91() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test91"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    boolean b2 = treeSet0.add((java.lang.Object)1L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b4 = treeSet0.add((java.lang.Object)100.0f);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);

  }

  @Test
  public void test92() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test92"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Set set11 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set11);
    java2.util2.Enumeration enumeration13 = java2.util2.Collections.enumeration((java2.util2.Collection)set11);
    java2.util2.ArrayList arrayList14 = java2.util2.Collections.list(enumeration13);
    java2.util2.List list15 = java2.util2.Collections.singletonList((java.lang.Object)enumeration13);
    java2.util2.List list16 = java2.util2.Collections.unmodifiableList(list15);
    java2.util2.Collections.copy((java2.util2.List)arrayList9, list15);
    boolean b18 = arrayList4.containsAll((java2.util2.Collection)arrayList9);
    java2.util2.List list19 = java2.util2.Collections.synchronizedList((java2.util2.List)arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);

  }

  @Test
  public void test93() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test93"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Collections.rotate((java2.util2.List)arrayList4, 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);

  }

  @Test
  public void test94() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test94"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java.lang.Object obj5 = treeSet4.first();
    java2.util2.Comparator comparator6 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj7 = java2.util2.Collections.min((java2.util2.Collection)treeSet4, comparator6);
    java2.util2.Set set9 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set9);
    java2.util2.Enumeration enumeration11 = java2.util2.Collections.enumeration((java2.util2.Collection)set9);
    java2.util2.ArrayList arrayList12 = java2.util2.Collections.list(enumeration11);
    java2.util2.ArrayList arrayList13 = java2.util2.Collections.list(enumeration11);
    java2.util2.TreeSet treeSet14 = new java2.util2.TreeSet();
    java2.util2.TreeSet treeSet15 = new java2.util2.TreeSet();
    java.lang.Object[] obj_array16 = treeSet15.toArray();
    java.lang.Object[] obj_array17 = treeSet14.toArray(obj_array16);
    java.lang.Object[] obj_array18 = arrayList13.toArray(obj_array16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b19 = treeSet4.contains((java.lang.Object)obj_array18);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet14.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet15.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array18);

  }

  @Test
  public void test95() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test95"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    treeSet3.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");

  }

  @Test
  public void test96() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test96"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.Set set3 = java2.util2.Collections.synchronizedSet(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);

  }

  @Test
  public void test97() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test97"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    boolean b2 = treeSet0.add((java.lang.Object)1L);
    java2.util2.Comparator comparator3 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj4 = java2.util2.Collections.max((java2.util2.Collection)treeSet0, comparator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 1L+ "'", obj4.equals(1L));

  }

  @Test
  public void test98() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test98"); }


    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection4 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set3);
    java2.util2.Collection collection5 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)set3);
    java2.util2.Map map6 = java2.util2.Collections.singletonMap((java.lang.Object)(-1), (java.lang.Object)collection5);
    java2.util2.List list7 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);

  }

  @Test
  public void test99() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test99"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.List list2 = java2.util2.Collections.nCopies((-1), (java.lang.Object)(-2));
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test100() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test100"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.List list10 = java2.util2.Collections.singletonList((java.lang.Object)enumeration8);
    boolean b11 = arrayList4.retainAll((java2.util2.Collection)list10);
    java2.util2.Collections.rotate(list10, 100);
    java2.util2.Set set16 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection17 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set16);
    java2.util2.Enumeration enumeration18 = java2.util2.Collections.enumeration((java2.util2.Collection)set16);
    java2.util2.ArrayList arrayList19 = java2.util2.Collections.list(enumeration18);
    java2.util2.Set set21 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection22 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set21);
    java2.util2.Enumeration enumeration23 = java2.util2.Collections.enumeration((java2.util2.Collection)set21);
    java2.util2.ArrayList arrayList24 = java2.util2.Collections.list(enumeration23);
    java2.util2.Collections.fill((java2.util2.List)arrayList19, (java.lang.Object)arrayList24);
    boolean b26 = java2.util2.Collections.replaceAll(list10, (java.lang.Object)(-2), (java.lang.Object)arrayList19);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap((java2.util2.List)arrayList19, 10, 1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);

  }

  @Test
  public void test101() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test101"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java.lang.Object obj5 = treeSet4.first();
    java2.util2.Set set7 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set7);
    java2.util2.Enumeration enumeration9 = java2.util2.Collections.enumeration((java2.util2.Collection)set7);
    java2.util2.ArrayList arrayList10 = java2.util2.Collections.list(enumeration9);
    java2.util2.List list11 = java2.util2.Collections.singletonList((java.lang.Object)enumeration9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b12 = treeSet4.remove((java.lang.Object)list11);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);

  }

  @Test
  public void test102() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test102"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java.lang.Object obj5 = treeSet4.first();
    java2.util2.Comparator comparator6 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj7 = java2.util2.Collections.min((java2.util2.Collection)treeSet4, comparator6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj8 = java2.util2.Collections.min((java2.util2.Collection)treeSet4);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj7);

  }

  @Test
  public void test103() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test103"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java.lang.Object obj5 = treeSet4.first();
    boolean b6 = treeSet4.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);

  }

  @Test
  public void test104() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test104"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java.lang.Object obj5 = treeSet4.first();
    java2.util2.Comparator comparator6 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj7 = java2.util2.Collections.min((java2.util2.Collection)treeSet4, comparator6);
    java.lang.String str8 = treeSet4.toString();
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b10 = treeSet4.remove((java.lang.Object)treeSet9);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[[1.0]]"+ "'", str8.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[]");

  }

  @Test
  public void test105() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test105"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet();
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection4 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set3);
    boolean b5 = treeSet1.removeAll(collection4);
    java2.util2.Comparator comparator6 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj7 = java2.util2.Collections.max(collection4, comparator6);
    boolean b8 = treeSet0.containsAll(collection4);
    java2.util2.Comparator comparator9 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj10 = java2.util2.Collections.min((java2.util2.Collection)treeSet0, comparator9);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 10L+ "'", obj7.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator9);

  }

  @Test
  public void test106() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test106"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set2);
    boolean b4 = treeSet0.removeAll(collection3);
    java2.util2.Comparator comparator5 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj6 = java2.util2.Collections.max(collection3, comparator5);
    java2.util2.Comparator comparator7 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj8 = java2.util2.Collections.max(collection3, comparator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10L+ "'", obj6.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 10L+ "'", obj8.equals(10L));

  }

  @Test
  public void test107() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test107"); }


    java2.util2.Map map2 = java2.util2.Collections.singletonMap((java.lang.Object)(byte)1, (java.lang.Object)'4');
    java2.util2.Map map3 = java2.util2.Collections.unmodifiableMap(map2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map3);

  }

  @Test
  public void test108() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test108"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    java2.util2.Set set1 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);

  }

  @Test
  public void test109() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test109"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java2.util2.Set set5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet3);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet3);
    treeSet3.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);

  }

  @Test
  public void test110() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test110"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    boolean b2 = treeSet0.add((java.lang.Object)1L);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet();
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet();
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    boolean b8 = treeSet4.removeAll(collection7);
    java2.util2.Comparator comparator9 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj10 = java2.util2.Collections.max(collection7, comparator9);
    boolean b11 = treeSet3.containsAll(collection7);
    boolean b12 = treeSet0.removeAll(collection7);
    java2.util2.Collection collection13 = java2.util2.Collections.unmodifiableCollection(collection7);
    java.lang.Object obj14 = java2.util2.Collections.max(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 10L+ "'", obj10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + 10L+ "'", obj14.equals(10L));

  }

  @Test
  public void test111() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test111"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    boolean b2 = treeSet0.add((java.lang.Object)1L);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet();
    java.lang.Object[] obj_array4 = treeSet3.toArray();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b5 = treeSet0.remove((java.lang.Object)obj_array4);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array4);

  }

  @Test
  public void test112() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test112"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java.lang.Object obj5 = treeSet4.first();
    java2.util2.Comparator comparator6 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj7 = java2.util2.Collections.min((java2.util2.Collection)treeSet4, comparator6);
    boolean b8 = treeSet4.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test113() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test113"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set2);
    java2.util2.Comparator comparator4 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj5 = java2.util2.Collections.max(collection3, comparator4);
    boolean b6 = treeSet0.containsAll(collection3);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection(collection3);
    java2.util2.Collection collection8 = java2.util2.Collections.unmodifiableCollection(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 10L+ "'", obj5.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);

  }

  @Test
  public void test114() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test114"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    int i5 = treeSet3.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);

  }

  @Test
  public void test115() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test115"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java2.util2.Set set5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet3);
    treeSet3.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set5);

  }

  @Test
  public void test116() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test116"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.List list5 = java2.util2.Collections.singletonList((java.lang.Object)enumeration3);
    java2.util2.List list6 = java2.util2.Collections.unmodifiableList(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap(list5, 100, 1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);

  }

  @Test
  public void test117() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test117"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Set set11 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set11);
    java2.util2.Enumeration enumeration13 = java2.util2.Collections.enumeration((java2.util2.Collection)set11);
    java2.util2.ArrayList arrayList14 = java2.util2.Collections.list(enumeration13);
    java2.util2.List list15 = java2.util2.Collections.singletonList((java.lang.Object)enumeration13);
    java2.util2.List list16 = java2.util2.Collections.unmodifiableList(list15);
    java2.util2.Collections.copy((java2.util2.List)arrayList9, list15);
    boolean b18 = arrayList4.containsAll((java2.util2.Collection)arrayList9);
    java2.util2.Collections.reverse((java2.util2.List)arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);

  }

  @Test
  public void test118() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test118"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Collections.fill((java2.util2.List)arrayList4, (java.lang.Object)arrayList9);
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set12);
    java2.util2.Enumeration enumeration14 = java2.util2.Collections.enumeration((java2.util2.Collection)set12);
    java2.util2.ArrayList arrayList15 = java2.util2.Collections.list(enumeration14);
    java2.util2.List list16 = java2.util2.Collections.singletonList((java.lang.Object)enumeration14);
    java2.util2.List list17 = java2.util2.Collections.unmodifiableList(list16);
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set19);
    java2.util2.Enumeration enumeration21 = java2.util2.Collections.enumeration((java2.util2.Collection)set19);
    java2.util2.ArrayList arrayList22 = java2.util2.Collections.list(enumeration21);
    java2.util2.List list23 = java2.util2.Collections.singletonList((java.lang.Object)enumeration21);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list23);
    int i25 = java2.util2.Collections.indexOfSubList(list17, list23);
    java2.util2.Collections.fill((java2.util2.List)arrayList9, (java.lang.Object)list23);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap(list23, 1, (-2));
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-1));

  }

  @Test
  public void test119() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test119"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    boolean b2 = treeSet0.add((java.lang.Object)1L);
    java2.util2.SortedSet sortedSet3 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet3);

  }

  @Test
  public void test120() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test120"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.List list5 = java2.util2.Collections.singletonList((java.lang.Object)enumeration3);
    java2.util2.List list6 = java2.util2.Collections.unmodifiableList(list5);
    java2.util2.Collections.rotate(list6, 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);

  }

  @Test
  public void test121() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test121"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.List list10 = java2.util2.Collections.singletonList((java.lang.Object)enumeration8);
    boolean b11 = arrayList4.retainAll((java2.util2.Collection)list10);
    java2.util2.Comparator comparator13 = java2.util2.Collections.reverseOrder();
    int i14 = java2.util2.Collections.binarySearch((java2.util2.List)arrayList4, (java.lang.Object)10.0d, comparator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test122() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test122"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Collections.fill((java2.util2.List)arrayList4, (java.lang.Object)arrayList9);
    java2.util2.Collections.sort((java2.util2.List)arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);

  }

  @Test
  public void test123() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test123"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set7 = java2.util2.Collections.singleton((java.lang.Object)set6);
    java2.util2.TreeSet treeSet8 = new java2.util2.TreeSet((java2.util2.Collection)set7);
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet8);
    java2.util2.Set set10 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet8);
    java2.util2.SortedSet sortedSet12 = treeSet8.tailSet((java.lang.Object)0.0d);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b13 = treeSet3.removeAll((java2.util2.Collection)treeSet8);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet8.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet12);

  }

  @Test
  public void test124() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test124"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Collections.fill((java2.util2.List)arrayList4, (java.lang.Object)arrayList9);
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set12);
    java2.util2.Enumeration enumeration14 = java2.util2.Collections.enumeration((java2.util2.Collection)set12);
    java2.util2.ArrayList arrayList15 = java2.util2.Collections.list(enumeration14);
    java2.util2.List list16 = java2.util2.Collections.singletonList((java.lang.Object)enumeration14);
    java2.util2.List list17 = java2.util2.Collections.unmodifiableList(list16);
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set19);
    java2.util2.Enumeration enumeration21 = java2.util2.Collections.enumeration((java2.util2.Collection)set19);
    java2.util2.ArrayList arrayList22 = java2.util2.Collections.list(enumeration21);
    java2.util2.List list23 = java2.util2.Collections.singletonList((java.lang.Object)enumeration21);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list23);
    int i25 = java2.util2.Collections.indexOfSubList(list17, list23);
    java2.util2.Collections.fill((java2.util2.List)arrayList9, (java.lang.Object)list23);
    java2.util2.TreeSet treeSet27 = new java2.util2.TreeSet();
    java2.util2.Set set29 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection30 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set29);
    java2.util2.Comparator comparator31 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj32 = java2.util2.Collections.max(collection30, comparator31);
    boolean b33 = treeSet27.containsAll(collection30);
    java2.util2.Collection collection34 = java2.util2.Collections.synchronizedCollection(collection30);
    boolean b35 = arrayList9.retainAll(collection30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet27.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet27.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + 10L+ "'", obj32.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);

  }

  @Test
  public void test125() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test125"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Collections.fill((java2.util2.List)arrayList4, (java.lang.Object)arrayList9);
    java2.util2.Comparator comparator11 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort((java2.util2.List)arrayList4, comparator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator11);

  }

  @Test
  public void test126() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test126"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java.lang.Object obj5 = treeSet4.first();
    java2.util2.Comparator comparator6 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj7 = java2.util2.Collections.min((java2.util2.Collection)treeSet4, comparator6);
    treeSet4.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj7);

  }

  @Test
  public void test127() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test127"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java2.util2.Iterator iterator5 = treeSet4.iterator();
    java2.util2.Set set7 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet8 = treeSet4.tailSet((java.lang.Object)set7);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set7);

  }

  @Test
  public void test128() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test128"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java2.util2.Set set5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet3);
    java2.util2.List list6 = java2.util2.Collections.singletonList((java.lang.Object)treeSet3);
    java2.util2.Set set9 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set9);
    java2.util2.Enumeration enumeration11 = java2.util2.Collections.enumeration((java2.util2.Collection)set9);
    java2.util2.ArrayList arrayList12 = java2.util2.Collections.list(enumeration11);
    java2.util2.Set set14 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection15 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set14);
    java2.util2.Enumeration enumeration16 = java2.util2.Collections.enumeration((java2.util2.Collection)set14);
    java2.util2.ArrayList arrayList17 = java2.util2.Collections.list(enumeration16);
    java2.util2.Collections.fill((java2.util2.List)arrayList12, (java.lang.Object)arrayList17);
    java2.util2.Set set20 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection21 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set20);
    java2.util2.Enumeration enumeration22 = java2.util2.Collections.enumeration((java2.util2.Collection)set20);
    java2.util2.ArrayList arrayList23 = java2.util2.Collections.list(enumeration22);
    java2.util2.List list24 = java2.util2.Collections.singletonList((java.lang.Object)enumeration22);
    java2.util2.List list25 = java2.util2.Collections.unmodifiableList(list24);
    java2.util2.Set set27 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection28 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set27);
    java2.util2.Enumeration enumeration29 = java2.util2.Collections.enumeration((java2.util2.Collection)set27);
    java2.util2.ArrayList arrayList30 = java2.util2.Collections.list(enumeration29);
    java2.util2.List list31 = java2.util2.Collections.singletonList((java.lang.Object)enumeration29);
    java2.util2.List list32 = java2.util2.Collections.unmodifiableList(list31);
    int i33 = java2.util2.Collections.indexOfSubList(list25, list31);
    java2.util2.Collections.fill((java2.util2.List)arrayList17, (java.lang.Object)list31);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet35 = treeSet3.subSet((java.lang.Object)(byte)1, (java.lang.Object)arrayList17);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == (-1));

  }

  @Test
  public void test129() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test129"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Collections.fill((java2.util2.List)arrayList4, (java.lang.Object)arrayList9);
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set12);
    java2.util2.Enumeration enumeration14 = java2.util2.Collections.enumeration((java2.util2.Collection)set12);
    java2.util2.ArrayList arrayList15 = java2.util2.Collections.list(enumeration14);
    java2.util2.List list16 = java2.util2.Collections.singletonList((java.lang.Object)enumeration14);
    java2.util2.List list17 = java2.util2.Collections.unmodifiableList(list16);
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set19);
    java2.util2.Enumeration enumeration21 = java2.util2.Collections.enumeration((java2.util2.Collection)set19);
    java2.util2.ArrayList arrayList22 = java2.util2.Collections.list(enumeration21);
    java2.util2.List list23 = java2.util2.Collections.singletonList((java.lang.Object)enumeration21);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list23);
    int i25 = java2.util2.Collections.indexOfSubList(list17, list23);
    java2.util2.Collections.fill((java2.util2.List)arrayList9, (java.lang.Object)list23);
    java2.util2.Collections.shuffle(list23);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int i29 = java2.util2.Collections.binarySearch(list23, (java.lang.Object)100.0f);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-1));

  }

  @Test
  public void test130() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test130"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.List list10 = java2.util2.Collections.singletonList((java.lang.Object)enumeration8);
    boolean b11 = arrayList4.retainAll((java2.util2.Collection)list10);
    java2.util2.Collections.rotate(list10, 100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.fill(list10, (java.lang.Object)false);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);

  }

  @Test
  public void test131() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test131"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java.lang.Object obj5 = treeSet4.first();
    java2.util2.SortedSet sortedSet7 = treeSet4.tailSet((java.lang.Object)(short)1);
    java2.util2.TreeSet treeSet8 = new java2.util2.TreeSet();
    java2.util2.Set set10 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection11 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set10);
    boolean b12 = treeSet8.removeAll(collection11);
    boolean b13 = treeSet4.containsAll((java2.util2.Collection)treeSet8);
    java2.util2.Set set15 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection16 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set15);
    java2.util2.Enumeration enumeration17 = java2.util2.Collections.enumeration((java2.util2.Collection)set15);
    java2.util2.ArrayList arrayList18 = java2.util2.Collections.list(enumeration17);
    java2.util2.List list19 = java2.util2.Collections.singletonList((java.lang.Object)enumeration17);
    java2.util2.List list20 = java2.util2.Collections.unmodifiableList(list19);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet21 = treeSet4.headSet((java.lang.Object)list20);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet8.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);

  }

  @Test
  public void test132() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test132"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.List list10 = java2.util2.Collections.singletonList((java.lang.Object)enumeration8);
    boolean b11 = arrayList4.retainAll((java2.util2.Collection)list10);
    java2.util2.Set set13 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set14 = java2.util2.Collections.singleton((java.lang.Object)set13);
    java2.util2.Enumeration enumeration15 = java2.util2.Collections.enumeration((java2.util2.Collection)set13);
    int i16 = java2.util2.Collections.binarySearch((java2.util2.List)arrayList4, (java.lang.Object)set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));

  }

  @Test
  public void test133() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test133"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Collections.fill((java2.util2.List)arrayList4, (java.lang.Object)arrayList9);
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set12);
    java2.util2.Enumeration enumeration14 = java2.util2.Collections.enumeration((java2.util2.Collection)set12);
    java2.util2.ArrayList arrayList15 = java2.util2.Collections.list(enumeration14);
    java2.util2.List list16 = java2.util2.Collections.singletonList((java.lang.Object)enumeration14);
    java2.util2.List list17 = java2.util2.Collections.unmodifiableList(list16);
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set19);
    java2.util2.Enumeration enumeration21 = java2.util2.Collections.enumeration((java2.util2.Collection)set19);
    java2.util2.ArrayList arrayList22 = java2.util2.Collections.list(enumeration21);
    java2.util2.List list23 = java2.util2.Collections.singletonList((java.lang.Object)enumeration21);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list23);
    int i25 = java2.util2.Collections.indexOfSubList(list17, list23);
    java2.util2.Collections.fill((java2.util2.List)arrayList9, (java.lang.Object)list23);
    java2.util2.Collections.sort((java2.util2.List)arrayList9);
    java2.util2.Set set29 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection30 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set29);
    java2.util2.Enumeration enumeration31 = java2.util2.Collections.enumeration((java2.util2.Collection)set29);
    java2.util2.ArrayList arrayList32 = java2.util2.Collections.list(enumeration31);
    java2.util2.Set set34 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection35 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set34);
    java2.util2.Enumeration enumeration36 = java2.util2.Collections.enumeration((java2.util2.Collection)set34);
    java2.util2.ArrayList arrayList37 = java2.util2.Collections.list(enumeration36);
    java2.util2.Set set39 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection40 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set39);
    java2.util2.Enumeration enumeration41 = java2.util2.Collections.enumeration((java2.util2.Collection)set39);
    java2.util2.ArrayList arrayList42 = java2.util2.Collections.list(enumeration41);
    java2.util2.List list43 = java2.util2.Collections.singletonList((java.lang.Object)enumeration41);
    java2.util2.List list44 = java2.util2.Collections.unmodifiableList(list43);
    java2.util2.Collections.copy((java2.util2.List)arrayList37, list43);
    boolean b46 = arrayList32.containsAll((java2.util2.Collection)arrayList37);
    java2.util2.TreeSet treeSet47 = new java2.util2.TreeSet();
    java2.util2.Set set50 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set51 = java2.util2.Collections.singleton((java.lang.Object)set50);
    java2.util2.Enumeration enumeration52 = java2.util2.Collections.enumeration((java2.util2.Collection)set50);
    java2.util2.Map map53 = java2.util2.Collections.singletonMap((java.lang.Object)10.0f, (java.lang.Object)enumeration52);
    boolean b54 = java2.util2.Collections.replaceAll((java2.util2.List)arrayList37, (java.lang.Object)treeSet47, (java.lang.Object)map53);
    boolean b55 = arrayList9.retainAll((java2.util2.Collection)treeSet47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet47.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet47.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet47.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);

  }

  @Test
  public void test134() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test134"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java2.util2.Set set5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet3);
    java2.util2.List list6 = java2.util2.Collections.singletonList((java.lang.Object)treeSet3);
    treeSet3.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);

  }

  @Test
  public void test135() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test135"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.ArrayList arrayList5 = java2.util2.Collections.list(enumeration3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj6 = java2.util2.Collections.max((java2.util2.Collection)arrayList5);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList5);

  }

  @Test
  public void test136() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test136"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java2.util2.Iterator iterator5 = treeSet4.iterator();
    treeSet4.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);

  }

  @Test
  public void test137() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test137"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Collections.fill((java2.util2.List)arrayList4, (java.lang.Object)arrayList9);
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set12);
    java2.util2.Enumeration enumeration14 = java2.util2.Collections.enumeration((java2.util2.Collection)set12);
    java2.util2.ArrayList arrayList15 = java2.util2.Collections.list(enumeration14);
    java2.util2.List list16 = java2.util2.Collections.singletonList((java.lang.Object)enumeration14);
    java2.util2.List list17 = java2.util2.Collections.unmodifiableList(list16);
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set19);
    java2.util2.Enumeration enumeration21 = java2.util2.Collections.enumeration((java2.util2.Collection)set19);
    java2.util2.ArrayList arrayList22 = java2.util2.Collections.list(enumeration21);
    java2.util2.List list23 = java2.util2.Collections.singletonList((java.lang.Object)enumeration21);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list23);
    int i25 = java2.util2.Collections.indexOfSubList(list17, list23);
    java2.util2.Collections.fill((java2.util2.List)arrayList9, (java.lang.Object)list23);
    java2.util2.TreeSet treeSet27 = new java2.util2.TreeSet();
    java2.util2.Set set29 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection30 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set29);
    java2.util2.Comparator comparator31 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj32 = java2.util2.Collections.max(collection30, comparator31);
    java.lang.Object[] obj_array33 = new java.lang.Object[] { comparator31};
    java.lang.Object[] obj_array34 = treeSet27.toArray(obj_array33);
    java.lang.Object[] obj_array35 = arrayList9.toArray(obj_array33);
    java2.util2.TreeSet treeSet36 = new java2.util2.TreeSet((java2.util2.Collection)arrayList9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap((java2.util2.List)arrayList9, 100, 100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet27.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet27.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + 10L+ "'", obj32.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet36.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet36.size() == 1);

  }

  @Test
  public void test138() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test138"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Comparator comparator3 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj4 = java2.util2.Collections.max(collection2, comparator3);
    java2.util2.Set set5 = java2.util2.Collections.singleton(obj4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10L+ "'", obj4.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set5);

  }

  @Test
  public void test139() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test139"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Collections.fill((java2.util2.List)arrayList4, (java.lang.Object)arrayList9);
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set12);
    java2.util2.Enumeration enumeration14 = java2.util2.Collections.enumeration((java2.util2.Collection)set12);
    java2.util2.ArrayList arrayList15 = java2.util2.Collections.list(enumeration14);
    java2.util2.List list16 = java2.util2.Collections.singletonList((java.lang.Object)enumeration14);
    java2.util2.List list17 = java2.util2.Collections.unmodifiableList(list16);
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set19);
    java2.util2.Enumeration enumeration21 = java2.util2.Collections.enumeration((java2.util2.Collection)set19);
    java2.util2.ArrayList arrayList22 = java2.util2.Collections.list(enumeration21);
    java2.util2.List list23 = java2.util2.Collections.singletonList((java.lang.Object)enumeration21);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list23);
    int i25 = java2.util2.Collections.indexOfSubList(list17, list23);
    java2.util2.Collections.fill((java2.util2.List)arrayList9, (java.lang.Object)list23);
    java2.util2.Collections.rotate((java2.util2.List)arrayList9, 0);
    java2.util2.Set set30 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection31 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set30);
    java2.util2.Enumeration enumeration32 = java2.util2.Collections.enumeration((java2.util2.Collection)set30);
    java2.util2.ArrayList arrayList33 = java2.util2.Collections.list(enumeration32);
    java2.util2.Set set35 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection36 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set35);
    java2.util2.Enumeration enumeration37 = java2.util2.Collections.enumeration((java2.util2.Collection)set35);
    java2.util2.ArrayList arrayList38 = java2.util2.Collections.list(enumeration37);
    java2.util2.Collections.fill((java2.util2.List)arrayList33, (java.lang.Object)arrayList38);
    java2.util2.Set set41 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection42 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set41);
    java2.util2.Enumeration enumeration43 = java2.util2.Collections.enumeration((java2.util2.Collection)set41);
    java2.util2.ArrayList arrayList44 = java2.util2.Collections.list(enumeration43);
    java2.util2.List list45 = java2.util2.Collections.singletonList((java.lang.Object)enumeration43);
    java2.util2.List list46 = java2.util2.Collections.unmodifiableList(list45);
    java2.util2.Set set48 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection49 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set48);
    java2.util2.Enumeration enumeration50 = java2.util2.Collections.enumeration((java2.util2.Collection)set48);
    java2.util2.ArrayList arrayList51 = java2.util2.Collections.list(enumeration50);
    java2.util2.List list52 = java2.util2.Collections.singletonList((java.lang.Object)enumeration50);
    java2.util2.List list53 = java2.util2.Collections.unmodifiableList(list52);
    int i54 = java2.util2.Collections.indexOfSubList(list46, list52);
    java2.util2.Collections.fill((java2.util2.List)arrayList38, (java.lang.Object)list52);
    java2.util2.Collections.rotate((java2.util2.List)arrayList38, 0);
    java2.util2.Set set60 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection61 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set60);
    java2.util2.Enumeration enumeration62 = java2.util2.Collections.enumeration((java2.util2.Collection)set60);
    java2.util2.ArrayList arrayList63 = java2.util2.Collections.list(enumeration62);
    java2.util2.Set set65 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection66 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set65);
    java2.util2.Enumeration enumeration67 = java2.util2.Collections.enumeration((java2.util2.Collection)set65);
    java2.util2.ArrayList arrayList68 = java2.util2.Collections.list(enumeration67);
    java2.util2.List list69 = java2.util2.Collections.singletonList((java.lang.Object)enumeration67);
    java2.util2.List list70 = java2.util2.Collections.unmodifiableList(list69);
    java2.util2.Collections.copy((java2.util2.List)arrayList63, list69);
    boolean b72 = java2.util2.Collections.replaceAll((java2.util2.List)arrayList38, (java.lang.Object)(byte)10, (java.lang.Object)list69);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int i73 = java2.util2.Collections.binarySearch((java2.util2.List)arrayList9, (java.lang.Object)b72);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);

  }

  @Test
  public void test140() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test140"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Set set11 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set11);
    java2.util2.Enumeration enumeration13 = java2.util2.Collections.enumeration((java2.util2.Collection)set11);
    java2.util2.ArrayList arrayList14 = java2.util2.Collections.list(enumeration13);
    java2.util2.List list15 = java2.util2.Collections.singletonList((java.lang.Object)enumeration13);
    java2.util2.List list16 = java2.util2.Collections.unmodifiableList(list15);
    java2.util2.Collections.copy((java2.util2.List)arrayList9, list15);
    boolean b18 = arrayList4.containsAll((java2.util2.Collection)arrayList9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap((java2.util2.List)arrayList4, (-2), 0);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);

  }

  @Test
  public void test141() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test141"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Set set11 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set11);
    java2.util2.Enumeration enumeration13 = java2.util2.Collections.enumeration((java2.util2.Collection)set11);
    java2.util2.ArrayList arrayList14 = java2.util2.Collections.list(enumeration13);
    java2.util2.List list15 = java2.util2.Collections.singletonList((java.lang.Object)enumeration13);
    java2.util2.List list16 = java2.util2.Collections.unmodifiableList(list15);
    java2.util2.Collections.copy((java2.util2.List)arrayList9, list15);
    boolean b18 = arrayList4.containsAll((java2.util2.Collection)arrayList9);
    java2.util2.Collections.sort((java2.util2.List)arrayList9);
    java2.util2.Set set21 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection22 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set21);
    java2.util2.Enumeration enumeration23 = java2.util2.Collections.enumeration((java2.util2.Collection)set21);
    java2.util2.ArrayList arrayList24 = java2.util2.Collections.list(enumeration23);
    java2.util2.ArrayList arrayList25 = java2.util2.Collections.list(enumeration23);
    int i26 = java2.util2.Collections.lastIndexOfSubList((java2.util2.List)arrayList9, (java2.util2.List)arrayList25);
    java2.util2.List list27 = java2.util2.Collections.synchronizedList((java2.util2.List)arrayList25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);

  }

  @Test
  public void test142() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test142"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java2.util2.Set set5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet3);
    java2.util2.List list6 = java2.util2.Collections.singletonList((java.lang.Object)treeSet3);
    java2.util2.Comparator comparator7 = treeSet3.comparator();
    java2.util2.Set set9 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set9);
    java2.util2.Enumeration enumeration11 = java2.util2.Collections.enumeration((java2.util2.Collection)set9);
    java2.util2.ArrayList arrayList12 = java2.util2.Collections.list(enumeration11);
    java2.util2.Set set14 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection15 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set14);
    java2.util2.Enumeration enumeration16 = java2.util2.Collections.enumeration((java2.util2.Collection)set14);
    java2.util2.ArrayList arrayList17 = java2.util2.Collections.list(enumeration16);
    java2.util2.List list18 = java2.util2.Collections.singletonList((java.lang.Object)enumeration16);
    java2.util2.List list19 = java2.util2.Collections.unmodifiableList(list18);
    java2.util2.Collections.copy((java2.util2.List)arrayList12, list18);
    java2.util2.Set set22 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection23 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set22);
    java2.util2.Enumeration enumeration24 = java2.util2.Collections.enumeration((java2.util2.Collection)set22);
    java2.util2.ArrayList arrayList25 = java2.util2.Collections.list(enumeration24);
    java2.util2.Set set27 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection28 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set27);
    java2.util2.Enumeration enumeration29 = java2.util2.Collections.enumeration((java2.util2.Collection)set27);
    java2.util2.ArrayList arrayList30 = java2.util2.Collections.list(enumeration29);
    java2.util2.Set set32 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection33 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set32);
    java2.util2.Enumeration enumeration34 = java2.util2.Collections.enumeration((java2.util2.Collection)set32);
    java2.util2.ArrayList arrayList35 = java2.util2.Collections.list(enumeration34);
    java2.util2.List list36 = java2.util2.Collections.singletonList((java.lang.Object)enumeration34);
    java2.util2.List list37 = java2.util2.Collections.unmodifiableList(list36);
    java2.util2.Collections.copy((java2.util2.List)arrayList30, list36);
    boolean b39 = arrayList25.containsAll((java2.util2.Collection)arrayList30);
    java2.util2.TreeSet treeSet40 = new java2.util2.TreeSet();
    java2.util2.Set set43 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set44 = java2.util2.Collections.singleton((java.lang.Object)set43);
    java2.util2.Enumeration enumeration45 = java2.util2.Collections.enumeration((java2.util2.Collection)set43);
    java2.util2.Map map46 = java2.util2.Collections.singletonMap((java.lang.Object)10.0f, (java.lang.Object)enumeration45);
    boolean b47 = java2.util2.Collections.replaceAll((java2.util2.List)arrayList30, (java.lang.Object)treeSet40, (java.lang.Object)map46);
    java2.util2.Set set49 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection50 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set49);
    java2.util2.Enumeration enumeration51 = java2.util2.Collections.enumeration((java2.util2.Collection)set49);
    java2.util2.ArrayList arrayList52 = java2.util2.Collections.list(enumeration51);
    java2.util2.ArrayList arrayList53 = java2.util2.Collections.list(enumeration51);
    boolean b54 = java2.util2.Collections.replaceAll(list18, (java.lang.Object)b47, (java.lang.Object)enumeration51);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet55 = treeSet3.headSet((java.lang.Object)list18);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet40.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet40.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet40.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);

  }

  @Test
  public void test143() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test143"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.List list10 = java2.util2.Collections.singletonList((java.lang.Object)enumeration8);
    boolean b11 = arrayList4.retainAll((java2.util2.Collection)list10);
    java2.util2.Collections.rotate(list10, 100);
    java2.util2.Set set16 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection17 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set16);
    java2.util2.Enumeration enumeration18 = java2.util2.Collections.enumeration((java2.util2.Collection)set16);
    java2.util2.ArrayList arrayList19 = java2.util2.Collections.list(enumeration18);
    java2.util2.Set set21 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection22 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set21);
    java2.util2.Enumeration enumeration23 = java2.util2.Collections.enumeration((java2.util2.Collection)set21);
    java2.util2.ArrayList arrayList24 = java2.util2.Collections.list(enumeration23);
    java2.util2.Collections.fill((java2.util2.List)arrayList19, (java.lang.Object)arrayList24);
    boolean b26 = java2.util2.Collections.replaceAll(list10, (java.lang.Object)(-2), (java.lang.Object)arrayList19);
    java2.util2.List list27 = java2.util2.Collections.singletonList((java.lang.Object)(-2));
    java2.util2.Set set29 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set30 = java2.util2.Collections.singleton((java.lang.Object)set29);
    java2.util2.TreeSet treeSet31 = new java2.util2.TreeSet((java2.util2.Collection)set30);
    java.lang.Object obj32 = treeSet31.clone();
    java2.util2.Set set34 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection35 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set34);
    java2.util2.Enumeration enumeration36 = java2.util2.Collections.enumeration((java2.util2.Collection)set34);
    java2.util2.ArrayList arrayList37 = java2.util2.Collections.list(enumeration36);
    java2.util2.List list38 = java2.util2.Collections.singletonList((java.lang.Object)enumeration36);
    java2.util2.Collections.reverse(list38);
    boolean b40 = treeSet31.retainAll((java2.util2.Collection)list38);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.copy(list27, list38);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet31.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet31.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet31.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);

  }

  @Test
  public void test144() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test144"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java2.util2.SortedSet sortedSet5 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet3);
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet();
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet();
    java2.util2.Set set9 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set9);
    boolean b11 = treeSet7.removeAll(collection10);
    java2.util2.Comparator comparator12 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj13 = java2.util2.Collections.max(collection10, comparator12);
    boolean b14 = treeSet6.containsAll(collection10);
    boolean b15 = treeSet3.removeAll((java2.util2.Collection)treeSet6);
    java2.util2.Set set16 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 10L+ "'", obj13.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);

  }

  @Test
  public void test145() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test145"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java.lang.Object obj5 = treeSet4.first();
    java2.util2.SortedSet sortedSet7 = treeSet4.tailSet((java.lang.Object)(short)1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.TreeSet treeSet8 = new java2.util2.TreeSet(sortedSet7);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);

  }

  @Test
  public void test146() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test146"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java.lang.Object obj5 = treeSet4.first();
    java2.util2.Comparator comparator6 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj7 = java2.util2.Collections.min((java2.util2.Collection)treeSet4, comparator6);
    java2.util2.Set set8 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet4);
    java.lang.Object obj9 = treeSet4.last();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj9);

  }

  @Test
  public void test147() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test147"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java.lang.Object obj5 = treeSet4.first();
    java2.util2.Comparator comparator6 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj7 = java2.util2.Collections.min((java2.util2.Collection)treeSet4, comparator6);
    java.lang.String str8 = treeSet4.toString();
    java2.util2.Set set10 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection11 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set10);
    java2.util2.Enumeration enumeration12 = java2.util2.Collections.enumeration((java2.util2.Collection)set10);
    java2.util2.ArrayList arrayList13 = java2.util2.Collections.list(enumeration12);
    java2.util2.ArrayList arrayList14 = java2.util2.Collections.list(enumeration12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b15 = treeSet4.add((java.lang.Object)arrayList14);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[[1.0]]"+ "'", str8.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList14);

  }

  @Test
  public void test148() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test148"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Collections.fill((java2.util2.List)arrayList4, (java.lang.Object)arrayList9);
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set12);
    java2.util2.Enumeration enumeration14 = java2.util2.Collections.enumeration((java2.util2.Collection)set12);
    java2.util2.ArrayList arrayList15 = java2.util2.Collections.list(enumeration14);
    java2.util2.List list16 = java2.util2.Collections.singletonList((java.lang.Object)enumeration14);
    java2.util2.List list17 = java2.util2.Collections.unmodifiableList(list16);
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set19);
    java2.util2.Enumeration enumeration21 = java2.util2.Collections.enumeration((java2.util2.Collection)set19);
    java2.util2.ArrayList arrayList22 = java2.util2.Collections.list(enumeration21);
    java2.util2.List list23 = java2.util2.Collections.singletonList((java.lang.Object)enumeration21);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list23);
    int i25 = java2.util2.Collections.indexOfSubList(list17, list23);
    java2.util2.Collections.fill((java2.util2.List)arrayList9, (java.lang.Object)list23);
    java2.util2.Collections.rotate((java2.util2.List)arrayList9, 0);
    java2.util2.Set set30 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection31 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set30);
    java2.util2.Enumeration enumeration32 = java2.util2.Collections.enumeration((java2.util2.Collection)set30);
    java2.util2.ArrayList arrayList33 = java2.util2.Collections.list(enumeration32);
    java2.util2.Set set35 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection36 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set35);
    java2.util2.Enumeration enumeration37 = java2.util2.Collections.enumeration((java2.util2.Collection)set35);
    java2.util2.ArrayList arrayList38 = java2.util2.Collections.list(enumeration37);
    java2.util2.Set set40 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection41 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set40);
    java2.util2.Enumeration enumeration42 = java2.util2.Collections.enumeration((java2.util2.Collection)set40);
    java2.util2.ArrayList arrayList43 = java2.util2.Collections.list(enumeration42);
    java2.util2.List list44 = java2.util2.Collections.singletonList((java.lang.Object)enumeration42);
    java2.util2.List list45 = java2.util2.Collections.unmodifiableList(list44);
    java2.util2.Collections.copy((java2.util2.List)arrayList38, list44);
    boolean b47 = arrayList33.containsAll((java2.util2.Collection)arrayList38);
    java2.util2.Collections.sort((java2.util2.List)arrayList38);
    java2.util2.Set set50 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection51 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set50);
    java2.util2.Comparator comparator52 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj53 = java2.util2.Collections.max(collection51, comparator52);
    java.lang.Object obj54 = java2.util2.Collections.min(collection51);
    java2.util2.Enumeration enumeration55 = java2.util2.Collections.enumeration(collection51);
    boolean b56 = arrayList38.containsAll(collection51);
    boolean b57 = arrayList9.containsAll(collection51);
    java2.util2.Set set59 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set60 = java2.util2.Collections.singleton((java.lang.Object)set59);
    java2.util2.TreeSet treeSet61 = new java2.util2.TreeSet((java2.util2.Collection)set60);
    java2.util2.TreeSet treeSet62 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet61);
    java.lang.Object obj63 = treeSet62.first();
    java2.util2.Set set64 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet62);
    java2.util2.SortedSet sortedSet66 = treeSet62.headSet((java.lang.Object)(short)0);
    java2.util2.Comparator comparator67 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int i68 = java2.util2.Collections.binarySearch((java2.util2.List)arrayList9, (java.lang.Object)treeSet62, comparator67);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj53 + "' != '" + 10L+ "'", obj53.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj54 + "' != '" + 10L+ "'", obj54.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet61.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet61.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet61.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet62.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet62.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet62.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator67);

  }

  @Test
  public void test149() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test149"); }


    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)' ');
    java2.util2.List list3 = java2.util2.Collections.nCopies(100, (java.lang.Object)set2);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Collection collection8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)set6);
    java2.util2.Map map9 = java2.util2.Collections.singletonMap((java.lang.Object)(-1), (java.lang.Object)collection8);
    java2.util2.Map map10 = java2.util2.Collections.unmodifiableMap(map9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int i11 = java2.util2.Collections.binarySearch(list3, (java.lang.Object)map10);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map10);

  }

  @Test
  public void test150() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test150"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java.lang.Object obj4 = treeSet3.clone();
    java2.util2.Iterator iterator5 = treeSet3.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);

  }

  @Test
  public void test151() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test151"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java.lang.Object obj5 = treeSet3.clone();
    java2.util2.Set set7 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set7);
    java2.util2.Enumeration enumeration9 = java2.util2.Collections.enumeration((java2.util2.Collection)set7);
    java2.util2.ArrayList arrayList10 = java2.util2.Collections.list(enumeration9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b11 = treeSet3.remove((java.lang.Object)arrayList10);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList10);

  }

  @Test
  public void test152() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test152"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet4);
    java2.util2.Set set7 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set8 = java2.util2.Collections.singleton((java.lang.Object)set7);
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.Collection)set8);
    java2.util2.TreeSet treeSet10 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet9);
    java.lang.Object obj11 = treeSet9.clone();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b12 = treeSet4.contains(obj11);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet10.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj11);

  }

  @Test
  public void test153() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test153"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Collections.fill((java2.util2.List)arrayList4, (java.lang.Object)arrayList9);
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set12);
    java2.util2.Enumeration enumeration14 = java2.util2.Collections.enumeration((java2.util2.Collection)set12);
    java2.util2.ArrayList arrayList15 = java2.util2.Collections.list(enumeration14);
    java2.util2.Set set17 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection18 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set17);
    java2.util2.Enumeration enumeration19 = java2.util2.Collections.enumeration((java2.util2.Collection)set17);
    java2.util2.ArrayList arrayList20 = java2.util2.Collections.list(enumeration19);
    java2.util2.Collections.fill((java2.util2.List)arrayList15, (java.lang.Object)arrayList20);
    java2.util2.Set set23 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection24 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set23);
    java2.util2.Enumeration enumeration25 = java2.util2.Collections.enumeration((java2.util2.Collection)set23);
    java2.util2.ArrayList arrayList26 = java2.util2.Collections.list(enumeration25);
    java2.util2.List list27 = java2.util2.Collections.singletonList((java.lang.Object)enumeration25);
    java2.util2.List list28 = java2.util2.Collections.unmodifiableList(list27);
    java2.util2.Set set30 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection31 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set30);
    java2.util2.Enumeration enumeration32 = java2.util2.Collections.enumeration((java2.util2.Collection)set30);
    java2.util2.ArrayList arrayList33 = java2.util2.Collections.list(enumeration32);
    java2.util2.List list34 = java2.util2.Collections.singletonList((java.lang.Object)enumeration32);
    java2.util2.List list35 = java2.util2.Collections.unmodifiableList(list34);
    int i36 = java2.util2.Collections.indexOfSubList(list28, list34);
    java2.util2.Collections.fill((java2.util2.List)arrayList20, (java.lang.Object)list34);
    java2.util2.TreeSet treeSet38 = new java2.util2.TreeSet();
    java2.util2.Set set40 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection41 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set40);
    java2.util2.Comparator comparator42 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj43 = java2.util2.Collections.max(collection41, comparator42);
    java.lang.Object[] obj_array44 = new java.lang.Object[] { comparator42};
    java.lang.Object[] obj_array45 = treeSet38.toArray(obj_array44);
    java.lang.Object[] obj_array46 = arrayList20.toArray(obj_array44);
    java.lang.Object[] obj_array47 = arrayList9.toArray(obj_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet38.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet38.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet38.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj43 + "' != '" + 10L+ "'", obj43.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array47);

  }

  @Test
  public void test154() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test154"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java.lang.Object obj5 = treeSet4.first();
    java2.util2.Set set6 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet4);
    java2.util2.SortedSet sortedSet8 = treeSet4.headSet((java.lang.Object)(short)0);
    int i9 = treeSet4.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);

  }

  @Test
  public void test155() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test155"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java.lang.Object obj5 = treeSet4.first();
    java2.util2.SortedSet sortedSet7 = treeSet4.tailSet((java.lang.Object)(short)1);
    java2.util2.TreeSet treeSet8 = new java2.util2.TreeSet();
    java2.util2.Set set10 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection11 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set10);
    boolean b12 = treeSet8.removeAll(collection11);
    boolean b13 = treeSet4.containsAll((java2.util2.Collection)treeSet8);
    java2.util2.Set set15 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection16 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set15);
    java2.util2.Enumeration enumeration17 = java2.util2.Collections.enumeration((java2.util2.Collection)set15);
    java2.util2.ArrayList arrayList18 = java2.util2.Collections.list(enumeration17);
    java2.util2.Set set20 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection21 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set20);
    java2.util2.Enumeration enumeration22 = java2.util2.Collections.enumeration((java2.util2.Collection)set20);
    java2.util2.ArrayList arrayList23 = java2.util2.Collections.list(enumeration22);
    java2.util2.Collections.fill((java2.util2.List)arrayList18, (java.lang.Object)arrayList23);
    java2.util2.Set set26 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection27 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set26);
    java2.util2.Enumeration enumeration28 = java2.util2.Collections.enumeration((java2.util2.Collection)set26);
    java2.util2.ArrayList arrayList29 = java2.util2.Collections.list(enumeration28);
    java2.util2.List list30 = java2.util2.Collections.singletonList((java.lang.Object)enumeration28);
    java2.util2.List list31 = java2.util2.Collections.unmodifiableList(list30);
    java2.util2.Set set33 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection34 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set33);
    java2.util2.Enumeration enumeration35 = java2.util2.Collections.enumeration((java2.util2.Collection)set33);
    java2.util2.ArrayList arrayList36 = java2.util2.Collections.list(enumeration35);
    java2.util2.List list37 = java2.util2.Collections.singletonList((java.lang.Object)enumeration35);
    java2.util2.List list38 = java2.util2.Collections.unmodifiableList(list37);
    int i39 = java2.util2.Collections.indexOfSubList(list31, list37);
    java2.util2.Collections.fill((java2.util2.List)arrayList23, (java.lang.Object)list37);
    java2.util2.Collections.rotate((java2.util2.List)arrayList23, 0);
    java2.util2.Set set44 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection45 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set44);
    java2.util2.Enumeration enumeration46 = java2.util2.Collections.enumeration((java2.util2.Collection)set44);
    java2.util2.ArrayList arrayList47 = java2.util2.Collections.list(enumeration46);
    java2.util2.Set set49 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection50 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set49);
    java2.util2.Enumeration enumeration51 = java2.util2.Collections.enumeration((java2.util2.Collection)set49);
    java2.util2.ArrayList arrayList52 = java2.util2.Collections.list(enumeration51);
    java2.util2.Set set54 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection55 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set54);
    java2.util2.Enumeration enumeration56 = java2.util2.Collections.enumeration((java2.util2.Collection)set54);
    java2.util2.ArrayList arrayList57 = java2.util2.Collections.list(enumeration56);
    java2.util2.List list58 = java2.util2.Collections.singletonList((java.lang.Object)enumeration56);
    java2.util2.List list59 = java2.util2.Collections.unmodifiableList(list58);
    java2.util2.Collections.copy((java2.util2.List)arrayList52, list58);
    boolean b61 = arrayList47.containsAll((java2.util2.Collection)arrayList52);
    java2.util2.Collections.sort((java2.util2.List)arrayList52);
    java2.util2.Set set64 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection65 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set64);
    java2.util2.Comparator comparator66 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj67 = java2.util2.Collections.max(collection65, comparator66);
    java.lang.Object obj68 = java2.util2.Collections.min(collection65);
    java2.util2.Enumeration enumeration69 = java2.util2.Collections.enumeration(collection65);
    boolean b70 = arrayList52.containsAll(collection65);
    boolean b71 = arrayList23.containsAll(collection65);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet73 = treeSet4.subSet((java.lang.Object)arrayList23, (java.lang.Object)(byte)(-1));
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet8.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj67 + "' != '" + 10L+ "'", obj67.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj68 + "' != '" + 10L+ "'", obj68.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);

  }

  @Test
  public void test156() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test156"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.List list5 = java2.util2.Collections.singletonList((java.lang.Object)enumeration3);
    java2.util2.List list6 = java2.util2.Collections.unmodifiableList(list5);
    java2.util2.Set set8 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set8);
    java2.util2.Enumeration enumeration10 = java2.util2.Collections.enumeration((java2.util2.Collection)set8);
    java2.util2.ArrayList arrayList11 = java2.util2.Collections.list(enumeration10);
    java2.util2.Set set13 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection14 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set13);
    java2.util2.Enumeration enumeration15 = java2.util2.Collections.enumeration((java2.util2.Collection)set13);
    java2.util2.ArrayList arrayList16 = java2.util2.Collections.list(enumeration15);
    java2.util2.Collections.fill((java2.util2.List)arrayList11, (java.lang.Object)arrayList16);
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set19);
    java2.util2.Enumeration enumeration21 = java2.util2.Collections.enumeration((java2.util2.Collection)set19);
    java2.util2.ArrayList arrayList22 = java2.util2.Collections.list(enumeration21);
    java2.util2.List list23 = java2.util2.Collections.singletonList((java.lang.Object)enumeration21);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list23);
    java2.util2.Set set26 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection27 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set26);
    java2.util2.Enumeration enumeration28 = java2.util2.Collections.enumeration((java2.util2.Collection)set26);
    java2.util2.ArrayList arrayList29 = java2.util2.Collections.list(enumeration28);
    java2.util2.List list30 = java2.util2.Collections.singletonList((java.lang.Object)enumeration28);
    java2.util2.List list31 = java2.util2.Collections.unmodifiableList(list30);
    int i32 = java2.util2.Collections.indexOfSubList(list24, list30);
    java2.util2.Collections.fill((java2.util2.List)arrayList16, (java.lang.Object)list30);
    java2.util2.Collections.rotate((java2.util2.List)arrayList16, 0);
    java2.util2.Comparator comparator36 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort((java2.util2.List)arrayList16, comparator36);
    java2.util2.TreeSet treeSet38 = new java2.util2.TreeSet((java2.util2.Collection)arrayList16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int i39 = java2.util2.Collections.binarySearch(list5, (java.lang.Object)treeSet38);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet38.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet38.size() == 1);

  }

  @Test
  public void test157() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test157"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java2.util2.Set set5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet3);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet3);
    java2.util2.Set set8 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set8);
    java2.util2.Enumeration enumeration10 = java2.util2.Collections.enumeration((java2.util2.Collection)set8);
    java2.util2.ArrayList arrayList11 = java2.util2.Collections.list(enumeration10);
    java2.util2.Set set13 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection14 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set13);
    java2.util2.Enumeration enumeration15 = java2.util2.Collections.enumeration((java2.util2.Collection)set13);
    java2.util2.ArrayList arrayList16 = java2.util2.Collections.list(enumeration15);
    java2.util2.Collections.fill((java2.util2.List)arrayList11, (java.lang.Object)arrayList16);
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set19);
    java2.util2.Enumeration enumeration21 = java2.util2.Collections.enumeration((java2.util2.Collection)set19);
    java2.util2.ArrayList arrayList22 = java2.util2.Collections.list(enumeration21);
    java2.util2.List list23 = java2.util2.Collections.singletonList((java.lang.Object)enumeration21);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list23);
    java2.util2.Set set26 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection27 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set26);
    java2.util2.Enumeration enumeration28 = java2.util2.Collections.enumeration((java2.util2.Collection)set26);
    java2.util2.ArrayList arrayList29 = java2.util2.Collections.list(enumeration28);
    java2.util2.List list30 = java2.util2.Collections.singletonList((java.lang.Object)enumeration28);
    java2.util2.List list31 = java2.util2.Collections.unmodifiableList(list30);
    int i32 = java2.util2.Collections.indexOfSubList(list24, list30);
    java2.util2.Collections.fill((java2.util2.List)arrayList16, (java.lang.Object)list30);
    java2.util2.Comparator comparator34 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj35 = java2.util2.Collections.min((java2.util2.Collection)list30, comparator34);
    java.lang.Object obj36 = new java.lang.Object();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet37 = treeSet3.subSet((java.lang.Object)list30, obj36);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj35);

  }

  @Test
  public void test158() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test158"); }


    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set2);
    java2.util2.Enumeration enumeration4 = java2.util2.Collections.enumeration((java2.util2.Collection)set2);
    java2.util2.ArrayList arrayList5 = java2.util2.Collections.list(enumeration4);
    java2.util2.Set set7 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set7);
    java2.util2.Enumeration enumeration9 = java2.util2.Collections.enumeration((java2.util2.Collection)set7);
    java2.util2.ArrayList arrayList10 = java2.util2.Collections.list(enumeration9);
    java2.util2.Collections.fill((java2.util2.List)arrayList5, (java.lang.Object)arrayList10);
    java2.util2.Set set13 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection14 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set13);
    java2.util2.Enumeration enumeration15 = java2.util2.Collections.enumeration((java2.util2.Collection)set13);
    java2.util2.ArrayList arrayList16 = java2.util2.Collections.list(enumeration15);
    java2.util2.List list17 = java2.util2.Collections.singletonList((java.lang.Object)enumeration15);
    java2.util2.List list18 = java2.util2.Collections.unmodifiableList(list17);
    java2.util2.Set set20 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection21 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set20);
    java2.util2.Enumeration enumeration22 = java2.util2.Collections.enumeration((java2.util2.Collection)set20);
    java2.util2.ArrayList arrayList23 = java2.util2.Collections.list(enumeration22);
    java2.util2.List list24 = java2.util2.Collections.singletonList((java.lang.Object)enumeration22);
    java2.util2.List list25 = java2.util2.Collections.unmodifiableList(list24);
    int i26 = java2.util2.Collections.indexOfSubList(list18, list24);
    java2.util2.Collections.fill((java2.util2.List)arrayList10, (java.lang.Object)list24);
    java2.util2.TreeSet treeSet28 = new java2.util2.TreeSet();
    java2.util2.Set set30 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection31 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set30);
    java2.util2.Comparator comparator32 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj33 = java2.util2.Collections.max(collection31, comparator32);
    java.lang.Object[] obj_array34 = new java.lang.Object[] { comparator32};
    java.lang.Object[] obj_array35 = treeSet28.toArray(obj_array34);
    java.lang.Object[] obj_array36 = arrayList10.toArray(obj_array34);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.List list37 = java2.util2.Collections.nCopies((-2), (java.lang.Object)arrayList10);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet28.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet28.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet28.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + 10L+ "'", obj33.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array36);

  }

  @Test
  public void test159() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test159"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java2.util2.Set set5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet3);
    java2.util2.SortedSet sortedSet7 = treeSet3.tailSet((java.lang.Object)0.0d);
    java.lang.String str8 = treeSet3.toString();
    java2.util2.Set set10 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set11 = java2.util2.Collections.singleton((java.lang.Object)set10);
    java2.util2.TreeSet treeSet12 = new java2.util2.TreeSet((java2.util2.Collection)set11);
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet12);
    java2.util2.Set set14 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet12);
    java2.util2.List list15 = java2.util2.Collections.singletonList((java.lang.Object)treeSet12);
    java2.util2.Iterator iterator16 = treeSet12.iterator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet17 = treeSet3.headSet((java.lang.Object)iterator16);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[[1.0]]"+ "'", str8.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet12.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet12.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator16);

  }

  @Test
  public void test160() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test160"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.List list5 = java2.util2.Collections.singletonList((java.lang.Object)enumeration3);
    java2.util2.Collections.reverse(list5);
    java2.util2.Collections.rotate(list5, 10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(list5);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);

  }

  @Test
  public void test161() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test161"); }


    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set2);
    java2.util2.Enumeration enumeration4 = java2.util2.Collections.enumeration((java2.util2.Collection)set2);
    java2.util2.ArrayList arrayList5 = java2.util2.Collections.list(enumeration4);
    java2.util2.ArrayList arrayList6 = java2.util2.Collections.list(enumeration4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.List list7 = java2.util2.Collections.nCopies((-1), (java.lang.Object)enumeration4);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList6);

  }

  @Test
  public void test162() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test162"); }


    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set2);
    java2.util2.Enumeration enumeration4 = java2.util2.Collections.enumeration((java2.util2.Collection)set2);
    java2.util2.ArrayList arrayList5 = java2.util2.Collections.list(enumeration4);
    java2.util2.Set set7 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set7);
    java2.util2.Enumeration enumeration9 = java2.util2.Collections.enumeration((java2.util2.Collection)set7);
    java2.util2.ArrayList arrayList10 = java2.util2.Collections.list(enumeration9);
    java2.util2.List list11 = java2.util2.Collections.singletonList((java.lang.Object)enumeration9);
    boolean b12 = arrayList5.retainAll((java2.util2.Collection)list11);
    java2.util2.Collections.rotate(list11, 100);
    java2.util2.Set set17 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection18 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set17);
    java2.util2.Enumeration enumeration19 = java2.util2.Collections.enumeration((java2.util2.Collection)set17);
    java2.util2.ArrayList arrayList20 = java2.util2.Collections.list(enumeration19);
    java2.util2.Set set22 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection23 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set22);
    java2.util2.Enumeration enumeration24 = java2.util2.Collections.enumeration((java2.util2.Collection)set22);
    java2.util2.ArrayList arrayList25 = java2.util2.Collections.list(enumeration24);
    java2.util2.Collections.fill((java2.util2.List)arrayList20, (java.lang.Object)arrayList25);
    boolean b27 = java2.util2.Collections.replaceAll(list11, (java.lang.Object)(-2), (java.lang.Object)arrayList20);
    java2.util2.List list28 = java2.util2.Collections.singletonList((java.lang.Object)(-2));
    java2.util2.List list29 = java2.util2.Collections.nCopies(1, (java.lang.Object)list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);

  }

  @Test
  public void test163() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test163"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    boolean b2 = treeSet0.add((java.lang.Object)1L);
    java2.util2.Set set4 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set4);
    java2.util2.Enumeration enumeration6 = java2.util2.Collections.enumeration((java2.util2.Collection)set4);
    java2.util2.ArrayList arrayList7 = java2.util2.Collections.list(enumeration6);
    java2.util2.List list8 = java2.util2.Collections.singletonList((java.lang.Object)enumeration6);
    java2.util2.List list9 = java2.util2.Collections.singletonList((java.lang.Object)enumeration6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b10 = treeSet0.contains((java.lang.Object)list9);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);

  }

  @Test
  public void test164() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test164"); }


    java2.util2.Comparator comparator0 = java2.util2.Collections.reverseOrder();
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet4);
    java2.util2.Set set6 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet4);
    java2.util2.List list7 = java2.util2.Collections.singletonList((java.lang.Object)treeSet4);
    java2.util2.Iterator iterator8 = treeSet4.iterator();
    java2.util2.Map map9 = java2.util2.Collections.singletonMap((java.lang.Object)comparator0, (java.lang.Object)treeSet4);
    boolean b10 = treeSet4.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test165() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test165"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java.lang.Object obj5 = treeSet4.first();
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet((java2.util2.Collection)treeSet4);
    boolean b7 = treeSet6.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);

  }

  @Test
  public void test166() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test166"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java.lang.Object obj5 = treeSet4.first();
    java2.util2.Comparator comparator6 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj7 = java2.util2.Collections.min((java2.util2.Collection)treeSet4, comparator6);
    java.lang.String str8 = treeSet4.toString();
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet4);
    java2.util2.Iterator iterator10 = treeSet4.iterator();
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set12);
    java2.util2.Enumeration enumeration14 = java2.util2.Collections.enumeration((java2.util2.Collection)set12);
    java2.util2.ArrayList arrayList15 = java2.util2.Collections.list(enumeration14);
    java2.util2.Set set17 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection18 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set17);
    java2.util2.Enumeration enumeration19 = java2.util2.Collections.enumeration((java2.util2.Collection)set17);
    java2.util2.ArrayList arrayList20 = java2.util2.Collections.list(enumeration19);
    java2.util2.Set set22 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection23 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set22);
    java2.util2.Enumeration enumeration24 = java2.util2.Collections.enumeration((java2.util2.Collection)set22);
    java2.util2.ArrayList arrayList25 = java2.util2.Collections.list(enumeration24);
    java2.util2.List list26 = java2.util2.Collections.singletonList((java.lang.Object)enumeration24);
    java2.util2.List list27 = java2.util2.Collections.unmodifiableList(list26);
    java2.util2.Collections.copy((java2.util2.List)arrayList20, list26);
    boolean b29 = arrayList15.containsAll((java2.util2.Collection)arrayList20);
    java2.util2.Collections.sort((java2.util2.List)arrayList20);
    java2.util2.Collections.shuffle((java2.util2.List)arrayList20);
    java2.util2.List list32 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList20);
    java2.util2.Set set34 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection35 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set34);
    java2.util2.Enumeration enumeration36 = java2.util2.Collections.enumeration((java2.util2.Collection)set34);
    java2.util2.ArrayList arrayList37 = java2.util2.Collections.list(enumeration36);
    java2.util2.Set set39 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection40 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set39);
    java2.util2.Enumeration enumeration41 = java2.util2.Collections.enumeration((java2.util2.Collection)set39);
    java2.util2.ArrayList arrayList42 = java2.util2.Collections.list(enumeration41);
    java2.util2.Collections.fill((java2.util2.List)arrayList37, (java.lang.Object)arrayList42);
    java2.util2.Set set45 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection46 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set45);
    java2.util2.Enumeration enumeration47 = java2.util2.Collections.enumeration((java2.util2.Collection)set45);
    java2.util2.ArrayList arrayList48 = java2.util2.Collections.list(enumeration47);
    java2.util2.List list49 = java2.util2.Collections.singletonList((java.lang.Object)enumeration47);
    java2.util2.List list50 = java2.util2.Collections.unmodifiableList(list49);
    java2.util2.Set set52 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection53 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set52);
    java2.util2.Enumeration enumeration54 = java2.util2.Collections.enumeration((java2.util2.Collection)set52);
    java2.util2.ArrayList arrayList55 = java2.util2.Collections.list(enumeration54);
    java2.util2.List list56 = java2.util2.Collections.singletonList((java.lang.Object)enumeration54);
    java2.util2.List list57 = java2.util2.Collections.unmodifiableList(list56);
    int i58 = java2.util2.Collections.indexOfSubList(list50, list56);
    java2.util2.Collections.fill((java2.util2.List)arrayList42, (java.lang.Object)list56);
    java2.util2.Collections.sort((java2.util2.List)arrayList42);
    java2.util2.Set set62 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Map map63 = java2.util2.Collections.singletonMap((java.lang.Object)arrayList42, (java.lang.Object)10L);
    java2.util2.Collections.fill((java2.util2.List)arrayList20, (java.lang.Object)arrayList42);
    boolean b65 = treeSet4.retainAll((java2.util2.Collection)arrayList20);
    java2.util2.List list66 = java2.util2.Collections.synchronizedList((java2.util2.List)arrayList20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[[1.0]]"+ "'", str8.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);

  }

  @Test
  public void test167() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test167"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java.lang.Object obj4 = treeSet3.clone();
    java.lang.Object obj5 = treeSet3.clone();
    treeSet3.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj5);

  }

  @Test
  public void test168() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test168"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java2.util2.Iterator iterator5 = treeSet4.iterator();
    java2.util2.Set set7 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set8 = java2.util2.Collections.singleton((java.lang.Object)set7);
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.Collection)set8);
    java.lang.Object obj10 = treeSet9.last();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b11 = treeSet4.addAll((java2.util2.Collection)treeSet9);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj10);

  }

  @Test
  public void test169() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test169"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java.lang.Object obj4 = treeSet3.clone();
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.List list10 = java2.util2.Collections.singletonList((java.lang.Object)enumeration8);
    java2.util2.Collections.reverse(list10);
    boolean b12 = treeSet3.retainAll((java2.util2.Collection)list10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap(list10, 100, 0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);

  }

  @Test
  public void test170() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test170"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java.lang.Object obj5 = treeSet4.first();
    java2.util2.Comparator comparator6 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj7 = java2.util2.Collections.min((java2.util2.Collection)treeSet4, comparator6);
    java2.util2.Set set8 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet4);
    java2.util2.Set set10 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection11 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set10);
    java2.util2.Enumeration enumeration12 = java2.util2.Collections.enumeration((java2.util2.Collection)set10);
    java2.util2.ArrayList arrayList13 = java2.util2.Collections.list(enumeration12);
    java2.util2.Set set15 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection16 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set15);
    java2.util2.Enumeration enumeration17 = java2.util2.Collections.enumeration((java2.util2.Collection)set15);
    java2.util2.ArrayList arrayList18 = java2.util2.Collections.list(enumeration17);
    java2.util2.Collections.fill((java2.util2.List)arrayList13, (java.lang.Object)arrayList18);
    java2.util2.Set set21 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection22 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set21);
    java2.util2.Enumeration enumeration23 = java2.util2.Collections.enumeration((java2.util2.Collection)set21);
    java2.util2.ArrayList arrayList24 = java2.util2.Collections.list(enumeration23);
    java2.util2.List list25 = java2.util2.Collections.singletonList((java.lang.Object)enumeration23);
    java2.util2.List list26 = java2.util2.Collections.unmodifiableList(list25);
    java2.util2.Set set28 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection29 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set28);
    java2.util2.Enumeration enumeration30 = java2.util2.Collections.enumeration((java2.util2.Collection)set28);
    java2.util2.ArrayList arrayList31 = java2.util2.Collections.list(enumeration30);
    java2.util2.List list32 = java2.util2.Collections.singletonList((java.lang.Object)enumeration30);
    java2.util2.List list33 = java2.util2.Collections.unmodifiableList(list32);
    int i34 = java2.util2.Collections.indexOfSubList(list26, list32);
    java2.util2.Collections.fill((java2.util2.List)arrayList18, (java.lang.Object)list32);
    java2.util2.Enumeration enumeration36 = java2.util2.Collections.enumeration((java2.util2.Collection)list32);
    java2.util2.Set set38 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set39 = java2.util2.Collections.singleton((java.lang.Object)set38);
    java2.util2.TreeSet treeSet40 = new java2.util2.TreeSet((java2.util2.Collection)set39);
    java2.util2.TreeSet treeSet41 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet40);
    java2.util2.Set set43 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set44 = java2.util2.Collections.singleton((java.lang.Object)set43);
    java2.util2.TreeSet treeSet45 = new java2.util2.TreeSet((java2.util2.Collection)set44);
    java2.util2.TreeSet treeSet46 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet45);
    java2.util2.Set set47 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet45);
    java2.util2.List list48 = java2.util2.Collections.singletonList((java.lang.Object)treeSet45);
    boolean b49 = treeSet40.retainAll((java2.util2.Collection)list48);
    int i50 = java2.util2.Collections.lastIndexOfSubList(list32, list48);
    boolean b51 = treeSet4.retainAll((java2.util2.Collection)list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet40.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet40.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet40.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet41.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet41.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet41.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet45.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet45.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet45.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet46.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet46.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet46.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);

  }

  @Test
  public void test171() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test171"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set7 = java2.util2.Collections.singleton((java.lang.Object)set6);
    java2.util2.TreeSet treeSet8 = new java2.util2.TreeSet((java2.util2.Collection)set7);
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet8);
    java2.util2.Set set10 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet8);
    java2.util2.List list11 = java2.util2.Collections.singletonList((java.lang.Object)treeSet8);
    boolean b12 = treeSet3.retainAll((java2.util2.Collection)list11);
    java2.util2.Collections.reverse(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet8.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);

  }

  @Test
  public void test172() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test172"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.List list5 = java2.util2.Collections.singletonList((java.lang.Object)enumeration3);
    java2.util2.List list6 = java2.util2.Collections.unmodifiableList(list5);
    java2.util2.Set set8 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set8);
    java2.util2.Enumeration enumeration10 = java2.util2.Collections.enumeration((java2.util2.Collection)set8);
    java2.util2.ArrayList arrayList11 = java2.util2.Collections.list(enumeration10);
    java2.util2.List list12 = java2.util2.Collections.singletonList((java.lang.Object)enumeration10);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list12);
    int i14 = java2.util2.Collections.indexOfSubList(list6, list12);
    java2.util2.Comparator comparator15 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj16 = java2.util2.Collections.max((java2.util2.Collection)list12, comparator15);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(list12);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);

  }

  @Test
  public void test173() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test173"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Collections.fill((java2.util2.List)arrayList4, (java.lang.Object)arrayList9);
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set12);
    java2.util2.Enumeration enumeration14 = java2.util2.Collections.enumeration((java2.util2.Collection)set12);
    java2.util2.ArrayList arrayList15 = java2.util2.Collections.list(enumeration14);
    java2.util2.List list16 = java2.util2.Collections.singletonList((java.lang.Object)enumeration14);
    java2.util2.List list17 = java2.util2.Collections.unmodifiableList(list16);
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set19);
    java2.util2.Enumeration enumeration21 = java2.util2.Collections.enumeration((java2.util2.Collection)set19);
    java2.util2.ArrayList arrayList22 = java2.util2.Collections.list(enumeration21);
    java2.util2.List list23 = java2.util2.Collections.singletonList((java.lang.Object)enumeration21);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list23);
    int i25 = java2.util2.Collections.indexOfSubList(list17, list23);
    java2.util2.Collections.fill((java2.util2.List)arrayList9, (java.lang.Object)list23);
    java2.util2.Comparator comparator27 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj28 = java2.util2.Collections.min((java2.util2.Collection)list23, comparator27);
    java2.util2.Set set30 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set31 = java2.util2.Collections.singleton((java.lang.Object)set30);
    java2.util2.TreeSet treeSet32 = new java2.util2.TreeSet((java2.util2.Collection)set31);
    java2.util2.TreeSet treeSet33 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet32);
    java2.util2.Set set34 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet32);
    java2.util2.List list35 = java2.util2.Collections.singletonList((java.lang.Object)treeSet32);
    java2.util2.Comparator comparator36 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int i37 = java2.util2.Collections.binarySearch(list23, (java.lang.Object)list35, comparator36);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet32.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet32.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet32.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet33.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet33.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet33.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator36);

  }

  @Test
  public void test174() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test174"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.List list10 = java2.util2.Collections.singletonList((java.lang.Object)enumeration8);
    java2.util2.List list11 = java2.util2.Collections.unmodifiableList(list10);
    java2.util2.Collections.copy((java2.util2.List)arrayList4, list10);
    java2.util2.Set set14 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection15 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set14);
    java2.util2.Enumeration enumeration16 = java2.util2.Collections.enumeration((java2.util2.Collection)set14);
    java2.util2.ArrayList arrayList17 = java2.util2.Collections.list(enumeration16);
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set19);
    java2.util2.Enumeration enumeration21 = java2.util2.Collections.enumeration((java2.util2.Collection)set19);
    java2.util2.ArrayList arrayList22 = java2.util2.Collections.list(enumeration21);
    java2.util2.Set set24 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection25 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set24);
    java2.util2.Enumeration enumeration26 = java2.util2.Collections.enumeration((java2.util2.Collection)set24);
    java2.util2.ArrayList arrayList27 = java2.util2.Collections.list(enumeration26);
    java2.util2.List list28 = java2.util2.Collections.singletonList((java.lang.Object)enumeration26);
    java2.util2.List list29 = java2.util2.Collections.unmodifiableList(list28);
    java2.util2.Collections.copy((java2.util2.List)arrayList22, list28);
    boolean b31 = arrayList17.containsAll((java2.util2.Collection)arrayList22);
    java2.util2.TreeSet treeSet32 = new java2.util2.TreeSet();
    java2.util2.Set set35 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set36 = java2.util2.Collections.singleton((java.lang.Object)set35);
    java2.util2.Enumeration enumeration37 = java2.util2.Collections.enumeration((java2.util2.Collection)set35);
    java2.util2.Map map38 = java2.util2.Collections.singletonMap((java.lang.Object)10.0f, (java.lang.Object)enumeration37);
    boolean b39 = java2.util2.Collections.replaceAll((java2.util2.List)arrayList22, (java.lang.Object)treeSet32, (java.lang.Object)map38);
    java2.util2.Set set41 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection42 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set41);
    java2.util2.Enumeration enumeration43 = java2.util2.Collections.enumeration((java2.util2.Collection)set41);
    java2.util2.ArrayList arrayList44 = java2.util2.Collections.list(enumeration43);
    java2.util2.ArrayList arrayList45 = java2.util2.Collections.list(enumeration43);
    boolean b46 = java2.util2.Collections.replaceAll(list10, (java.lang.Object)b39, (java.lang.Object)enumeration43);
    java2.util2.ArrayList arrayList47 = java2.util2.Collections.list(enumeration43);
    java2.util2.List list48 = java2.util2.Collections.singletonList((java.lang.Object)enumeration43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet32.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet32.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet32.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);

  }

  @Test
  public void test175() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test175"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set7 = java2.util2.Collections.singleton((java.lang.Object)set6);
    java2.util2.TreeSet treeSet8 = new java2.util2.TreeSet((java2.util2.Collection)set7);
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet8);
    java2.util2.Set set10 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet8);
    java2.util2.List list11 = java2.util2.Collections.singletonList((java.lang.Object)treeSet8);
    boolean b12 = treeSet3.retainAll((java2.util2.Collection)list11);
    java2.util2.Set set14 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection15 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set14);
    java2.util2.Enumeration enumeration16 = java2.util2.Collections.enumeration((java2.util2.Collection)set14);
    java2.util2.ArrayList arrayList17 = java2.util2.Collections.list(enumeration16);
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set19);
    java2.util2.Enumeration enumeration21 = java2.util2.Collections.enumeration((java2.util2.Collection)set19);
    java2.util2.ArrayList arrayList22 = java2.util2.Collections.list(enumeration21);
    java2.util2.Collections.fill((java2.util2.List)arrayList17, (java.lang.Object)arrayList22);
    java2.util2.Set set25 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection26 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set25);
    java2.util2.Enumeration enumeration27 = java2.util2.Collections.enumeration((java2.util2.Collection)set25);
    java2.util2.ArrayList arrayList28 = java2.util2.Collections.list(enumeration27);
    java2.util2.List list29 = java2.util2.Collections.singletonList((java.lang.Object)enumeration27);
    java2.util2.List list30 = java2.util2.Collections.unmodifiableList(list29);
    java2.util2.Set set32 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection33 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set32);
    java2.util2.Enumeration enumeration34 = java2.util2.Collections.enumeration((java2.util2.Collection)set32);
    java2.util2.ArrayList arrayList35 = java2.util2.Collections.list(enumeration34);
    java2.util2.List list36 = java2.util2.Collections.singletonList((java.lang.Object)enumeration34);
    java2.util2.List list37 = java2.util2.Collections.unmodifiableList(list36);
    int i38 = java2.util2.Collections.indexOfSubList(list30, list36);
    java2.util2.Collections.fill((java2.util2.List)arrayList22, (java.lang.Object)list36);
    java2.util2.Collections.rotate((java2.util2.List)arrayList22, 0);
    java2.util2.Comparator comparator42 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj43 = java2.util2.Collections.max((java2.util2.Collection)arrayList22, comparator42);
    java2.util2.Comparator comparator44 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort((java2.util2.List)arrayList22, comparator44);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.copy(list11, (java2.util2.List)arrayList22);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet8.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator44);

  }

  @Test
  public void test176() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test176"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj6 = java2.util2.Collections.min((java2.util2.Collection)treeSet5);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[[1.0]]");

  }

  @Test
  public void test177() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test177"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java2.util2.Set set5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet3);
    java2.util2.List list6 = java2.util2.Collections.singletonList((java.lang.Object)treeSet3);
    java2.util2.Comparator comparator7 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj8 = java2.util2.Collections.min((java2.util2.Collection)treeSet3, comparator7);
    java2.util2.SortedSet sortedSet9 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet3);
    java2.util2.Set set11 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)set11);
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet((java2.util2.Collection)set12);
    java2.util2.TreeSet treeSet14 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet13);
    java2.util2.Set set15 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet13);
    java2.util2.List list16 = java2.util2.Collections.singletonList((java.lang.Object)treeSet13);
    java2.util2.Iterator iterator17 = treeSet13.iterator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b18 = treeSet3.retainAll((java2.util2.Collection)treeSet13);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet14.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator17);

  }

  @Test
  public void test178() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test178"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Collections.fill((java2.util2.List)arrayList4, (java.lang.Object)arrayList9);
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set12);
    java2.util2.Enumeration enumeration14 = java2.util2.Collections.enumeration((java2.util2.Collection)set12);
    java2.util2.ArrayList arrayList15 = java2.util2.Collections.list(enumeration14);
    java2.util2.List list16 = java2.util2.Collections.singletonList((java.lang.Object)enumeration14);
    java2.util2.List list17 = java2.util2.Collections.unmodifiableList(list16);
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set19);
    java2.util2.Enumeration enumeration21 = java2.util2.Collections.enumeration((java2.util2.Collection)set19);
    java2.util2.ArrayList arrayList22 = java2.util2.Collections.list(enumeration21);
    java2.util2.List list23 = java2.util2.Collections.singletonList((java.lang.Object)enumeration21);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list23);
    int i25 = java2.util2.Collections.indexOfSubList(list17, list23);
    java2.util2.Collections.fill((java2.util2.List)arrayList9, (java.lang.Object)list23);
    java2.util2.Collections.sort((java2.util2.List)arrayList9);
    java2.util2.Set set29 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection30 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set29);
    java2.util2.Enumeration enumeration31 = java2.util2.Collections.enumeration((java2.util2.Collection)set29);
    java2.util2.ArrayList arrayList32 = java2.util2.Collections.list(enumeration31);
    java2.util2.Set set34 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection35 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set34);
    java2.util2.Enumeration enumeration36 = java2.util2.Collections.enumeration((java2.util2.Collection)set34);
    java2.util2.ArrayList arrayList37 = java2.util2.Collections.list(enumeration36);
    java2.util2.Collections.fill((java2.util2.List)arrayList32, (java.lang.Object)arrayList37);
    java2.util2.Set set40 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection41 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set40);
    java2.util2.Enumeration enumeration42 = java2.util2.Collections.enumeration((java2.util2.Collection)set40);
    java2.util2.ArrayList arrayList43 = java2.util2.Collections.list(enumeration42);
    java2.util2.List list44 = java2.util2.Collections.singletonList((java.lang.Object)enumeration42);
    java2.util2.List list45 = java2.util2.Collections.unmodifiableList(list44);
    java2.util2.Set set47 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection48 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set47);
    java2.util2.Enumeration enumeration49 = java2.util2.Collections.enumeration((java2.util2.Collection)set47);
    java2.util2.ArrayList arrayList50 = java2.util2.Collections.list(enumeration49);
    java2.util2.List list51 = java2.util2.Collections.singletonList((java.lang.Object)enumeration49);
    java2.util2.List list52 = java2.util2.Collections.unmodifiableList(list51);
    int i53 = java2.util2.Collections.indexOfSubList(list45, list51);
    java2.util2.Collections.fill((java2.util2.List)arrayList37, (java.lang.Object)list51);
    java2.util2.TreeSet treeSet55 = new java2.util2.TreeSet();
    java2.util2.Set set57 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection58 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set57);
    java2.util2.Comparator comparator59 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj60 = java2.util2.Collections.max(collection58, comparator59);
    java.lang.Object[] obj_array61 = new java.lang.Object[] { comparator59};
    java.lang.Object[] obj_array62 = treeSet55.toArray(obj_array61);
    java.lang.Object[] obj_array63 = arrayList37.toArray(obj_array61);
    int i64 = java2.util2.Collections.indexOfSubList((java2.util2.List)arrayList9, (java2.util2.List)arrayList37);
    java2.util2.TreeSet treeSet65 = new java2.util2.TreeSet();
    java2.util2.Set set67 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set68 = java2.util2.Collections.singleton((java.lang.Object)set67);
    java.lang.Object[] obj_array69 = new java.lang.Object[] { set68};
    java.lang.Object[] obj_array70 = treeSet65.toArray(obj_array69);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int i71 = java2.util2.Collections.binarySearch((java2.util2.List)arrayList37, (java.lang.Object)obj_array70);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet55.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet55.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet55.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj60 + "' != '" + 10L+ "'", obj60.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet65.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet65.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet65.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array70);

  }

  @Test
  public void test179() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test179"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java.lang.Object obj5 = treeSet4.first();
    java2.util2.Comparator comparator6 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj7 = java2.util2.Collections.min((java2.util2.Collection)treeSet4, comparator6);
    java2.util2.Set set8 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet4);
    boolean b10 = treeSet4.equals((java.lang.Object)"[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test180() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test180"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java.lang.Object obj5 = treeSet4.first();
    java2.util2.SortedSet sortedSet7 = treeSet4.tailSet((java.lang.Object)(short)1);
    java2.util2.SortedSet sortedSet9 = treeSet4.tailSet((java.lang.Object)"hi!");
    java2.util2.Set set11 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)set11);
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet((java2.util2.Collection)set12);
    java2.util2.TreeSet treeSet14 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet13);
    java.lang.Object obj15 = treeSet14.first();
    java2.util2.Set set16 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet14);
    java.lang.Object[] obj_array17 = treeSet14.toArray();
    java2.util2.Enumeration enumeration18 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet14);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet19 = treeSet4.headSet((java.lang.Object)treeSet14);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet14.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration18);

  }

  @Test
  public void test181() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test181"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    boolean b2 = treeSet0.add((java.lang.Object)1L);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1]");

  }

  @Test
  public void test182() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test182"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java.lang.Object obj4 = treeSet3.clone();
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.List list10 = java2.util2.Collections.singletonList((java.lang.Object)enumeration8);
    java2.util2.Collections.reverse(list10);
    boolean b12 = treeSet3.retainAll((java2.util2.Collection)list10);
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet();
    java.lang.Object[] obj_array14 = treeSet13.toArray();
    java2.util2.Comparator comparator15 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int i16 = java2.util2.Collections.binarySearch(list10, (java.lang.Object)treeSet13, comparator15);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator15);

  }

  @Test
  public void test183() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test183"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Set set11 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set11);
    java2.util2.Enumeration enumeration13 = java2.util2.Collections.enumeration((java2.util2.Collection)set11);
    java2.util2.ArrayList arrayList14 = java2.util2.Collections.list(enumeration13);
    java2.util2.List list15 = java2.util2.Collections.singletonList((java.lang.Object)enumeration13);
    java2.util2.List list16 = java2.util2.Collections.unmodifiableList(list15);
    java2.util2.Collections.copy((java2.util2.List)arrayList9, list15);
    boolean b18 = arrayList4.containsAll((java2.util2.Collection)arrayList9);
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)b18);
    java2.util2.Set set20 = java2.util2.Collections.unmodifiableSet(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);

  }

  @Test
  public void test184() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test184"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java.lang.Object obj5 = treeSet4.first();
    java2.util2.Comparator comparator6 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj7 = java2.util2.Collections.min((java2.util2.Collection)treeSet4, comparator6);
    java.lang.String str8 = treeSet4.toString();
    java2.util2.Set set9 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet4);
    java2.util2.Set set11 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set11);
    java2.util2.Enumeration enumeration13 = java2.util2.Collections.enumeration((java2.util2.Collection)set11);
    java2.util2.ArrayList arrayList14 = java2.util2.Collections.list(enumeration13);
    java2.util2.Set set16 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection17 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set16);
    java2.util2.Enumeration enumeration18 = java2.util2.Collections.enumeration((java2.util2.Collection)set16);
    java2.util2.ArrayList arrayList19 = java2.util2.Collections.list(enumeration18);
    java2.util2.Collections.fill((java2.util2.List)arrayList14, (java.lang.Object)arrayList19);
    java2.util2.Set set22 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection23 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set22);
    java2.util2.Enumeration enumeration24 = java2.util2.Collections.enumeration((java2.util2.Collection)set22);
    java2.util2.ArrayList arrayList25 = java2.util2.Collections.list(enumeration24);
    java2.util2.List list26 = java2.util2.Collections.singletonList((java.lang.Object)enumeration24);
    java2.util2.List list27 = java2.util2.Collections.unmodifiableList(list26);
    java2.util2.Set set29 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection30 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set29);
    java2.util2.Enumeration enumeration31 = java2.util2.Collections.enumeration((java2.util2.Collection)set29);
    java2.util2.ArrayList arrayList32 = java2.util2.Collections.list(enumeration31);
    java2.util2.List list33 = java2.util2.Collections.singletonList((java.lang.Object)enumeration31);
    java2.util2.List list34 = java2.util2.Collections.unmodifiableList(list33);
    int i35 = java2.util2.Collections.indexOfSubList(list27, list33);
    java2.util2.Collections.fill((java2.util2.List)arrayList19, (java.lang.Object)list33);
    java2.util2.List list37 = java2.util2.Collections.synchronizedList((java2.util2.List)arrayList19);
    java2.util2.Set set39 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set40 = java2.util2.Collections.singleton((java.lang.Object)set39);
    java2.util2.TreeSet treeSet41 = new java2.util2.TreeSet((java2.util2.Collection)set40);
    java2.util2.TreeSet treeSet42 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet41);
    java2.util2.SortedSet sortedSet43 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet41);
    java2.util2.TreeSet treeSet44 = new java2.util2.TreeSet();
    java2.util2.TreeSet treeSet45 = new java2.util2.TreeSet();
    java2.util2.Set set47 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection48 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set47);
    boolean b49 = treeSet45.removeAll(collection48);
    java2.util2.Comparator comparator50 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj51 = java2.util2.Collections.max(collection48, comparator50);
    boolean b52 = treeSet44.containsAll(collection48);
    boolean b53 = treeSet41.removeAll((java2.util2.Collection)treeSet44);
    java.lang.Object obj54 = treeSet41.clone();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet55 = treeSet4.subSet((java.lang.Object)list37, (java.lang.Object)treeSet41);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[[1.0]]"+ "'", str8.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet41.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet41.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet41.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet42.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet42.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet42.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet44.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet44.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet44.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet45.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet45.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet45.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj51 + "' != '" + 10L+ "'", obj51.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj54);

  }

  @Test
  public void test185() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test185"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Collections.fill((java2.util2.List)arrayList4, (java.lang.Object)arrayList9);
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set12);
    java2.util2.Enumeration enumeration14 = java2.util2.Collections.enumeration((java2.util2.Collection)set12);
    java2.util2.ArrayList arrayList15 = java2.util2.Collections.list(enumeration14);
    java2.util2.List list16 = java2.util2.Collections.singletonList((java.lang.Object)enumeration14);
    java2.util2.List list17 = java2.util2.Collections.unmodifiableList(list16);
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set19);
    java2.util2.Enumeration enumeration21 = java2.util2.Collections.enumeration((java2.util2.Collection)set19);
    java2.util2.ArrayList arrayList22 = java2.util2.Collections.list(enumeration21);
    java2.util2.List list23 = java2.util2.Collections.singletonList((java.lang.Object)enumeration21);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list23);
    int i25 = java2.util2.Collections.indexOfSubList(list17, list23);
    java2.util2.Collections.fill((java2.util2.List)arrayList9, (java.lang.Object)list23);
    java2.util2.Collections.sort((java2.util2.List)arrayList9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj28 = java2.util2.Collections.max((java2.util2.Collection)arrayList9);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-1));

  }

  @Test
  public void test186() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test186"); }


    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set2);
    java2.util2.Collection collection4 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)set2);
    java2.util2.Map map5 = java2.util2.Collections.singletonMap((java.lang.Object)(-1), (java.lang.Object)collection4);
    java2.util2.Map map6 = java2.util2.Collections.synchronizedMap(map5);
    java2.util2.Map map7 = java2.util2.Collections.synchronizedMap(map6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map7);

  }

  @Test
  public void test187() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test187"); }


    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet4);
    java.lang.Object obj6 = treeSet5.first();
    java2.util2.SortedSet sortedSet8 = treeSet5.tailSet((java.lang.Object)(short)1);
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet();
    java2.util2.Set set11 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set11);
    boolean b13 = treeSet9.removeAll(collection12);
    boolean b14 = treeSet5.containsAll((java2.util2.Collection)treeSet9);
    java2.util2.Iterator iterator15 = treeSet9.iterator();
    java2.util2.Map map16 = java2.util2.Collections.singletonMap((java.lang.Object)10L, (java.lang.Object)treeSet9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map16);

  }

  @Test
  public void test188() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test188"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Set set11 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set11);
    java2.util2.Enumeration enumeration13 = java2.util2.Collections.enumeration((java2.util2.Collection)set11);
    java2.util2.ArrayList arrayList14 = java2.util2.Collections.list(enumeration13);
    java2.util2.List list15 = java2.util2.Collections.singletonList((java.lang.Object)enumeration13);
    java2.util2.List list16 = java2.util2.Collections.unmodifiableList(list15);
    java2.util2.Collections.copy((java2.util2.List)arrayList9, list15);
    boolean b18 = arrayList4.containsAll((java2.util2.Collection)arrayList9);
    java2.util2.TreeSet treeSet19 = new java2.util2.TreeSet();
    java2.util2.Set set22 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set23 = java2.util2.Collections.singleton((java.lang.Object)set22);
    java2.util2.Enumeration enumeration24 = java2.util2.Collections.enumeration((java2.util2.Collection)set22);
    java2.util2.Map map25 = java2.util2.Collections.singletonMap((java.lang.Object)10.0f, (java.lang.Object)enumeration24);
    boolean b26 = java2.util2.Collections.replaceAll((java2.util2.List)arrayList9, (java.lang.Object)treeSet19, (java.lang.Object)map25);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int i28 = java2.util2.Collections.binarySearch((java2.util2.List)arrayList9, (java.lang.Object)1L);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet19.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);

  }

  @Test
  public void test189() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test189"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Collections.fill((java2.util2.List)arrayList4, (java.lang.Object)arrayList9);
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set12);
    java2.util2.Enumeration enumeration14 = java2.util2.Collections.enumeration((java2.util2.Collection)set12);
    java2.util2.ArrayList arrayList15 = java2.util2.Collections.list(enumeration14);
    java2.util2.Set set17 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection18 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set17);
    java2.util2.Enumeration enumeration19 = java2.util2.Collections.enumeration((java2.util2.Collection)set17);
    java2.util2.ArrayList arrayList20 = java2.util2.Collections.list(enumeration19);
    java2.util2.Collections.fill((java2.util2.List)arrayList15, (java.lang.Object)arrayList20);
    java2.util2.Set set23 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection24 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set23);
    java2.util2.Enumeration enumeration25 = java2.util2.Collections.enumeration((java2.util2.Collection)set23);
    java2.util2.ArrayList arrayList26 = java2.util2.Collections.list(enumeration25);
    java2.util2.List list27 = java2.util2.Collections.singletonList((java.lang.Object)enumeration25);
    java2.util2.List list28 = java2.util2.Collections.unmodifiableList(list27);
    java2.util2.Set set30 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection31 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set30);
    java2.util2.Enumeration enumeration32 = java2.util2.Collections.enumeration((java2.util2.Collection)set30);
    java2.util2.ArrayList arrayList33 = java2.util2.Collections.list(enumeration32);
    java2.util2.List list34 = java2.util2.Collections.singletonList((java.lang.Object)enumeration32);
    java2.util2.List list35 = java2.util2.Collections.unmodifiableList(list34);
    int i36 = java2.util2.Collections.indexOfSubList(list28, list34);
    java2.util2.Collections.fill((java2.util2.List)arrayList20, (java.lang.Object)list34);
    java2.util2.Collections.shuffle(list34);
    java2.util2.Collections.copy((java2.util2.List)arrayList9, list34);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap(list34, 0, (-1));
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == (-1));

  }

  @Test
  public void test190() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test190"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.List list10 = java2.util2.Collections.singletonList((java.lang.Object)enumeration8);
    boolean b11 = arrayList4.retainAll((java2.util2.Collection)list10);
    java2.util2.Collections.rotate(list10, 100);
    java2.util2.Set set16 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection17 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set16);
    java2.util2.Enumeration enumeration18 = java2.util2.Collections.enumeration((java2.util2.Collection)set16);
    java2.util2.ArrayList arrayList19 = java2.util2.Collections.list(enumeration18);
    java2.util2.Set set21 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection22 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set21);
    java2.util2.Enumeration enumeration23 = java2.util2.Collections.enumeration((java2.util2.Collection)set21);
    java2.util2.ArrayList arrayList24 = java2.util2.Collections.list(enumeration23);
    java2.util2.Collections.fill((java2.util2.List)arrayList19, (java.lang.Object)arrayList24);
    boolean b26 = java2.util2.Collections.replaceAll(list10, (java.lang.Object)(-2), (java.lang.Object)arrayList19);
    java2.util2.List list27 = java2.util2.Collections.singletonList((java.lang.Object)(-2));
    java2.util2.List list28 = java2.util2.Collections.unmodifiableList(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);

  }

  @Test
  public void test191() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test191"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set7 = java2.util2.Collections.singleton((java.lang.Object)set6);
    java2.util2.TreeSet treeSet8 = new java2.util2.TreeSet((java2.util2.Collection)set7);
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet8);
    boolean b10 = treeSet3.equals((java.lang.Object)treeSet8);
    java2.util2.SortedSet sortedSet11 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet8.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet11);

  }

  @Test
  public void test192() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test192"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Collections.fill((java2.util2.List)arrayList4, (java.lang.Object)arrayList9);
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set12);
    java2.util2.Enumeration enumeration14 = java2.util2.Collections.enumeration((java2.util2.Collection)set12);
    java2.util2.ArrayList arrayList15 = java2.util2.Collections.list(enumeration14);
    java2.util2.List list16 = java2.util2.Collections.singletonList((java.lang.Object)enumeration14);
    java2.util2.List list17 = java2.util2.Collections.unmodifiableList(list16);
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set19);
    java2.util2.Enumeration enumeration21 = java2.util2.Collections.enumeration((java2.util2.Collection)set19);
    java2.util2.ArrayList arrayList22 = java2.util2.Collections.list(enumeration21);
    java2.util2.List list23 = java2.util2.Collections.singletonList((java.lang.Object)enumeration21);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list23);
    int i25 = java2.util2.Collections.indexOfSubList(list17, list23);
    java2.util2.Collections.fill((java2.util2.List)arrayList9, (java.lang.Object)list23);
    java2.util2.Collections.rotate((java2.util2.List)arrayList9, 0);
    java2.util2.Comparator comparator29 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort((java2.util2.List)arrayList9, comparator29);
    java2.util2.TreeSet treeSet31 = new java2.util2.TreeSet((java2.util2.Collection)arrayList9);
    java2.util2.Set set33 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set34 = java2.util2.Collections.singleton((java.lang.Object)set33);
    java2.util2.TreeSet treeSet35 = new java2.util2.TreeSet((java2.util2.Collection)set34);
    java2.util2.TreeSet treeSet36 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet35);
    java.lang.Object obj37 = treeSet36.first();
    java2.util2.Comparator comparator38 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj39 = java2.util2.Collections.min((java2.util2.Collection)treeSet36, comparator38);
    java.lang.String str40 = treeSet36.toString();
    java2.util2.Set set41 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet36);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b42 = treeSet31.removeAll((java2.util2.Collection)set41);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet31.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet31.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet35.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet35.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet35.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet36.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet36.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet36.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "[[1.0]]"+ "'", str40.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set41);

  }

  @Test
  public void test193() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test193"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.List list5 = java2.util2.Collections.singletonList((java.lang.Object)enumeration3);
    java2.util2.List list6 = java2.util2.Collections.unmodifiableList(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    java2.util2.Collection collection8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list5);
    java2.util2.Collections.rotate(list5, (-1));
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set12);
    java2.util2.Enumeration enumeration14 = java2.util2.Collections.enumeration((java2.util2.Collection)set12);
    java2.util2.ArrayList arrayList15 = java2.util2.Collections.list(enumeration14);
    java2.util2.Set set17 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection18 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set17);
    java2.util2.Enumeration enumeration19 = java2.util2.Collections.enumeration((java2.util2.Collection)set17);
    java2.util2.ArrayList arrayList20 = java2.util2.Collections.list(enumeration19);
    java2.util2.Collections.fill((java2.util2.List)arrayList15, (java.lang.Object)arrayList20);
    java2.util2.Set set23 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection24 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set23);
    java2.util2.Enumeration enumeration25 = java2.util2.Collections.enumeration((java2.util2.Collection)set23);
    java2.util2.ArrayList arrayList26 = java2.util2.Collections.list(enumeration25);
    java2.util2.List list27 = java2.util2.Collections.singletonList((java.lang.Object)enumeration25);
    java2.util2.List list28 = java2.util2.Collections.unmodifiableList(list27);
    java2.util2.Set set30 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection31 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set30);
    java2.util2.Enumeration enumeration32 = java2.util2.Collections.enumeration((java2.util2.Collection)set30);
    java2.util2.ArrayList arrayList33 = java2.util2.Collections.list(enumeration32);
    java2.util2.List list34 = java2.util2.Collections.singletonList((java.lang.Object)enumeration32);
    java2.util2.List list35 = java2.util2.Collections.unmodifiableList(list34);
    int i36 = java2.util2.Collections.indexOfSubList(list28, list34);
    java2.util2.Collections.fill((java2.util2.List)arrayList20, (java.lang.Object)list34);
    java2.util2.List list38 = java2.util2.Collections.synchronizedList((java2.util2.List)arrayList20);
    java2.util2.Set set40 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection41 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set40);
    java2.util2.Enumeration enumeration42 = java2.util2.Collections.enumeration((java2.util2.Collection)set40);
    java2.util2.ArrayList arrayList43 = java2.util2.Collections.list(enumeration42);
    java2.util2.Set set45 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection46 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set45);
    java2.util2.Enumeration enumeration47 = java2.util2.Collections.enumeration((java2.util2.Collection)set45);
    java2.util2.ArrayList arrayList48 = java2.util2.Collections.list(enumeration47);
    java2.util2.Collections.fill((java2.util2.List)arrayList43, (java.lang.Object)arrayList48);
    java2.util2.Set set51 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection52 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set51);
    java2.util2.Enumeration enumeration53 = java2.util2.Collections.enumeration((java2.util2.Collection)set51);
    java2.util2.ArrayList arrayList54 = java2.util2.Collections.list(enumeration53);
    java2.util2.List list55 = java2.util2.Collections.singletonList((java.lang.Object)enumeration53);
    java2.util2.List list56 = java2.util2.Collections.unmodifiableList(list55);
    java2.util2.Set set58 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection59 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set58);
    java2.util2.Enumeration enumeration60 = java2.util2.Collections.enumeration((java2.util2.Collection)set58);
    java2.util2.ArrayList arrayList61 = java2.util2.Collections.list(enumeration60);
    java2.util2.List list62 = java2.util2.Collections.singletonList((java.lang.Object)enumeration60);
    java2.util2.List list63 = java2.util2.Collections.unmodifiableList(list62);
    int i64 = java2.util2.Collections.indexOfSubList(list56, list62);
    java2.util2.Collections.fill((java2.util2.List)arrayList48, (java.lang.Object)list62);
    java2.util2.Collections.rotate((java2.util2.List)arrayList48, 0);
    java2.util2.TreeSet treeSet68 = new java2.util2.TreeSet((java2.util2.Collection)arrayList48);
    java2.util2.Set set70 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set71 = java2.util2.Collections.singleton((java.lang.Object)set70);
    java2.util2.TreeSet treeSet72 = new java2.util2.TreeSet((java2.util2.Collection)set71);
    java2.util2.TreeSet treeSet73 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet72);
    java2.util2.Set set74 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet72);
    java2.util2.List list75 = java2.util2.Collections.singletonList((java.lang.Object)treeSet72);
    boolean b76 = java2.util2.Collections.replaceAll((java2.util2.List)arrayList20, (java.lang.Object)arrayList48, (java.lang.Object)treeSet72);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.copy(list5, (java2.util2.List)arrayList48);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet68.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet68.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet72.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet72.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet72.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet73.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet73.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet73.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);

  }

  @Test
  public void test194() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test194"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet4);
    java2.util2.Set set6 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet4);
    java2.util2.SortedSet sortedSet7 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet4);
    java.lang.Object obj8 = treeSet4.clone();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet9 = treeSet0.tailSet((java.lang.Object)treeSet4);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj8);

  }

  @Test
  public void test195() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test195"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Collections.fill((java2.util2.List)arrayList4, (java.lang.Object)arrayList9);
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set12);
    java2.util2.Enumeration enumeration14 = java2.util2.Collections.enumeration((java2.util2.Collection)set12);
    java2.util2.ArrayList arrayList15 = java2.util2.Collections.list(enumeration14);
    java2.util2.List list16 = java2.util2.Collections.singletonList((java.lang.Object)enumeration14);
    java2.util2.List list17 = java2.util2.Collections.unmodifiableList(list16);
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set19);
    java2.util2.Enumeration enumeration21 = java2.util2.Collections.enumeration((java2.util2.Collection)set19);
    java2.util2.ArrayList arrayList22 = java2.util2.Collections.list(enumeration21);
    java2.util2.List list23 = java2.util2.Collections.singletonList((java.lang.Object)enumeration21);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list23);
    int i25 = java2.util2.Collections.indexOfSubList(list17, list23);
    java2.util2.Collections.fill((java2.util2.List)arrayList9, (java.lang.Object)list23);
    java2.util2.List list27 = java2.util2.Collections.synchronizedList((java2.util2.List)arrayList9);
    java2.util2.Set set29 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection30 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set29);
    java2.util2.Enumeration enumeration31 = java2.util2.Collections.enumeration((java2.util2.Collection)set29);
    java2.util2.ArrayList arrayList32 = java2.util2.Collections.list(enumeration31);
    java2.util2.Set set34 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection35 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set34);
    java2.util2.Enumeration enumeration36 = java2.util2.Collections.enumeration((java2.util2.Collection)set34);
    java2.util2.ArrayList arrayList37 = java2.util2.Collections.list(enumeration36);
    java2.util2.Collections.fill((java2.util2.List)arrayList32, (java.lang.Object)arrayList37);
    java2.util2.Set set40 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection41 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set40);
    java2.util2.Enumeration enumeration42 = java2.util2.Collections.enumeration((java2.util2.Collection)set40);
    java2.util2.ArrayList arrayList43 = java2.util2.Collections.list(enumeration42);
    java2.util2.List list44 = java2.util2.Collections.singletonList((java.lang.Object)enumeration42);
    java2.util2.List list45 = java2.util2.Collections.unmodifiableList(list44);
    java2.util2.Set set47 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection48 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set47);
    java2.util2.Enumeration enumeration49 = java2.util2.Collections.enumeration((java2.util2.Collection)set47);
    java2.util2.ArrayList arrayList50 = java2.util2.Collections.list(enumeration49);
    java2.util2.List list51 = java2.util2.Collections.singletonList((java.lang.Object)enumeration49);
    java2.util2.List list52 = java2.util2.Collections.unmodifiableList(list51);
    int i53 = java2.util2.Collections.indexOfSubList(list45, list51);
    java2.util2.Collections.fill((java2.util2.List)arrayList37, (java.lang.Object)list51);
    java2.util2.Collections.rotate((java2.util2.List)arrayList37, 0);
    java2.util2.TreeSet treeSet57 = new java2.util2.TreeSet((java2.util2.Collection)arrayList37);
    java2.util2.Set set59 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set60 = java2.util2.Collections.singleton((java.lang.Object)set59);
    java2.util2.TreeSet treeSet61 = new java2.util2.TreeSet((java2.util2.Collection)set60);
    java2.util2.TreeSet treeSet62 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet61);
    java2.util2.Set set63 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet61);
    java2.util2.List list64 = java2.util2.Collections.singletonList((java.lang.Object)treeSet61);
    boolean b65 = java2.util2.Collections.replaceAll((java2.util2.List)arrayList9, (java.lang.Object)arrayList37, (java.lang.Object)treeSet61);
    java2.util2.List list66 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet57.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet57.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet61.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet61.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet61.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet62.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet62.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet62.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);

  }

  @Test
  public void test196() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test196"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Set set11 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set11);
    java2.util2.Enumeration enumeration13 = java2.util2.Collections.enumeration((java2.util2.Collection)set11);
    java2.util2.ArrayList arrayList14 = java2.util2.Collections.list(enumeration13);
    java2.util2.List list15 = java2.util2.Collections.singletonList((java.lang.Object)enumeration13);
    java2.util2.List list16 = java2.util2.Collections.unmodifiableList(list15);
    java2.util2.Collections.copy((java2.util2.List)arrayList9, list15);
    boolean b18 = arrayList4.containsAll((java2.util2.Collection)arrayList9);
    java2.util2.Set set20 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection21 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set20);
    java2.util2.Enumeration enumeration22 = java2.util2.Collections.enumeration((java2.util2.Collection)set20);
    java2.util2.ArrayList arrayList23 = java2.util2.Collections.list(enumeration22);
    java2.util2.Set set25 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection26 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set25);
    java2.util2.Enumeration enumeration27 = java2.util2.Collections.enumeration((java2.util2.Collection)set25);
    java2.util2.ArrayList arrayList28 = java2.util2.Collections.list(enumeration27);
    java2.util2.Collections.fill((java2.util2.List)arrayList23, (java.lang.Object)arrayList28);
    java2.util2.Set set31 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection32 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set31);
    java2.util2.Enumeration enumeration33 = java2.util2.Collections.enumeration((java2.util2.Collection)set31);
    java2.util2.ArrayList arrayList34 = java2.util2.Collections.list(enumeration33);
    java2.util2.List list35 = java2.util2.Collections.singletonList((java.lang.Object)enumeration33);
    java2.util2.List list36 = java2.util2.Collections.unmodifiableList(list35);
    java2.util2.Set set38 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection39 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set38);
    java2.util2.Enumeration enumeration40 = java2.util2.Collections.enumeration((java2.util2.Collection)set38);
    java2.util2.ArrayList arrayList41 = java2.util2.Collections.list(enumeration40);
    java2.util2.List list42 = java2.util2.Collections.singletonList((java.lang.Object)enumeration40);
    java2.util2.List list43 = java2.util2.Collections.unmodifiableList(list42);
    int i44 = java2.util2.Collections.indexOfSubList(list36, list42);
    java2.util2.Collections.fill((java2.util2.List)arrayList28, (java.lang.Object)list42);
    java2.util2.Collections.rotate((java2.util2.List)arrayList28, 0);
    java2.util2.Set set50 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection51 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set50);
    java2.util2.Enumeration enumeration52 = java2.util2.Collections.enumeration((java2.util2.Collection)set50);
    java2.util2.ArrayList arrayList53 = java2.util2.Collections.list(enumeration52);
    java2.util2.Set set55 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection56 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set55);
    java2.util2.Enumeration enumeration57 = java2.util2.Collections.enumeration((java2.util2.Collection)set55);
    java2.util2.ArrayList arrayList58 = java2.util2.Collections.list(enumeration57);
    java2.util2.List list59 = java2.util2.Collections.singletonList((java.lang.Object)enumeration57);
    java2.util2.List list60 = java2.util2.Collections.unmodifiableList(list59);
    java2.util2.Collections.copy((java2.util2.List)arrayList53, list59);
    boolean b62 = java2.util2.Collections.replaceAll((java2.util2.List)arrayList28, (java.lang.Object)(byte)10, (java.lang.Object)list59);
    java2.util2.Collections.shuffle((java2.util2.List)arrayList28);
    java2.util2.Collections.copy((java2.util2.List)arrayList4, (java2.util2.List)arrayList28);
    java2.util2.Set set66 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection67 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set66);
    java2.util2.Enumeration enumeration68 = java2.util2.Collections.enumeration((java2.util2.Collection)set66);
    java2.util2.ArrayList arrayList69 = java2.util2.Collections.list(enumeration68);
    java2.util2.List list70 = java2.util2.Collections.singletonList((java.lang.Object)enumeration68);
    java2.util2.List list71 = java2.util2.Collections.unmodifiableList(list70);
    java2.util2.List list72 = java2.util2.Collections.unmodifiableList(list70);
    java2.util2.Collection collection73 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list70);
    java2.util2.Collections.rotate(list70, (-1));
    java2.util2.Collections.copy((java2.util2.List)arrayList28, list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection73);

  }

  @Test
  public void test197() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test197"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java2.util2.Iterator iterator5 = treeSet4.iterator();
    java2.util2.Set set6 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);

  }

  @Test
  public void test198() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test198"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java2.util2.SortedSet sortedSet5 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet3);
    java2.util2.Set set6 = java2.util2.Collections.synchronizedSet((java2.util2.Set)sortedSet5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);

  }

  @Test
  public void test199() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test199"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.List list10 = java2.util2.Collections.singletonList((java.lang.Object)enumeration8);
    boolean b11 = arrayList4.retainAll((java2.util2.Collection)list10);
    java2.util2.Collections.rotate(list10, 100);
    java2.util2.Collections.shuffle(list10);
    java2.util2.Comparator comparator15 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(list10, comparator15);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator15);

  }

  @Test
  public void test200() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test200"); }


    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set4 = java2.util2.Collections.singleton((java.lang.Object)set3);
    java2.util2.Enumeration enumeration5 = java2.util2.Collections.enumeration((java2.util2.Collection)set3);
    java2.util2.Map map6 = java2.util2.Collections.singletonMap((java.lang.Object)10.0f, (java.lang.Object)enumeration5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.List list7 = java2.util2.Collections.nCopies((-1), (java.lang.Object)map6);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map6);

  }

  @Test
  public void test201() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test201"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.List list5 = java2.util2.Collections.singletonList((java.lang.Object)enumeration3);
    java2.util2.List list6 = java2.util2.Collections.unmodifiableList(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    java2.util2.Comparator comparator8 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(list5, comparator8);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator8);

  }

  @Test
  public void test202() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test202"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Set set11 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set11);
    java2.util2.Enumeration enumeration13 = java2.util2.Collections.enumeration((java2.util2.Collection)set11);
    java2.util2.ArrayList arrayList14 = java2.util2.Collections.list(enumeration13);
    java2.util2.List list15 = java2.util2.Collections.singletonList((java.lang.Object)enumeration13);
    boolean b16 = arrayList9.retainAll((java2.util2.Collection)list15);
    int i17 = java2.util2.Collections.lastIndexOfSubList((java2.util2.List)arrayList4, (java2.util2.List)arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);

  }

  @Test
  public void test203() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test203"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java2.util2.Set set5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet3);
    java2.util2.List list6 = java2.util2.Collections.singletonList((java.lang.Object)treeSet3);
    java2.util2.Comparator comparator7 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj8 = java2.util2.Collections.min((java2.util2.Collection)treeSet3, comparator7);
    java2.util2.SortedSet sortedSet9 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet3);
    int i10 = treeSet3.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);

  }

  @Test
  public void test204() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test204"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.Set set5 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection6 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set5);
    java2.util2.Enumeration enumeration7 = java2.util2.Collections.enumeration((java2.util2.Collection)set5);
    java2.util2.ArrayList arrayList8 = java2.util2.Collections.list(enumeration7);
    java2.util2.Set set10 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection11 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set10);
    java2.util2.Enumeration enumeration12 = java2.util2.Collections.enumeration((java2.util2.Collection)set10);
    java2.util2.ArrayList arrayList13 = java2.util2.Collections.list(enumeration12);
    java2.util2.Collections.fill((java2.util2.List)arrayList8, (java.lang.Object)arrayList13);
    java2.util2.Set set16 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection17 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set16);
    java2.util2.Enumeration enumeration18 = java2.util2.Collections.enumeration((java2.util2.Collection)set16);
    java2.util2.ArrayList arrayList19 = java2.util2.Collections.list(enumeration18);
    java2.util2.List list20 = java2.util2.Collections.singletonList((java.lang.Object)enumeration18);
    java2.util2.List list21 = java2.util2.Collections.unmodifiableList(list20);
    java2.util2.Set set23 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection24 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set23);
    java2.util2.Enumeration enumeration25 = java2.util2.Collections.enumeration((java2.util2.Collection)set23);
    java2.util2.ArrayList arrayList26 = java2.util2.Collections.list(enumeration25);
    java2.util2.List list27 = java2.util2.Collections.singletonList((java.lang.Object)enumeration25);
    java2.util2.List list28 = java2.util2.Collections.unmodifiableList(list27);
    int i29 = java2.util2.Collections.indexOfSubList(list21, list27);
    java2.util2.Collections.fill((java2.util2.List)arrayList13, (java.lang.Object)list27);
    java2.util2.TreeSet treeSet31 = new java2.util2.TreeSet();
    java2.util2.Set set33 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection34 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set33);
    java2.util2.Comparator comparator35 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj36 = java2.util2.Collections.max(collection34, comparator35);
    java.lang.Object[] obj_array37 = new java.lang.Object[] { comparator35};
    java.lang.Object[] obj_array38 = treeSet31.toArray(obj_array37);
    java.lang.Object[] obj_array39 = arrayList13.toArray(obj_array37);
    java2.util2.TreeSet treeSet40 = new java2.util2.TreeSet((java2.util2.Collection)arrayList13);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet41 = treeSet3.headSet((java.lang.Object)arrayList13);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet31.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet31.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet31.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj36 + "' != '" + 10L+ "'", obj36.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet40.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet40.size() == 1);

  }

  @Test
  public void test205() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test205"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java.lang.Object obj5 = treeSet4.first();
    java2.util2.Comparator comparator6 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj7 = java2.util2.Collections.min((java2.util2.Collection)treeSet4, comparator6);
    java.lang.String str8 = treeSet4.toString();
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet4);
    java.lang.Object obj10 = treeSet4.first();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[[1.0]]"+ "'", str8.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj10);

  }

  @Test
  public void test206() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test206"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java.lang.Object obj5 = treeSet4.first();
    java2.util2.Iterator iterator6 = treeSet4.iterator();
    java2.util2.Set set8 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set8);
    java2.util2.Enumeration enumeration10 = java2.util2.Collections.enumeration((java2.util2.Collection)set8);
    java2.util2.ArrayList arrayList11 = java2.util2.Collections.list(enumeration10);
    java2.util2.Set set13 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection14 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set13);
    java2.util2.Enumeration enumeration15 = java2.util2.Collections.enumeration((java2.util2.Collection)set13);
    java2.util2.ArrayList arrayList16 = java2.util2.Collections.list(enumeration15);
    java2.util2.Collections.fill((java2.util2.List)arrayList11, (java.lang.Object)arrayList16);
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set19);
    java2.util2.Enumeration enumeration21 = java2.util2.Collections.enumeration((java2.util2.Collection)set19);
    java2.util2.ArrayList arrayList22 = java2.util2.Collections.list(enumeration21);
    java2.util2.List list23 = java2.util2.Collections.singletonList((java.lang.Object)enumeration21);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list23);
    java2.util2.Set set26 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection27 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set26);
    java2.util2.Enumeration enumeration28 = java2.util2.Collections.enumeration((java2.util2.Collection)set26);
    java2.util2.ArrayList arrayList29 = java2.util2.Collections.list(enumeration28);
    java2.util2.List list30 = java2.util2.Collections.singletonList((java.lang.Object)enumeration28);
    java2.util2.List list31 = java2.util2.Collections.unmodifiableList(list30);
    int i32 = java2.util2.Collections.indexOfSubList(list24, list30);
    java2.util2.Collections.fill((java2.util2.List)arrayList16, (java.lang.Object)list30);
    java2.util2.Collections.rotate((java2.util2.List)arrayList16, 0);
    java2.util2.Set set37 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection38 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set37);
    java2.util2.Enumeration enumeration39 = java2.util2.Collections.enumeration((java2.util2.Collection)set37);
    java2.util2.ArrayList arrayList40 = java2.util2.Collections.list(enumeration39);
    java2.util2.Set set42 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection43 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set42);
    java2.util2.Enumeration enumeration44 = java2.util2.Collections.enumeration((java2.util2.Collection)set42);
    java2.util2.ArrayList arrayList45 = java2.util2.Collections.list(enumeration44);
    java2.util2.Set set47 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection48 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set47);
    java2.util2.Enumeration enumeration49 = java2.util2.Collections.enumeration((java2.util2.Collection)set47);
    java2.util2.ArrayList arrayList50 = java2.util2.Collections.list(enumeration49);
    java2.util2.List list51 = java2.util2.Collections.singletonList((java.lang.Object)enumeration49);
    java2.util2.List list52 = java2.util2.Collections.unmodifiableList(list51);
    java2.util2.Collections.copy((java2.util2.List)arrayList45, list51);
    boolean b54 = arrayList40.containsAll((java2.util2.Collection)arrayList45);
    java2.util2.Collections.sort((java2.util2.List)arrayList45);
    java2.util2.Set set57 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection58 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set57);
    java2.util2.Comparator comparator59 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj60 = java2.util2.Collections.max(collection58, comparator59);
    java.lang.Object obj61 = java2.util2.Collections.min(collection58);
    java2.util2.Enumeration enumeration62 = java2.util2.Collections.enumeration(collection58);
    boolean b63 = arrayList45.containsAll(collection58);
    boolean b64 = arrayList16.containsAll(collection58);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b65 = treeSet4.remove((java.lang.Object)collection58);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj60 + "' != '" + 10L+ "'", obj60.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj61 + "' != '" + 10L+ "'", obj61.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);

  }

  @Test
  public void test207() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test207"); }


    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)set2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.List list4 = java2.util2.Collections.nCopies((-2), (java.lang.Object)set2);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);

  }

  @Test
  public void test208() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test208"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java.lang.Object obj5 = treeSet4.first();
    java2.util2.SortedSet sortedSet7 = treeSet4.tailSet((java.lang.Object)(short)1);
    int i8 = treeSet4.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test209() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test209"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Collections.fill((java2.util2.List)arrayList4, (java.lang.Object)arrayList9);
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set12);
    java2.util2.Enumeration enumeration14 = java2.util2.Collections.enumeration((java2.util2.Collection)set12);
    java2.util2.ArrayList arrayList15 = java2.util2.Collections.list(enumeration14);
    java2.util2.List list16 = java2.util2.Collections.singletonList((java.lang.Object)enumeration14);
    java2.util2.List list17 = java2.util2.Collections.unmodifiableList(list16);
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set19);
    java2.util2.Enumeration enumeration21 = java2.util2.Collections.enumeration((java2.util2.Collection)set19);
    java2.util2.ArrayList arrayList22 = java2.util2.Collections.list(enumeration21);
    java2.util2.List list23 = java2.util2.Collections.singletonList((java.lang.Object)enumeration21);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list23);
    int i25 = java2.util2.Collections.indexOfSubList(list17, list23);
    java2.util2.Collections.fill((java2.util2.List)arrayList9, (java.lang.Object)list23);
    java2.util2.Collections.rotate((java2.util2.List)arrayList9, 0);
    java2.util2.Set set31 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection32 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set31);
    java2.util2.Enumeration enumeration33 = java2.util2.Collections.enumeration((java2.util2.Collection)set31);
    java2.util2.ArrayList arrayList34 = java2.util2.Collections.list(enumeration33);
    java2.util2.Set set36 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection37 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set36);
    java2.util2.Enumeration enumeration38 = java2.util2.Collections.enumeration((java2.util2.Collection)set36);
    java2.util2.ArrayList arrayList39 = java2.util2.Collections.list(enumeration38);
    java2.util2.List list40 = java2.util2.Collections.singletonList((java.lang.Object)enumeration38);
    java2.util2.List list41 = java2.util2.Collections.unmodifiableList(list40);
    java2.util2.Collections.copy((java2.util2.List)arrayList34, list40);
    boolean b43 = java2.util2.Collections.replaceAll((java2.util2.List)arrayList9, (java.lang.Object)(byte)10, (java.lang.Object)list40);
    java2.util2.Map map45 = java2.util2.Collections.singletonMap((java.lang.Object)(byte)10, (java.lang.Object)(-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map45);

  }

  @Test
  public void test210() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test210"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java2.util2.Set set5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet3);
    java2.util2.List list6 = java2.util2.Collections.singletonList((java.lang.Object)treeSet3);
    java2.util2.Iterator iterator7 = treeSet3.iterator();
    java2.util2.Comparator comparator8 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj9 = java2.util2.Collections.min((java2.util2.Collection)treeSet3, comparator8);
    java2.util2.Set set11 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)set11);
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet((java2.util2.Collection)set12);
    java2.util2.TreeSet treeSet14 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet13);
    java.lang.Object obj15 = treeSet14.first();
    java2.util2.Comparator comparator16 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj17 = java2.util2.Collections.min((java2.util2.Collection)treeSet14, comparator16);
    java.lang.String str18 = treeSet14.toString();
    java2.util2.Set set19 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet14);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b20 = treeSet3.contains((java.lang.Object)treeSet14);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet14.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[[1.0]]"+ "'", str18.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);

  }

  @Test
  public void test211() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test211"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java2.util2.Set set5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet3);
    java2.util2.List list6 = java2.util2.Collections.singletonList((java.lang.Object)treeSet3);
    java2.util2.Comparator comparator7 = treeSet3.comparator();
    java2.util2.Set set9 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set10 = java2.util2.Collections.singleton((java.lang.Object)set9);
    java2.util2.TreeSet treeSet11 = new java2.util2.TreeSet((java2.util2.Collection)set10);
    java.lang.Object obj12 = treeSet11.clone();
    java.lang.Object obj13 = treeSet11.clone();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b14 = treeSet3.containsAll((java2.util2.Collection)treeSet11);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet11.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet11.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet11.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj13);

  }

  @Test
  public void test212() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test212"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java.lang.Object obj5 = treeSet4.first();
    java2.util2.SortedSet sortedSet7 = treeSet4.tailSet((java.lang.Object)(short)1);
    java2.util2.TreeSet treeSet8 = new java2.util2.TreeSet();
    java2.util2.Set set10 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection11 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set10);
    boolean b12 = treeSet8.removeAll(collection11);
    boolean b13 = treeSet4.containsAll((java2.util2.Collection)treeSet8);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj14 = java2.util2.Collections.max((java2.util2.Collection)treeSet4);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet8.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);

  }

  @Test
  public void test213() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test213"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Set set11 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set11);
    java2.util2.Enumeration enumeration13 = java2.util2.Collections.enumeration((java2.util2.Collection)set11);
    java2.util2.ArrayList arrayList14 = java2.util2.Collections.list(enumeration13);
    java2.util2.List list15 = java2.util2.Collections.singletonList((java.lang.Object)enumeration13);
    java2.util2.List list16 = java2.util2.Collections.unmodifiableList(list15);
    java2.util2.Collections.copy((java2.util2.List)arrayList9, list15);
    boolean b18 = arrayList4.containsAll((java2.util2.Collection)arrayList9);
    java2.util2.Collections.sort((java2.util2.List)arrayList9);
    java2.util2.Collections.shuffle((java2.util2.List)arrayList9);
    java2.util2.List list21 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList9);
    java2.util2.Set set23 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection24 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set23);
    java2.util2.Enumeration enumeration25 = java2.util2.Collections.enumeration((java2.util2.Collection)set23);
    java2.util2.ArrayList arrayList26 = java2.util2.Collections.list(enumeration25);
    java2.util2.Set set28 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection29 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set28);
    java2.util2.Enumeration enumeration30 = java2.util2.Collections.enumeration((java2.util2.Collection)set28);
    java2.util2.ArrayList arrayList31 = java2.util2.Collections.list(enumeration30);
    java2.util2.Collections.fill((java2.util2.List)arrayList26, (java.lang.Object)arrayList31);
    java2.util2.Set set34 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection35 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set34);
    java2.util2.Enumeration enumeration36 = java2.util2.Collections.enumeration((java2.util2.Collection)set34);
    java2.util2.ArrayList arrayList37 = java2.util2.Collections.list(enumeration36);
    java2.util2.List list38 = java2.util2.Collections.singletonList((java.lang.Object)enumeration36);
    java2.util2.List list39 = java2.util2.Collections.unmodifiableList(list38);
    java2.util2.Set set41 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection42 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set41);
    java2.util2.Enumeration enumeration43 = java2.util2.Collections.enumeration((java2.util2.Collection)set41);
    java2.util2.ArrayList arrayList44 = java2.util2.Collections.list(enumeration43);
    java2.util2.List list45 = java2.util2.Collections.singletonList((java.lang.Object)enumeration43);
    java2.util2.List list46 = java2.util2.Collections.unmodifiableList(list45);
    int i47 = java2.util2.Collections.indexOfSubList(list39, list45);
    java2.util2.Collections.fill((java2.util2.List)arrayList31, (java.lang.Object)list45);
    java2.util2.Collections.sort((java2.util2.List)arrayList31);
    java2.util2.Set set51 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Map map52 = java2.util2.Collections.singletonMap((java.lang.Object)arrayList31, (java.lang.Object)10L);
    java2.util2.Collections.fill((java2.util2.List)arrayList9, (java.lang.Object)arrayList31);
    java2.util2.Set set55 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set56 = java2.util2.Collections.singleton((java.lang.Object)set55);
    java2.util2.TreeSet treeSet57 = new java2.util2.TreeSet((java2.util2.Collection)set56);
    java2.util2.TreeSet treeSet58 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet57);
    java2.util2.Set set60 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set61 = java2.util2.Collections.singleton((java.lang.Object)set60);
    java2.util2.TreeSet treeSet62 = new java2.util2.TreeSet((java2.util2.Collection)set61);
    java2.util2.TreeSet treeSet63 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet62);
    boolean b64 = treeSet57.equals((java.lang.Object)treeSet62);
    java2.util2.Collections.fill((java2.util2.List)arrayList9, (java.lang.Object)treeSet57);
    java2.util2.Comparator comparator66 = treeSet57.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet57.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet57.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet57.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet58.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet58.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet58.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet62.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet62.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet62.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet63.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet63.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet63.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator66);

  }

  @Test
  public void test214() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test214"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java2.util2.Set set5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet3);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet3);
    java.lang.Object obj7 = treeSet3.clone();
    java.lang.Object obj8 = treeSet3.clone();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b10 = treeSet3.remove((java.lang.Object)1.0d);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj8);

  }

  @Test
  public void test215() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test215"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Collections.fill((java2.util2.List)arrayList4, (java.lang.Object)arrayList9);
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set12);
    java2.util2.Enumeration enumeration14 = java2.util2.Collections.enumeration((java2.util2.Collection)set12);
    java2.util2.ArrayList arrayList15 = java2.util2.Collections.list(enumeration14);
    java2.util2.List list16 = java2.util2.Collections.singletonList((java.lang.Object)enumeration14);
    java2.util2.List list17 = java2.util2.Collections.unmodifiableList(list16);
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set19);
    java2.util2.Enumeration enumeration21 = java2.util2.Collections.enumeration((java2.util2.Collection)set19);
    java2.util2.ArrayList arrayList22 = java2.util2.Collections.list(enumeration21);
    java2.util2.List list23 = java2.util2.Collections.singletonList((java.lang.Object)enumeration21);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list23);
    int i25 = java2.util2.Collections.indexOfSubList(list17, list23);
    java2.util2.Collections.fill((java2.util2.List)arrayList9, (java.lang.Object)list23);
    java2.util2.Collections.sort((java2.util2.List)arrayList9);
    java2.util2.Set set29 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection30 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set29);
    java2.util2.Enumeration enumeration31 = java2.util2.Collections.enumeration((java2.util2.Collection)set29);
    java2.util2.ArrayList arrayList32 = java2.util2.Collections.list(enumeration31);
    java2.util2.Set set34 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection35 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set34);
    java2.util2.Enumeration enumeration36 = java2.util2.Collections.enumeration((java2.util2.Collection)set34);
    java2.util2.ArrayList arrayList37 = java2.util2.Collections.list(enumeration36);
    java2.util2.Collections.fill((java2.util2.List)arrayList32, (java.lang.Object)arrayList37);
    java2.util2.Set set40 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection41 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set40);
    java2.util2.Enumeration enumeration42 = java2.util2.Collections.enumeration((java2.util2.Collection)set40);
    java2.util2.ArrayList arrayList43 = java2.util2.Collections.list(enumeration42);
    java2.util2.List list44 = java2.util2.Collections.singletonList((java.lang.Object)enumeration42);
    java2.util2.List list45 = java2.util2.Collections.unmodifiableList(list44);
    java2.util2.Set set47 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection48 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set47);
    java2.util2.Enumeration enumeration49 = java2.util2.Collections.enumeration((java2.util2.Collection)set47);
    java2.util2.ArrayList arrayList50 = java2.util2.Collections.list(enumeration49);
    java2.util2.List list51 = java2.util2.Collections.singletonList((java.lang.Object)enumeration49);
    java2.util2.List list52 = java2.util2.Collections.unmodifiableList(list51);
    int i53 = java2.util2.Collections.indexOfSubList(list45, list51);
    java2.util2.Collections.fill((java2.util2.List)arrayList37, (java.lang.Object)list51);
    java2.util2.TreeSet treeSet55 = new java2.util2.TreeSet();
    java2.util2.Set set57 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection58 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set57);
    java2.util2.Comparator comparator59 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj60 = java2.util2.Collections.max(collection58, comparator59);
    java.lang.Object[] obj_array61 = new java.lang.Object[] { comparator59};
    java.lang.Object[] obj_array62 = treeSet55.toArray(obj_array61);
    java.lang.Object[] obj_array63 = arrayList37.toArray(obj_array61);
    int i64 = java2.util2.Collections.indexOfSubList((java2.util2.List)arrayList9, (java2.util2.List)arrayList37);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj65 = java2.util2.Collections.min((java2.util2.Collection)arrayList9);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet55.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet55.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet55.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj60 + "' != '" + 10L+ "'", obj60.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == (-1));

  }

  @Test
  public void test216() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test216"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java.lang.Object obj4 = treeSet3.clone();
    java.lang.Object obj5 = treeSet3.clone();
    java2.util2.Set set7 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set7);
    java2.util2.Enumeration enumeration9 = java2.util2.Collections.enumeration((java2.util2.Collection)set7);
    java2.util2.ArrayList arrayList10 = java2.util2.Collections.list(enumeration9);
    java2.util2.ArrayList arrayList11 = java2.util2.Collections.list(enumeration9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet13 = treeSet3.subSet((java.lang.Object)enumeration9, (java.lang.Object)"[1]");
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList11);

  }

  @Test
  public void test217() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test217"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    boolean b2 = treeSet0.add((java.lang.Object)1L);
    java2.util2.Set set4 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set5 = java2.util2.Collections.singleton((java.lang.Object)set4);
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet((java2.util2.Collection)set5);
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet6);
    java.lang.Object obj8 = treeSet7.first();
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.Collection)treeSet7);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b10 = treeSet0.add((java.lang.Object)treeSet9);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[[1.0]]");

  }

  @Test
  public void test218() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test218"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.List list5 = java2.util2.Collections.singletonList((java.lang.Object)enumeration3);
    java2.util2.Collections.reverse(list5);
    java2.util2.Collections.rotate(list5, 10);
    java2.util2.List list9 = java2.util2.Collections.unmodifiableList(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);

  }

  @Test
  public void test219() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test219"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Set set11 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set11);
    java2.util2.Enumeration enumeration13 = java2.util2.Collections.enumeration((java2.util2.Collection)set11);
    java2.util2.ArrayList arrayList14 = java2.util2.Collections.list(enumeration13);
    java2.util2.List list15 = java2.util2.Collections.singletonList((java.lang.Object)enumeration13);
    java2.util2.List list16 = java2.util2.Collections.unmodifiableList(list15);
    java2.util2.Collections.copy((java2.util2.List)arrayList9, list15);
    boolean b18 = arrayList4.containsAll((java2.util2.Collection)arrayList9);
    java2.util2.Collections.sort((java2.util2.List)arrayList9);
    java2.util2.Collections.shuffle((java2.util2.List)arrayList9);
    java2.util2.List list21 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList9);
    java2.util2.Set set23 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection24 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set23);
    java2.util2.Enumeration enumeration25 = java2.util2.Collections.enumeration((java2.util2.Collection)set23);
    java2.util2.ArrayList arrayList26 = java2.util2.Collections.list(enumeration25);
    java2.util2.Set set28 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection29 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set28);
    java2.util2.Enumeration enumeration30 = java2.util2.Collections.enumeration((java2.util2.Collection)set28);
    java2.util2.ArrayList arrayList31 = java2.util2.Collections.list(enumeration30);
    java2.util2.Set set33 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection34 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set33);
    java2.util2.Enumeration enumeration35 = java2.util2.Collections.enumeration((java2.util2.Collection)set33);
    java2.util2.ArrayList arrayList36 = java2.util2.Collections.list(enumeration35);
    java2.util2.List list37 = java2.util2.Collections.singletonList((java.lang.Object)enumeration35);
    java2.util2.List list38 = java2.util2.Collections.unmodifiableList(list37);
    java2.util2.Collections.copy((java2.util2.List)arrayList31, list37);
    boolean b40 = arrayList26.containsAll((java2.util2.Collection)arrayList31);
    java2.util2.Collections.sort((java2.util2.List)arrayList31);
    java2.util2.Collections.shuffle((java2.util2.List)arrayList31);
    java2.util2.List list43 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList31);
    java2.util2.Set set45 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection46 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set45);
    java2.util2.Enumeration enumeration47 = java2.util2.Collections.enumeration((java2.util2.Collection)set45);
    java2.util2.ArrayList arrayList48 = java2.util2.Collections.list(enumeration47);
    java2.util2.Set set50 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection51 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set50);
    java2.util2.Enumeration enumeration52 = java2.util2.Collections.enumeration((java2.util2.Collection)set50);
    java2.util2.ArrayList arrayList53 = java2.util2.Collections.list(enumeration52);
    java2.util2.Collections.fill((java2.util2.List)arrayList48, (java.lang.Object)arrayList53);
    java2.util2.Set set56 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection57 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set56);
    java2.util2.Enumeration enumeration58 = java2.util2.Collections.enumeration((java2.util2.Collection)set56);
    java2.util2.ArrayList arrayList59 = java2.util2.Collections.list(enumeration58);
    java2.util2.List list60 = java2.util2.Collections.singletonList((java.lang.Object)enumeration58);
    java2.util2.List list61 = java2.util2.Collections.unmodifiableList(list60);
    java2.util2.Set set63 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection64 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set63);
    java2.util2.Enumeration enumeration65 = java2.util2.Collections.enumeration((java2.util2.Collection)set63);
    java2.util2.ArrayList arrayList66 = java2.util2.Collections.list(enumeration65);
    java2.util2.List list67 = java2.util2.Collections.singletonList((java.lang.Object)enumeration65);
    java2.util2.List list68 = java2.util2.Collections.unmodifiableList(list67);
    int i69 = java2.util2.Collections.indexOfSubList(list61, list67);
    java2.util2.Collections.fill((java2.util2.List)arrayList53, (java.lang.Object)list67);
    java2.util2.Collections.sort((java2.util2.List)arrayList53);
    java2.util2.Set set73 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Map map74 = java2.util2.Collections.singletonMap((java.lang.Object)arrayList53, (java.lang.Object)10L);
    java2.util2.Collections.fill((java2.util2.List)arrayList31, (java.lang.Object)arrayList53);
    java2.util2.Set set77 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set78 = java2.util2.Collections.singleton((java.lang.Object)set77);
    java2.util2.TreeSet treeSet79 = new java2.util2.TreeSet((java2.util2.Collection)set78);
    java2.util2.TreeSet treeSet80 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet79);
    java2.util2.Set set82 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set83 = java2.util2.Collections.singleton((java.lang.Object)set82);
    java2.util2.TreeSet treeSet84 = new java2.util2.TreeSet((java2.util2.Collection)set83);
    java2.util2.TreeSet treeSet85 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet84);
    boolean b86 = treeSet79.equals((java.lang.Object)treeSet84);
    java2.util2.Collections.fill((java2.util2.List)arrayList31, (java.lang.Object)treeSet79);
    java2.util2.Collections.fill((java2.util2.List)arrayList9, (java.lang.Object)arrayList31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet79.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet79.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet79.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet80.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet80.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet80.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet84.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet84.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet84.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet85.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet85.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet85.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);

  }

  @Test
  public void test220() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test220"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Collections.fill((java2.util2.List)arrayList4, (java.lang.Object)arrayList9);
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set12);
    java2.util2.Enumeration enumeration14 = java2.util2.Collections.enumeration((java2.util2.Collection)set12);
    java2.util2.ArrayList arrayList15 = java2.util2.Collections.list(enumeration14);
    java2.util2.List list16 = java2.util2.Collections.singletonList((java.lang.Object)enumeration14);
    java2.util2.List list17 = java2.util2.Collections.unmodifiableList(list16);
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set19);
    java2.util2.Enumeration enumeration21 = java2.util2.Collections.enumeration((java2.util2.Collection)set19);
    java2.util2.ArrayList arrayList22 = java2.util2.Collections.list(enumeration21);
    java2.util2.List list23 = java2.util2.Collections.singletonList((java.lang.Object)enumeration21);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list23);
    int i25 = java2.util2.Collections.indexOfSubList(list17, list23);
    java2.util2.Collections.fill((java2.util2.List)arrayList9, (java.lang.Object)list23);
    java2.util2.Collections.rotate((java2.util2.List)arrayList9, 0);
    java2.util2.Comparator comparator29 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj30 = java2.util2.Collections.max((java2.util2.Collection)arrayList9, comparator29);
    java2.util2.Comparator comparator31 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort((java2.util2.List)arrayList9, comparator31);
    java2.util2.Set set34 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection35 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set34);
    java2.util2.Enumeration enumeration36 = java2.util2.Collections.enumeration((java2.util2.Collection)set34);
    java2.util2.ArrayList arrayList37 = java2.util2.Collections.list(enumeration36);
    java2.util2.Set set39 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection40 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set39);
    java2.util2.Enumeration enumeration41 = java2.util2.Collections.enumeration((java2.util2.Collection)set39);
    java2.util2.ArrayList arrayList42 = java2.util2.Collections.list(enumeration41);
    java2.util2.Set set44 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection45 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set44);
    java2.util2.Enumeration enumeration46 = java2.util2.Collections.enumeration((java2.util2.Collection)set44);
    java2.util2.ArrayList arrayList47 = java2.util2.Collections.list(enumeration46);
    java2.util2.List list48 = java2.util2.Collections.singletonList((java.lang.Object)enumeration46);
    java2.util2.List list49 = java2.util2.Collections.unmodifiableList(list48);
    java2.util2.Collections.copy((java2.util2.List)arrayList42, list48);
    boolean b51 = arrayList37.containsAll((java2.util2.Collection)arrayList42);
    java2.util2.Collections.sort((java2.util2.List)arrayList42);
    java2.util2.Set set55 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set56 = java2.util2.Collections.singleton((java.lang.Object)set55);
    java2.util2.TreeSet treeSet57 = new java2.util2.TreeSet((java2.util2.Collection)set56);
    java2.util2.TreeSet treeSet58 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet57);
    java.lang.Object obj59 = treeSet58.first();
    java2.util2.TreeSet treeSet60 = new java2.util2.TreeSet((java2.util2.Collection)treeSet58);
    java2.util2.Map map61 = java2.util2.Collections.singletonMap((java.lang.Object)100.0d, (java.lang.Object)treeSet60);
    boolean b62 = java2.util2.Collections.replaceAll((java2.util2.List)arrayList9, (java.lang.Object)arrayList42, (java.lang.Object)100.0d);
    java2.util2.Set set65 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection66 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set65);
    java2.util2.Collection collection67 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)set65);
    java2.util2.Map map68 = java2.util2.Collections.singletonMap((java.lang.Object)(-1), (java.lang.Object)collection67);
    java2.util2.Map map69 = java2.util2.Collections.synchronizedMap(map68);
    java2.util2.Comparator comparator70 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int i71 = java2.util2.Collections.binarySearch((java2.util2.List)arrayList42, (java.lang.Object)map69, comparator70);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet57.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet57.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet57.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet58.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet58.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet58.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet60.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet60.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet60.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator70);

  }

  @Test
  public void test221() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test221"); }


    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet();
    java2.util2.List list2 = java2.util2.Collections.nCopies(10, (java.lang.Object)treeSet1);
    java2.util2.Comparator comparator3 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj4 = java2.util2.Collections.max((java2.util2.Collection)treeSet1, comparator3);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator3);

  }

  @Test
  public void test222() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test222"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java2.util2.Set set5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet3);
    java2.util2.SortedSet sortedSet7 = treeSet3.tailSet((java.lang.Object)0.0d);
    java2.util2.Iterator iterator8 = treeSet3.iterator();
    java2.util2.Set set10 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set11 = java2.util2.Collections.singleton((java.lang.Object)set10);
    java2.util2.TreeSet treeSet12 = new java2.util2.TreeSet((java2.util2.Collection)set11);
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet12);
    java.lang.Object obj14 = treeSet13.first();
    java2.util2.Comparator comparator15 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj16 = java2.util2.Collections.min((java2.util2.Collection)treeSet13, comparator15);
    java.lang.String str17 = treeSet13.toString();
    java2.util2.TreeSet treeSet18 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet13);
    java2.util2.Iterator iterator19 = treeSet13.iterator();
    java2.util2.Map map20 = java2.util2.Collections.singletonMap((java.lang.Object)treeSet3, (java.lang.Object)iterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet12.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet12.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[[1.0]]"+ "'", str17.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet18.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet18.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map20);

  }

  @Test
  public void test223() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test223"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java.lang.Object obj5 = treeSet3.clone();
    java2.util2.Set set7 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set8 = java2.util2.Collections.singleton((java.lang.Object)set7);
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.Collection)set8);
    java2.util2.TreeSet treeSet10 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet9);
    java.lang.Object obj11 = treeSet10.first();
    java2.util2.SortedSet sortedSet13 = treeSet10.tailSet((java.lang.Object)(short)1);
    java2.util2.SortedSet sortedSet15 = treeSet10.tailSet((java.lang.Object)"hi!");
    boolean b16 = treeSet3.equals((java.lang.Object)treeSet10);
    java2.util2.Set set17 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet10.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set17);

  }

  @Test
  public void test224() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test224"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set7 = java2.util2.Collections.singleton((java.lang.Object)set6);
    java2.util2.TreeSet treeSet8 = new java2.util2.TreeSet((java2.util2.Collection)set7);
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet8);
    boolean b10 = treeSet3.equals((java.lang.Object)treeSet8);
    java.lang.Object obj11 = treeSet8.first();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet8.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj11);

  }

  @Test
  public void test225() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test225"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java2.util2.Iterator iterator5 = treeSet4.iterator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b7 = treeSet4.remove((java.lang.Object)(short)10);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);

  }

  @Test
  public void test226() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test226"); }


    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet();
    java2.util2.List list2 = java2.util2.Collections.nCopies(10, (java.lang.Object)treeSet1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(list2);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);

  }

  @Test
  public void test227() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test227"); }


    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set2);
    java2.util2.Enumeration enumeration4 = java2.util2.Collections.enumeration((java2.util2.Collection)set2);
    java2.util2.ArrayList arrayList5 = java2.util2.Collections.list(enumeration4);
    java2.util2.Set set7 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set7);
    java2.util2.Enumeration enumeration9 = java2.util2.Collections.enumeration((java2.util2.Collection)set7);
    java2.util2.ArrayList arrayList10 = java2.util2.Collections.list(enumeration9);
    java2.util2.Collections.fill((java2.util2.List)arrayList5, (java.lang.Object)arrayList10);
    java2.util2.Set set13 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection14 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set13);
    java2.util2.Enumeration enumeration15 = java2.util2.Collections.enumeration((java2.util2.Collection)set13);
    java2.util2.ArrayList arrayList16 = java2.util2.Collections.list(enumeration15);
    java2.util2.Set set18 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection19 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set18);
    java2.util2.Enumeration enumeration20 = java2.util2.Collections.enumeration((java2.util2.Collection)set18);
    java2.util2.ArrayList arrayList21 = java2.util2.Collections.list(enumeration20);
    java2.util2.Collections.fill((java2.util2.List)arrayList16, (java.lang.Object)arrayList21);
    java2.util2.Set set24 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection25 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set24);
    java2.util2.Enumeration enumeration26 = java2.util2.Collections.enumeration((java2.util2.Collection)set24);
    java2.util2.ArrayList arrayList27 = java2.util2.Collections.list(enumeration26);
    java2.util2.List list28 = java2.util2.Collections.singletonList((java.lang.Object)enumeration26);
    java2.util2.List list29 = java2.util2.Collections.unmodifiableList(list28);
    java2.util2.Set set31 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection32 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set31);
    java2.util2.Enumeration enumeration33 = java2.util2.Collections.enumeration((java2.util2.Collection)set31);
    java2.util2.ArrayList arrayList34 = java2.util2.Collections.list(enumeration33);
    java2.util2.List list35 = java2.util2.Collections.singletonList((java.lang.Object)enumeration33);
    java2.util2.List list36 = java2.util2.Collections.unmodifiableList(list35);
    int i37 = java2.util2.Collections.indexOfSubList(list29, list35);
    java2.util2.Collections.fill((java2.util2.List)arrayList21, (java.lang.Object)list35);
    java2.util2.Collections.shuffle(list35);
    java2.util2.Collections.copy((java2.util2.List)arrayList10, list35);
    java2.util2.List list41 = java2.util2.Collections.nCopies(100, (java.lang.Object)arrayList10);
    java2.util2.Set set43 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection44 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set43);
    java2.util2.Enumeration enumeration45 = java2.util2.Collections.enumeration((java2.util2.Collection)set43);
    java2.util2.ArrayList arrayList46 = java2.util2.Collections.list(enumeration45);
    java2.util2.Set set48 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection49 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set48);
    java2.util2.Enumeration enumeration50 = java2.util2.Collections.enumeration((java2.util2.Collection)set48);
    java2.util2.ArrayList arrayList51 = java2.util2.Collections.list(enumeration50);
    java2.util2.Collections.fill((java2.util2.List)arrayList46, (java.lang.Object)arrayList51);
    java2.util2.Set set54 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection55 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set54);
    java2.util2.Enumeration enumeration56 = java2.util2.Collections.enumeration((java2.util2.Collection)set54);
    java2.util2.ArrayList arrayList57 = java2.util2.Collections.list(enumeration56);
    java2.util2.List list58 = java2.util2.Collections.singletonList((java.lang.Object)enumeration56);
    java2.util2.List list59 = java2.util2.Collections.unmodifiableList(list58);
    java2.util2.Set set61 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection62 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set61);
    java2.util2.Enumeration enumeration63 = java2.util2.Collections.enumeration((java2.util2.Collection)set61);
    java2.util2.ArrayList arrayList64 = java2.util2.Collections.list(enumeration63);
    java2.util2.List list65 = java2.util2.Collections.singletonList((java.lang.Object)enumeration63);
    java2.util2.List list66 = java2.util2.Collections.unmodifiableList(list65);
    int i67 = java2.util2.Collections.indexOfSubList(list59, list65);
    java2.util2.Collections.fill((java2.util2.List)arrayList51, (java.lang.Object)list65);
    java2.util2.Collections.rotate((java2.util2.List)arrayList51, 0);
    java2.util2.Comparator comparator71 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj72 = java2.util2.Collections.max((java2.util2.Collection)arrayList51, comparator71);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int i73 = java2.util2.Collections.binarySearch((java2.util2.List)arrayList10, (java.lang.Object)arrayList51);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj72);

  }

  @Test
  public void test228() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test228"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java.lang.Object obj5 = treeSet4.first();
    java2.util2.SortedSet sortedSet7 = treeSet4.tailSet((java.lang.Object)(short)1);
    java2.util2.TreeSet treeSet8 = new java2.util2.TreeSet();
    java2.util2.Set set10 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection11 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set10);
    boolean b12 = treeSet8.removeAll(collection11);
    boolean b13 = treeSet4.containsAll((java2.util2.Collection)treeSet8);
    java2.util2.Iterator iterator14 = treeSet4.iterator();
    java2.util2.List list15 = java2.util2.Collections.singletonList((java.lang.Object)iterator14);
    java2.util2.Set set17 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection18 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set17);
    java2.util2.Enumeration enumeration19 = java2.util2.Collections.enumeration((java2.util2.Collection)set17);
    java2.util2.ArrayList arrayList20 = java2.util2.Collections.list(enumeration19);
    java2.util2.List list21 = java2.util2.Collections.singletonList((java.lang.Object)enumeration19);
    java2.util2.List list22 = java2.util2.Collections.unmodifiableList(list21);
    java2.util2.List list23 = java2.util2.Collections.unmodifiableList(list21);
    java2.util2.Collection collection24 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list21);
    java2.util2.Collections.rotate(list21, (-1));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int i27 = java2.util2.Collections.binarySearch(list15, (java.lang.Object)(-1));
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet8.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection24);

  }

  @Test
  public void test229() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test229"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Collections.fill((java2.util2.List)arrayList4, (java.lang.Object)arrayList9);
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set12);
    java2.util2.Enumeration enumeration14 = java2.util2.Collections.enumeration((java2.util2.Collection)set12);
    java2.util2.ArrayList arrayList15 = java2.util2.Collections.list(enumeration14);
    java2.util2.List list16 = java2.util2.Collections.singletonList((java.lang.Object)enumeration14);
    java2.util2.List list17 = java2.util2.Collections.unmodifiableList(list16);
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set19);
    java2.util2.Enumeration enumeration21 = java2.util2.Collections.enumeration((java2.util2.Collection)set19);
    java2.util2.ArrayList arrayList22 = java2.util2.Collections.list(enumeration21);
    java2.util2.List list23 = java2.util2.Collections.singletonList((java.lang.Object)enumeration21);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list23);
    int i25 = java2.util2.Collections.indexOfSubList(list17, list23);
    java2.util2.Collections.fill((java2.util2.List)arrayList9, (java.lang.Object)list23);
    java2.util2.Collections.rotate((java2.util2.List)arrayList9, 0);
    java2.util2.Comparator comparator29 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj30 = java2.util2.Collections.max((java2.util2.Collection)arrayList9, comparator29);
    java2.util2.Collections.reverse((java2.util2.List)arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);

  }

  @Test
  public void test230() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test230"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java2.util2.Set set5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet3);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet3);
    java.lang.Object obj7 = treeSet3.clone();
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet();
    java2.util2.TreeSet treeSet10 = new java2.util2.TreeSet();
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set12);
    boolean b14 = treeSet10.removeAll(collection13);
    java2.util2.Comparator comparator15 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj16 = java2.util2.Collections.max(collection13, comparator15);
    boolean b17 = treeSet9.containsAll(collection13);
    java2.util2.List list18 = java2.util2.Collections.nCopies(10, (java.lang.Object)collection13);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b19 = treeSet3.remove((java.lang.Object)list18);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet10.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 10L+ "'", obj16.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);

  }

  @Test
  public void test231() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test231"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java2.util2.Set set5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet3);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet3);
    java.lang.Object obj7 = treeSet3.clone();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj8 = java2.util2.Collections.min((java2.util2.Collection)treeSet3);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj7);

  }

  @Test
  public void test232() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test232"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.List list5 = java2.util2.Collections.singletonList((java.lang.Object)enumeration3);
    java2.util2.List list6 = java2.util2.Collections.unmodifiableList(list5);
    java2.util2.Set set8 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set8);
    java2.util2.Enumeration enumeration10 = java2.util2.Collections.enumeration((java2.util2.Collection)set8);
    java2.util2.ArrayList arrayList11 = java2.util2.Collections.list(enumeration10);
    java2.util2.List list12 = java2.util2.Collections.singletonList((java.lang.Object)enumeration10);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list12);
    int i14 = java2.util2.Collections.indexOfSubList(list6, list12);
    java2.util2.Comparator comparator15 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj16 = java2.util2.Collections.max((java2.util2.Collection)list12, comparator15);
    java2.util2.Set set18 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection19 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set18);
    java2.util2.Enumeration enumeration20 = java2.util2.Collections.enumeration((java2.util2.Collection)set18);
    java2.util2.ArrayList arrayList21 = java2.util2.Collections.list(enumeration20);
    java2.util2.Set set23 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection24 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set23);
    java2.util2.Enumeration enumeration25 = java2.util2.Collections.enumeration((java2.util2.Collection)set23);
    java2.util2.ArrayList arrayList26 = java2.util2.Collections.list(enumeration25);
    java2.util2.Collections.fill((java2.util2.List)arrayList21, (java.lang.Object)arrayList26);
    java2.util2.Set set29 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection30 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set29);
    java2.util2.Enumeration enumeration31 = java2.util2.Collections.enumeration((java2.util2.Collection)set29);
    java2.util2.ArrayList arrayList32 = java2.util2.Collections.list(enumeration31);
    java2.util2.List list33 = java2.util2.Collections.singletonList((java.lang.Object)enumeration31);
    java2.util2.List list34 = java2.util2.Collections.unmodifiableList(list33);
    java2.util2.Set set36 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection37 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set36);
    java2.util2.Enumeration enumeration38 = java2.util2.Collections.enumeration((java2.util2.Collection)set36);
    java2.util2.ArrayList arrayList39 = java2.util2.Collections.list(enumeration38);
    java2.util2.List list40 = java2.util2.Collections.singletonList((java.lang.Object)enumeration38);
    java2.util2.List list41 = java2.util2.Collections.unmodifiableList(list40);
    int i42 = java2.util2.Collections.indexOfSubList(list34, list40);
    java2.util2.Collections.fill((java2.util2.List)arrayList26, (java.lang.Object)list40);
    java2.util2.Collections.rotate((java2.util2.List)arrayList26, 0);
    java2.util2.Comparator comparator46 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort((java2.util2.List)arrayList26, comparator46);
    java2.util2.Collections.rotate((java2.util2.List)arrayList26, 1);
    int i50 = java2.util2.Collections.lastIndexOfSubList(list12, (java2.util2.List)arrayList26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == (-1));

  }

  @Test
  public void test233() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test233"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Set set11 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set11);
    java2.util2.Enumeration enumeration13 = java2.util2.Collections.enumeration((java2.util2.Collection)set11);
    java2.util2.ArrayList arrayList14 = java2.util2.Collections.list(enumeration13);
    java2.util2.List list15 = java2.util2.Collections.singletonList((java.lang.Object)enumeration13);
    java2.util2.List list16 = java2.util2.Collections.unmodifiableList(list15);
    java2.util2.Collections.copy((java2.util2.List)arrayList9, list15);
    boolean b18 = arrayList4.containsAll((java2.util2.Collection)arrayList9);
    java2.util2.Collections.sort((java2.util2.List)arrayList9);
    java2.util2.Collections.shuffle((java2.util2.List)arrayList9);
    java2.util2.List list21 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList9);
    java2.util2.Set set23 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection24 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set23);
    java2.util2.Enumeration enumeration25 = java2.util2.Collections.enumeration((java2.util2.Collection)set23);
    java2.util2.ArrayList arrayList26 = java2.util2.Collections.list(enumeration25);
    java2.util2.Set set28 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection29 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set28);
    java2.util2.Enumeration enumeration30 = java2.util2.Collections.enumeration((java2.util2.Collection)set28);
    java2.util2.ArrayList arrayList31 = java2.util2.Collections.list(enumeration30);
    java2.util2.Set set33 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection34 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set33);
    java2.util2.Enumeration enumeration35 = java2.util2.Collections.enumeration((java2.util2.Collection)set33);
    java2.util2.ArrayList arrayList36 = java2.util2.Collections.list(enumeration35);
    java2.util2.List list37 = java2.util2.Collections.singletonList((java.lang.Object)enumeration35);
    java2.util2.List list38 = java2.util2.Collections.unmodifiableList(list37);
    java2.util2.Collections.copy((java2.util2.List)arrayList31, list37);
    boolean b40 = arrayList26.containsAll((java2.util2.Collection)arrayList31);
    java2.util2.Set set42 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection43 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set42);
    java2.util2.Enumeration enumeration44 = java2.util2.Collections.enumeration((java2.util2.Collection)set42);
    java2.util2.ArrayList arrayList45 = java2.util2.Collections.list(enumeration44);
    java2.util2.Set set47 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection48 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set47);
    java2.util2.Enumeration enumeration49 = java2.util2.Collections.enumeration((java2.util2.Collection)set47);
    java2.util2.ArrayList arrayList50 = java2.util2.Collections.list(enumeration49);
    java2.util2.Collections.fill((java2.util2.List)arrayList45, (java.lang.Object)arrayList50);
    java2.util2.Set set53 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection54 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set53);
    java2.util2.Enumeration enumeration55 = java2.util2.Collections.enumeration((java2.util2.Collection)set53);
    java2.util2.ArrayList arrayList56 = java2.util2.Collections.list(enumeration55);
    java2.util2.List list57 = java2.util2.Collections.singletonList((java.lang.Object)enumeration55);
    java2.util2.List list58 = java2.util2.Collections.unmodifiableList(list57);
    java2.util2.Set set60 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection61 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set60);
    java2.util2.Enumeration enumeration62 = java2.util2.Collections.enumeration((java2.util2.Collection)set60);
    java2.util2.ArrayList arrayList63 = java2.util2.Collections.list(enumeration62);
    java2.util2.List list64 = java2.util2.Collections.singletonList((java.lang.Object)enumeration62);
    java2.util2.List list65 = java2.util2.Collections.unmodifiableList(list64);
    int i66 = java2.util2.Collections.indexOfSubList(list58, list64);
    java2.util2.Collections.fill((java2.util2.List)arrayList50, (java.lang.Object)list64);
    java2.util2.Collections.rotate((java2.util2.List)arrayList50, 0);
    java2.util2.Set set72 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection73 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set72);
    java2.util2.Enumeration enumeration74 = java2.util2.Collections.enumeration((java2.util2.Collection)set72);
    java2.util2.ArrayList arrayList75 = java2.util2.Collections.list(enumeration74);
    java2.util2.Set set77 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection78 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set77);
    java2.util2.Enumeration enumeration79 = java2.util2.Collections.enumeration((java2.util2.Collection)set77);
    java2.util2.ArrayList arrayList80 = java2.util2.Collections.list(enumeration79);
    java2.util2.List list81 = java2.util2.Collections.singletonList((java.lang.Object)enumeration79);
    java2.util2.List list82 = java2.util2.Collections.unmodifiableList(list81);
    java2.util2.Collections.copy((java2.util2.List)arrayList75, list81);
    boolean b84 = java2.util2.Collections.replaceAll((java2.util2.List)arrayList50, (java.lang.Object)(byte)10, (java.lang.Object)list81);
    java2.util2.Collections.shuffle((java2.util2.List)arrayList50);
    java2.util2.Collections.copy((java2.util2.List)arrayList26, (java2.util2.List)arrayList50);
    java2.util2.Collections.copy((java2.util2.List)arrayList9, (java2.util2.List)arrayList26);
    java2.util2.Comparator comparator88 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort((java2.util2.List)arrayList26, comparator88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator88);

  }

  @Test
  public void test234() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test234"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.List list5 = java2.util2.Collections.singletonList((java.lang.Object)enumeration3);
    java2.util2.List list6 = java2.util2.Collections.unmodifiableList(list5);
    java2.util2.Set set8 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set8);
    java2.util2.Enumeration enumeration10 = java2.util2.Collections.enumeration((java2.util2.Collection)set8);
    java2.util2.ArrayList arrayList11 = java2.util2.Collections.list(enumeration10);
    java2.util2.List list12 = java2.util2.Collections.singletonList((java.lang.Object)enumeration10);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list12);
    int i14 = java2.util2.Collections.indexOfSubList(list6, list12);
    java2.util2.Collections.rotate(list12, (-2));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test235() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test235"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java2.util2.Set set5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet3);
    java2.util2.List list6 = java2.util2.Collections.singletonList((java.lang.Object)treeSet3);
    java2.util2.Iterator iterator7 = treeSet3.iterator();
    java2.util2.Iterator iterator8 = treeSet3.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);

  }

  @Test
  public void test236() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test236"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Collections.fill((java2.util2.List)arrayList4, (java.lang.Object)arrayList9);
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set12);
    java2.util2.Enumeration enumeration14 = java2.util2.Collections.enumeration((java2.util2.Collection)set12);
    java2.util2.ArrayList arrayList15 = java2.util2.Collections.list(enumeration14);
    java2.util2.List list16 = java2.util2.Collections.singletonList((java.lang.Object)enumeration14);
    java2.util2.List list17 = java2.util2.Collections.unmodifiableList(list16);
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set19);
    java2.util2.Enumeration enumeration21 = java2.util2.Collections.enumeration((java2.util2.Collection)set19);
    java2.util2.ArrayList arrayList22 = java2.util2.Collections.list(enumeration21);
    java2.util2.List list23 = java2.util2.Collections.singletonList((java.lang.Object)enumeration21);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list23);
    int i25 = java2.util2.Collections.indexOfSubList(list17, list23);
    java2.util2.Collections.fill((java2.util2.List)arrayList9, (java.lang.Object)list23);
    java2.util2.List list27 = java2.util2.Collections.synchronizedList((java2.util2.List)arrayList9);
    java2.util2.Set set29 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection30 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set29);
    java2.util2.Enumeration enumeration31 = java2.util2.Collections.enumeration((java2.util2.Collection)set29);
    java2.util2.ArrayList arrayList32 = java2.util2.Collections.list(enumeration31);
    java2.util2.Set set34 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection35 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set34);
    java2.util2.Enumeration enumeration36 = java2.util2.Collections.enumeration((java2.util2.Collection)set34);
    java2.util2.ArrayList arrayList37 = java2.util2.Collections.list(enumeration36);
    java2.util2.Collections.fill((java2.util2.List)arrayList32, (java.lang.Object)arrayList37);
    java2.util2.Set set40 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection41 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set40);
    java2.util2.Enumeration enumeration42 = java2.util2.Collections.enumeration((java2.util2.Collection)set40);
    java2.util2.ArrayList arrayList43 = java2.util2.Collections.list(enumeration42);
    java2.util2.List list44 = java2.util2.Collections.singletonList((java.lang.Object)enumeration42);
    java2.util2.List list45 = java2.util2.Collections.unmodifiableList(list44);
    java2.util2.Set set47 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection48 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set47);
    java2.util2.Enumeration enumeration49 = java2.util2.Collections.enumeration((java2.util2.Collection)set47);
    java2.util2.ArrayList arrayList50 = java2.util2.Collections.list(enumeration49);
    java2.util2.List list51 = java2.util2.Collections.singletonList((java.lang.Object)enumeration49);
    java2.util2.List list52 = java2.util2.Collections.unmodifiableList(list51);
    int i53 = java2.util2.Collections.indexOfSubList(list45, list51);
    java2.util2.Collections.fill((java2.util2.List)arrayList37, (java.lang.Object)list51);
    java2.util2.Collections.rotate((java2.util2.List)arrayList37, 0);
    java2.util2.TreeSet treeSet57 = new java2.util2.TreeSet((java2.util2.Collection)arrayList37);
    java2.util2.Set set59 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set60 = java2.util2.Collections.singleton((java.lang.Object)set59);
    java2.util2.TreeSet treeSet61 = new java2.util2.TreeSet((java2.util2.Collection)set60);
    java2.util2.TreeSet treeSet62 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet61);
    java2.util2.Set set63 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet61);
    java2.util2.List list64 = java2.util2.Collections.singletonList((java.lang.Object)treeSet61);
    boolean b65 = java2.util2.Collections.replaceAll((java2.util2.List)arrayList9, (java.lang.Object)arrayList37, (java.lang.Object)treeSet61);
    java.lang.String str66 = arrayList9.toString();
    java2.util2.Collections.sort((java2.util2.List)arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet57.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet57.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet61.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet61.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet61.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet62.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet62.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet62.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);

  }

  @Test
  public void test237() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test237"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java2.util2.Set set5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet3);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet3);
    java.lang.Object obj7 = treeSet3.clone();
    java.lang.Object obj8 = treeSet3.clone();
    java.lang.Object obj9 = treeSet3.last();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj9);

  }

  @Test
  public void test238() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test238"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Collections.fill((java2.util2.List)arrayList4, (java.lang.Object)arrayList9);
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set12);
    java2.util2.Enumeration enumeration14 = java2.util2.Collections.enumeration((java2.util2.Collection)set12);
    java2.util2.ArrayList arrayList15 = java2.util2.Collections.list(enumeration14);
    java2.util2.List list16 = java2.util2.Collections.singletonList((java.lang.Object)enumeration14);
    java2.util2.List list17 = java2.util2.Collections.unmodifiableList(list16);
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set19);
    java2.util2.Enumeration enumeration21 = java2.util2.Collections.enumeration((java2.util2.Collection)set19);
    java2.util2.ArrayList arrayList22 = java2.util2.Collections.list(enumeration21);
    java2.util2.List list23 = java2.util2.Collections.singletonList((java.lang.Object)enumeration21);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list23);
    int i25 = java2.util2.Collections.indexOfSubList(list17, list23);
    java2.util2.Collections.fill((java2.util2.List)arrayList9, (java.lang.Object)list23);
    java2.util2.Collections.rotate((java2.util2.List)arrayList9, 0);
    java2.util2.Comparator comparator29 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort((java2.util2.List)arrayList9, comparator29);
    java2.util2.TreeSet treeSet31 = new java2.util2.TreeSet((java2.util2.Collection)arrayList9);
    java2.util2.Set set34 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set35 = java2.util2.Collections.singleton((java.lang.Object)set34);
    java2.util2.Enumeration enumeration36 = java2.util2.Collections.enumeration((java2.util2.Collection)set34);
    java2.util2.Map map37 = java2.util2.Collections.singletonMap((java.lang.Object)10.0f, (java.lang.Object)enumeration36);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet38 = treeSet31.tailSet((java.lang.Object)enumeration36);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet31.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet31.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map37);

  }

  @Test
  public void test239() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test239"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java.lang.Object obj5 = treeSet4.first();
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet((java2.util2.Collection)treeSet4);
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[[1.0]]");

  }

  @Test
  public void test240() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test240"); }


    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet4);
    java.lang.Object obj6 = treeSet5.first();
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet((java2.util2.Collection)treeSet5);
    java2.util2.Map map8 = java2.util2.Collections.singletonMap((java.lang.Object)100.0d, (java.lang.Object)treeSet7);
    java2.util2.Map map9 = java2.util2.Collections.unmodifiableMap(map8);
    java2.util2.Map map10 = java2.util2.Collections.synchronizedMap(map8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map10);

  }

  @Test
  public void test241() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test241"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java2.util2.Set set5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet3);
    java2.util2.SortedSet sortedSet7 = treeSet3.tailSet((java.lang.Object)0.0d);
    java2.util2.Iterator iterator8 = treeSet3.iterator();
    java2.util2.Set set11 = java2.util2.Collections.singleton((java.lang.Object)' ');
    java2.util2.List list12 = java2.util2.Collections.nCopies(100, (java.lang.Object)set11);
    java2.util2.Set set14 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection15 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set14);
    java2.util2.Enumeration enumeration16 = java2.util2.Collections.enumeration((java2.util2.Collection)set14);
    java2.util2.ArrayList arrayList17 = java2.util2.Collections.list(enumeration16);
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set19);
    java2.util2.Enumeration enumeration21 = java2.util2.Collections.enumeration((java2.util2.Collection)set19);
    java2.util2.ArrayList arrayList22 = java2.util2.Collections.list(enumeration21);
    java2.util2.Collections.fill((java2.util2.List)arrayList17, (java.lang.Object)arrayList22);
    java2.util2.Set set25 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection26 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set25);
    java2.util2.Enumeration enumeration27 = java2.util2.Collections.enumeration((java2.util2.Collection)set25);
    java2.util2.ArrayList arrayList28 = java2.util2.Collections.list(enumeration27);
    java2.util2.List list29 = java2.util2.Collections.singletonList((java.lang.Object)enumeration27);
    java2.util2.List list30 = java2.util2.Collections.unmodifiableList(list29);
    java2.util2.Set set32 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection33 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set32);
    java2.util2.Enumeration enumeration34 = java2.util2.Collections.enumeration((java2.util2.Collection)set32);
    java2.util2.ArrayList arrayList35 = java2.util2.Collections.list(enumeration34);
    java2.util2.List list36 = java2.util2.Collections.singletonList((java.lang.Object)enumeration34);
    java2.util2.List list37 = java2.util2.Collections.unmodifiableList(list36);
    int i38 = java2.util2.Collections.indexOfSubList(list30, list36);
    java2.util2.Collections.fill((java2.util2.List)arrayList22, (java.lang.Object)list36);
    int i40 = java2.util2.Collections.indexOfSubList(list12, list36);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b41 = treeSet3.add((java.lang.Object)list36);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == (-1));

  }

  @Test
  public void test242() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test242"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java.lang.Object obj5 = treeSet4.first();
    java2.util2.Comparator comparator6 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj7 = java2.util2.Collections.min((java2.util2.Collection)treeSet4, comparator6);
    java.lang.String str8 = treeSet4.toString();
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet4);
    java2.util2.Set set10 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet9);
    java2.util2.TreeSet treeSet11 = new java2.util2.TreeSet();
    boolean b13 = treeSet11.add((java.lang.Object)1L);
    java2.util2.TreeSet treeSet14 = new java2.util2.TreeSet();
    java2.util2.TreeSet treeSet15 = new java2.util2.TreeSet();
    java2.util2.Set set17 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection18 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set17);
    boolean b19 = treeSet15.removeAll(collection18);
    java2.util2.Comparator comparator20 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj21 = java2.util2.Collections.max(collection18, comparator20);
    boolean b22 = treeSet14.containsAll(collection18);
    boolean b23 = treeSet11.removeAll(collection18);
    java2.util2.Collection collection24 = java2.util2.Collections.unmodifiableCollection(collection18);
    java.lang.Object obj25 = java2.util2.Collections.min(collection18);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b26 = treeSet9.addAll(collection18);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[[1.0]]"+ "'", str8.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet11.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet11.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet11.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet14.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet15.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + 10L+ "'", obj21.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + 10L+ "'", obj25.equals(10L));

  }

  @Test
  public void test243() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test243"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set7 = java2.util2.Collections.singleton((java.lang.Object)set6);
    java2.util2.TreeSet treeSet8 = new java2.util2.TreeSet((java2.util2.Collection)set7);
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet8);
    boolean b10 = treeSet3.equals((java.lang.Object)treeSet8);
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set12);
    java2.util2.Enumeration enumeration14 = java2.util2.Collections.enumeration((java2.util2.Collection)set12);
    java2.util2.ArrayList arrayList15 = java2.util2.Collections.list(enumeration14);
    java2.util2.Set set17 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection18 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set17);
    java2.util2.Enumeration enumeration19 = java2.util2.Collections.enumeration((java2.util2.Collection)set17);
    java2.util2.ArrayList arrayList20 = java2.util2.Collections.list(enumeration19);
    java2.util2.Collections.fill((java2.util2.List)arrayList15, (java.lang.Object)arrayList20);
    java2.util2.Set set23 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection24 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set23);
    java2.util2.Enumeration enumeration25 = java2.util2.Collections.enumeration((java2.util2.Collection)set23);
    java2.util2.ArrayList arrayList26 = java2.util2.Collections.list(enumeration25);
    java2.util2.List list27 = java2.util2.Collections.singletonList((java.lang.Object)enumeration25);
    java2.util2.List list28 = java2.util2.Collections.unmodifiableList(list27);
    java2.util2.Set set30 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection31 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set30);
    java2.util2.Enumeration enumeration32 = java2.util2.Collections.enumeration((java2.util2.Collection)set30);
    java2.util2.ArrayList arrayList33 = java2.util2.Collections.list(enumeration32);
    java2.util2.List list34 = java2.util2.Collections.singletonList((java.lang.Object)enumeration32);
    java2.util2.List list35 = java2.util2.Collections.unmodifiableList(list34);
    int i36 = java2.util2.Collections.indexOfSubList(list28, list34);
    java2.util2.Collections.fill((java2.util2.List)arrayList20, (java.lang.Object)list34);
    java2.util2.Collections.sort((java2.util2.List)arrayList20);
    java2.util2.Comparator comparator39 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj40 = java2.util2.Collections.max((java2.util2.Collection)arrayList20, comparator39);
    boolean b41 = treeSet8.equals(obj40);
    java2.util2.SortedSet sortedSet42 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet8.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet42);

  }

  @Test
  public void test244() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test244"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    boolean b4 = treeSet3.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test245() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test245"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Collections.fill((java2.util2.List)arrayList4, (java.lang.Object)arrayList9);
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set12);
    java2.util2.Enumeration enumeration14 = java2.util2.Collections.enumeration((java2.util2.Collection)set12);
    java2.util2.ArrayList arrayList15 = java2.util2.Collections.list(enumeration14);
    java2.util2.List list16 = java2.util2.Collections.singletonList((java.lang.Object)enumeration14);
    java2.util2.List list17 = java2.util2.Collections.unmodifiableList(list16);
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set19);
    java2.util2.Enumeration enumeration21 = java2.util2.Collections.enumeration((java2.util2.Collection)set19);
    java2.util2.ArrayList arrayList22 = java2.util2.Collections.list(enumeration21);
    java2.util2.List list23 = java2.util2.Collections.singletonList((java.lang.Object)enumeration21);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list23);
    int i25 = java2.util2.Collections.indexOfSubList(list17, list23);
    java2.util2.Collections.fill((java2.util2.List)arrayList9, (java.lang.Object)list23);
    java2.util2.Enumeration enumeration27 = java2.util2.Collections.enumeration((java2.util2.Collection)list23);
    java2.util2.Set set29 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set30 = java2.util2.Collections.singleton((java.lang.Object)set29);
    java2.util2.TreeSet treeSet31 = new java2.util2.TreeSet((java2.util2.Collection)set30);
    java2.util2.TreeSet treeSet32 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet31);
    java2.util2.Set set34 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set35 = java2.util2.Collections.singleton((java.lang.Object)set34);
    java2.util2.TreeSet treeSet36 = new java2.util2.TreeSet((java2.util2.Collection)set35);
    java2.util2.TreeSet treeSet37 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet36);
    java2.util2.Set set38 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet36);
    java2.util2.List list39 = java2.util2.Collections.singletonList((java.lang.Object)treeSet36);
    boolean b40 = treeSet31.retainAll((java2.util2.Collection)list39);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.copy(list23, list39);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet31.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet31.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet31.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet32.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet32.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet32.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet36.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet36.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet36.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet37.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet37.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet37.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);

  }

  @Test
  public void test246() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test246"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java.lang.Object obj4 = treeSet3.clone();
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set7 = java2.util2.Collections.singleton((java.lang.Object)set6);
    java2.util2.TreeSet treeSet8 = new java2.util2.TreeSet((java2.util2.Collection)set7);
    java.lang.Object obj9 = treeSet8.last();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet10 = treeSet3.tailSet((java.lang.Object)treeSet8);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet8.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj9);

  }

  @Test
  public void test247() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test247"); }


    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set2);
    java2.util2.Comparator comparator4 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj5 = java2.util2.Collections.max(collection3, comparator4);
    java.lang.Object obj6 = java2.util2.Collections.min(collection3);
    java2.util2.Enumeration enumeration7 = java2.util2.Collections.enumeration(collection3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.List list8 = java2.util2.Collections.nCopies((-1), (java.lang.Object)enumeration7);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 10L+ "'", obj5.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10L+ "'", obj6.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration7);

  }

  @Test
  public void test248() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test248"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.List list10 = java2.util2.Collections.singletonList((java.lang.Object)enumeration8);
    boolean b11 = arrayList4.retainAll((java2.util2.Collection)list10);
    java2.util2.Collections.rotate(list10, 100);
    java2.util2.Collections.shuffle(list10);
    java2.util2.Collections.reverse(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);

  }

  @Test
  public void test249() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test249"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Collections.fill((java2.util2.List)arrayList4, (java.lang.Object)arrayList9);
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set12);
    java2.util2.Enumeration enumeration14 = java2.util2.Collections.enumeration((java2.util2.Collection)set12);
    java2.util2.ArrayList arrayList15 = java2.util2.Collections.list(enumeration14);
    java2.util2.List list16 = java2.util2.Collections.singletonList((java.lang.Object)enumeration14);
    java2.util2.List list17 = java2.util2.Collections.unmodifiableList(list16);
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set19);
    java2.util2.Enumeration enumeration21 = java2.util2.Collections.enumeration((java2.util2.Collection)set19);
    java2.util2.ArrayList arrayList22 = java2.util2.Collections.list(enumeration21);
    java2.util2.List list23 = java2.util2.Collections.singletonList((java.lang.Object)enumeration21);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list23);
    int i25 = java2.util2.Collections.indexOfSubList(list17, list23);
    java2.util2.Collections.fill((java2.util2.List)arrayList9, (java.lang.Object)list23);
    java2.util2.Collections.rotate((java2.util2.List)arrayList9, 0);
    java2.util2.Set set31 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection32 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set31);
    java2.util2.Enumeration enumeration33 = java2.util2.Collections.enumeration((java2.util2.Collection)set31);
    java2.util2.ArrayList arrayList34 = java2.util2.Collections.list(enumeration33);
    java2.util2.Set set36 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection37 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set36);
    java2.util2.Enumeration enumeration38 = java2.util2.Collections.enumeration((java2.util2.Collection)set36);
    java2.util2.ArrayList arrayList39 = java2.util2.Collections.list(enumeration38);
    java2.util2.List list40 = java2.util2.Collections.singletonList((java.lang.Object)enumeration38);
    java2.util2.List list41 = java2.util2.Collections.unmodifiableList(list40);
    java2.util2.Collections.copy((java2.util2.List)arrayList34, list40);
    boolean b43 = java2.util2.Collections.replaceAll((java2.util2.List)arrayList9, (java.lang.Object)(byte)10, (java.lang.Object)list40);
    java2.util2.Collections.shuffle((java2.util2.List)arrayList9);
    java2.util2.Enumeration enumeration45 = java2.util2.Collections.enumeration((java2.util2.Collection)arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration45);

  }

  @Test
  public void test250() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test250"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java.lang.Object obj5 = treeSet3.clone();
    java2.util2.Set set7 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set8 = java2.util2.Collections.singleton((java.lang.Object)set7);
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.Collection)set8);
    java2.util2.TreeSet treeSet10 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet9);
    java.lang.Object obj11 = treeSet10.first();
    java2.util2.SortedSet sortedSet13 = treeSet10.tailSet((java.lang.Object)(short)1);
    java2.util2.SortedSet sortedSet15 = treeSet10.tailSet((java.lang.Object)"hi!");
    boolean b16 = treeSet3.equals((java.lang.Object)treeSet10);
    treeSet3.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet10.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test251() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test251"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java.lang.Object obj5 = treeSet4.first();
    java2.util2.Iterator iterator6 = treeSet4.iterator();
    java.lang.Object obj7 = treeSet4.last();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj7);

  }

  @Test
  public void test252() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test252"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java.lang.Object obj4 = treeSet3.clone();
    java.lang.Object obj5 = treeSet3.first();
    java.lang.String str6 = treeSet3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[[1.0]]"+ "'", str6.equals("[[1.0]]"));

  }

  @Test
  public void test253() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test253"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java.lang.Object obj5 = treeSet4.first();
    java2.util2.SortedSet sortedSet7 = treeSet4.tailSet((java.lang.Object)(short)1);
    java2.util2.SortedSet sortedSet9 = treeSet4.tailSet((java.lang.Object)"hi!");
    java.lang.Object obj10 = treeSet4.last();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj10);

  }

  @Test
  public void test254() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test254"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.List list5 = java2.util2.Collections.singletonList((java.lang.Object)enumeration3);
    java2.util2.Comparator comparator6 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(list5, comparator6);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator6);

  }

  @Test
  public void test255() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test255"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.List list10 = java2.util2.Collections.singletonList((java.lang.Object)enumeration8);
    java2.util2.List list11 = java2.util2.Collections.unmodifiableList(list10);
    java2.util2.Collections.copy((java2.util2.List)arrayList4, list10);
    java2.util2.Set set15 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection16 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set15);
    java2.util2.Enumeration enumeration17 = java2.util2.Collections.enumeration((java2.util2.Collection)set15);
    java2.util2.ArrayList arrayList18 = java2.util2.Collections.list(enumeration17);
    java2.util2.Set set20 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection21 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set20);
    java2.util2.Enumeration enumeration22 = java2.util2.Collections.enumeration((java2.util2.Collection)set20);
    java2.util2.ArrayList arrayList23 = java2.util2.Collections.list(enumeration22);
    java2.util2.Collections.fill((java2.util2.List)arrayList18, (java.lang.Object)arrayList23);
    java2.util2.Set set26 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection27 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set26);
    java2.util2.Enumeration enumeration28 = java2.util2.Collections.enumeration((java2.util2.Collection)set26);
    java2.util2.ArrayList arrayList29 = java2.util2.Collections.list(enumeration28);
    java2.util2.Set set31 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection32 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set31);
    java2.util2.Enumeration enumeration33 = java2.util2.Collections.enumeration((java2.util2.Collection)set31);
    java2.util2.ArrayList arrayList34 = java2.util2.Collections.list(enumeration33);
    java2.util2.Collections.fill((java2.util2.List)arrayList29, (java.lang.Object)arrayList34);
    java2.util2.Set set37 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection38 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set37);
    java2.util2.Enumeration enumeration39 = java2.util2.Collections.enumeration((java2.util2.Collection)set37);
    java2.util2.ArrayList arrayList40 = java2.util2.Collections.list(enumeration39);
    java2.util2.List list41 = java2.util2.Collections.singletonList((java.lang.Object)enumeration39);
    java2.util2.List list42 = java2.util2.Collections.unmodifiableList(list41);
    java2.util2.Set set44 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection45 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set44);
    java2.util2.Enumeration enumeration46 = java2.util2.Collections.enumeration((java2.util2.Collection)set44);
    java2.util2.ArrayList arrayList47 = java2.util2.Collections.list(enumeration46);
    java2.util2.List list48 = java2.util2.Collections.singletonList((java.lang.Object)enumeration46);
    java2.util2.List list49 = java2.util2.Collections.unmodifiableList(list48);
    int i50 = java2.util2.Collections.indexOfSubList(list42, list48);
    java2.util2.Collections.fill((java2.util2.List)arrayList34, (java.lang.Object)list48);
    java2.util2.Collections.shuffle(list48);
    java2.util2.Collections.copy((java2.util2.List)arrayList23, list48);
    java2.util2.List list54 = java2.util2.Collections.nCopies(100, (java.lang.Object)arrayList23);
    boolean b55 = arrayList4.retainAll((java2.util2.Collection)arrayList23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);

  }

  @Test
  public void test256() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test256"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Collections.fill((java2.util2.List)arrayList4, (java.lang.Object)arrayList9);
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set12);
    java2.util2.Enumeration enumeration14 = java2.util2.Collections.enumeration((java2.util2.Collection)set12);
    java2.util2.ArrayList arrayList15 = java2.util2.Collections.list(enumeration14);
    java2.util2.Set set17 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection18 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set17);
    java2.util2.Enumeration enumeration19 = java2.util2.Collections.enumeration((java2.util2.Collection)set17);
    java2.util2.ArrayList arrayList20 = java2.util2.Collections.list(enumeration19);
    java2.util2.Collections.fill((java2.util2.List)arrayList15, (java.lang.Object)arrayList20);
    java2.util2.Set set23 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection24 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set23);
    java2.util2.Enumeration enumeration25 = java2.util2.Collections.enumeration((java2.util2.Collection)set23);
    java2.util2.ArrayList arrayList26 = java2.util2.Collections.list(enumeration25);
    java2.util2.List list27 = java2.util2.Collections.singletonList((java.lang.Object)enumeration25);
    java2.util2.List list28 = java2.util2.Collections.unmodifiableList(list27);
    java2.util2.Set set30 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection31 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set30);
    java2.util2.Enumeration enumeration32 = java2.util2.Collections.enumeration((java2.util2.Collection)set30);
    java2.util2.ArrayList arrayList33 = java2.util2.Collections.list(enumeration32);
    java2.util2.List list34 = java2.util2.Collections.singletonList((java.lang.Object)enumeration32);
    java2.util2.List list35 = java2.util2.Collections.unmodifiableList(list34);
    int i36 = java2.util2.Collections.indexOfSubList(list28, list34);
    java2.util2.Collections.fill((java2.util2.List)arrayList20, (java.lang.Object)list34);
    java2.util2.Collections.shuffle(list34);
    java2.util2.Collections.copy((java2.util2.List)arrayList9, list34);
    java.lang.String str40 = arrayList9.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == (-1));

  }

  @Test
  public void test257() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test257"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Collections.fill((java2.util2.List)arrayList4, (java.lang.Object)arrayList9);
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set12);
    java2.util2.Enumeration enumeration14 = java2.util2.Collections.enumeration((java2.util2.Collection)set12);
    java2.util2.ArrayList arrayList15 = java2.util2.Collections.list(enumeration14);
    java2.util2.List list16 = java2.util2.Collections.singletonList((java.lang.Object)enumeration14);
    java2.util2.List list17 = java2.util2.Collections.unmodifiableList(list16);
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set19);
    java2.util2.Enumeration enumeration21 = java2.util2.Collections.enumeration((java2.util2.Collection)set19);
    java2.util2.ArrayList arrayList22 = java2.util2.Collections.list(enumeration21);
    java2.util2.List list23 = java2.util2.Collections.singletonList((java.lang.Object)enumeration21);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list23);
    int i25 = java2.util2.Collections.indexOfSubList(list17, list23);
    java2.util2.Collections.fill((java2.util2.List)arrayList9, (java.lang.Object)list23);
    java2.util2.Collections.rotate((java2.util2.List)arrayList9, 0);
    java2.util2.TreeSet treeSet29 = new java2.util2.TreeSet((java2.util2.Collection)arrayList9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj30 = java2.util2.Collections.min((java2.util2.Collection)treeSet29);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet29.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet29.size() == 1);

  }

  @Test
  public void test258() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test258"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.ArrayList arrayList5 = java2.util2.Collections.list(enumeration3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap((java2.util2.List)arrayList5, 0, 0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList5);

  }

  @Test
  public void test259() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test259"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java2.util2.SortedSet sortedSet5 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet3);
    java2.util2.Set set7 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set7);
    java2.util2.Enumeration enumeration9 = java2.util2.Collections.enumeration((java2.util2.Collection)set7);
    java2.util2.ArrayList arrayList10 = java2.util2.Collections.list(enumeration9);
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set12);
    java2.util2.Enumeration enumeration14 = java2.util2.Collections.enumeration((java2.util2.Collection)set12);
    java2.util2.ArrayList arrayList15 = java2.util2.Collections.list(enumeration14);
    java2.util2.Collections.fill((java2.util2.List)arrayList10, (java.lang.Object)arrayList15);
    java2.util2.Set set18 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection19 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set18);
    java2.util2.Enumeration enumeration20 = java2.util2.Collections.enumeration((java2.util2.Collection)set18);
    java2.util2.ArrayList arrayList21 = java2.util2.Collections.list(enumeration20);
    java2.util2.List list22 = java2.util2.Collections.singletonList((java.lang.Object)enumeration20);
    java2.util2.List list23 = java2.util2.Collections.unmodifiableList(list22);
    java2.util2.Set set25 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection26 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set25);
    java2.util2.Enumeration enumeration27 = java2.util2.Collections.enumeration((java2.util2.Collection)set25);
    java2.util2.ArrayList arrayList28 = java2.util2.Collections.list(enumeration27);
    java2.util2.List list29 = java2.util2.Collections.singletonList((java.lang.Object)enumeration27);
    java2.util2.List list30 = java2.util2.Collections.unmodifiableList(list29);
    int i31 = java2.util2.Collections.indexOfSubList(list23, list29);
    java2.util2.Collections.fill((java2.util2.List)arrayList15, (java.lang.Object)list29);
    java2.util2.Enumeration enumeration33 = java2.util2.Collections.enumeration((java2.util2.Collection)list29);
    java2.util2.ArrayList arrayList34 = java2.util2.Collections.list(enumeration33);
    boolean b35 = treeSet3.equals((java.lang.Object)arrayList34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);

  }

  @Test
  public void test260() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test260"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.List list5 = java2.util2.Collections.singletonList((java.lang.Object)enumeration3);
    java2.util2.List list6 = java2.util2.Collections.unmodifiableList(list5);
    java2.util2.Set set8 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set8);
    java2.util2.Enumeration enumeration10 = java2.util2.Collections.enumeration((java2.util2.Collection)set8);
    java2.util2.ArrayList arrayList11 = java2.util2.Collections.list(enumeration10);
    java2.util2.List list12 = java2.util2.Collections.singletonList((java.lang.Object)enumeration10);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list12);
    int i14 = java2.util2.Collections.indexOfSubList(list6, list12);
    java2.util2.Set set16 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set17 = java2.util2.Collections.singleton((java.lang.Object)set16);
    java2.util2.TreeSet treeSet18 = new java2.util2.TreeSet((java2.util2.Collection)set17);
    java2.util2.TreeSet treeSet19 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet18);
    java2.util2.Set set20 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet18);
    java2.util2.List list21 = java2.util2.Collections.singletonList((java.lang.Object)treeSet18);
    java2.util2.Iterator iterator22 = treeSet18.iterator();
    java2.util2.Map map23 = java2.util2.Collections.singletonMap((java.lang.Object)list6, (java.lang.Object)treeSet18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet18.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet18.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet19.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet19.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map23);

  }

  @Test
  public void test261() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test261"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java2.util2.SortedSet sortedSet5 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet3);
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet();
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet();
    java2.util2.Set set9 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set9);
    boolean b11 = treeSet7.removeAll(collection10);
    java2.util2.Comparator comparator12 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj13 = java2.util2.Collections.max(collection10, comparator12);
    boolean b14 = treeSet6.containsAll(collection10);
    boolean b15 = treeSet3.removeAll((java2.util2.Collection)treeSet6);
    java.lang.Object obj16 = treeSet3.clone();
    java2.util2.Collection collection17 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 10L+ "'", obj13.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection17);

  }

  @Test
  public void test262() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test262"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java2.util2.Set set5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet3);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet3);
    java.lang.Object obj7 = treeSet3.last();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj7);

  }

  @Test
  public void test263() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test263"); }


    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet();
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection4 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set3);
    java2.util2.Comparator comparator5 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj6 = java2.util2.Collections.max(collection4, comparator5);
    boolean b7 = treeSet1.containsAll(collection4);
    java2.util2.List list8 = java2.util2.Collections.nCopies(100, (java.lang.Object)treeSet1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(list8);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10L+ "'", obj6.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);

  }

  @Test
  public void test264() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test264"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Collections.fill((java2.util2.List)arrayList4, (java.lang.Object)arrayList9);
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set12);
    java2.util2.Enumeration enumeration14 = java2.util2.Collections.enumeration((java2.util2.Collection)set12);
    java2.util2.ArrayList arrayList15 = java2.util2.Collections.list(enumeration14);
    java2.util2.List list16 = java2.util2.Collections.singletonList((java.lang.Object)enumeration14);
    java2.util2.List list17 = java2.util2.Collections.unmodifiableList(list16);
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set19);
    java2.util2.Enumeration enumeration21 = java2.util2.Collections.enumeration((java2.util2.Collection)set19);
    java2.util2.ArrayList arrayList22 = java2.util2.Collections.list(enumeration21);
    java2.util2.List list23 = java2.util2.Collections.singletonList((java.lang.Object)enumeration21);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list23);
    int i25 = java2.util2.Collections.indexOfSubList(list17, list23);
    java2.util2.Collections.fill((java2.util2.List)arrayList9, (java.lang.Object)list23);
    java2.util2.Collections.rotate((java2.util2.List)arrayList9, 0);
    java2.util2.Comparator comparator29 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj30 = java2.util2.Collections.max((java2.util2.Collection)arrayList9, comparator29);
    java2.util2.Comparator comparator31 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort((java2.util2.List)arrayList9, comparator31);
    java2.util2.Set set34 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection35 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set34);
    java2.util2.Enumeration enumeration36 = java2.util2.Collections.enumeration((java2.util2.Collection)set34);
    java2.util2.ArrayList arrayList37 = java2.util2.Collections.list(enumeration36);
    java2.util2.Set set39 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection40 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set39);
    java2.util2.Enumeration enumeration41 = java2.util2.Collections.enumeration((java2.util2.Collection)set39);
    java2.util2.ArrayList arrayList42 = java2.util2.Collections.list(enumeration41);
    java2.util2.Set set44 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection45 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set44);
    java2.util2.Enumeration enumeration46 = java2.util2.Collections.enumeration((java2.util2.Collection)set44);
    java2.util2.ArrayList arrayList47 = java2.util2.Collections.list(enumeration46);
    java2.util2.List list48 = java2.util2.Collections.singletonList((java.lang.Object)enumeration46);
    java2.util2.List list49 = java2.util2.Collections.unmodifiableList(list48);
    java2.util2.Collections.copy((java2.util2.List)arrayList42, list48);
    boolean b51 = arrayList37.containsAll((java2.util2.Collection)arrayList42);
    java2.util2.Collections.sort((java2.util2.List)arrayList42);
    java2.util2.Set set55 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set56 = java2.util2.Collections.singleton((java.lang.Object)set55);
    java2.util2.TreeSet treeSet57 = new java2.util2.TreeSet((java2.util2.Collection)set56);
    java2.util2.TreeSet treeSet58 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet57);
    java.lang.Object obj59 = treeSet58.first();
    java2.util2.TreeSet treeSet60 = new java2.util2.TreeSet((java2.util2.Collection)treeSet58);
    java2.util2.Map map61 = java2.util2.Collections.singletonMap((java.lang.Object)100.0d, (java.lang.Object)treeSet60);
    boolean b62 = java2.util2.Collections.replaceAll((java2.util2.List)arrayList9, (java.lang.Object)arrayList42, (java.lang.Object)100.0d);
    java2.util2.Set set65 = java2.util2.Collections.singleton((java.lang.Object)' ');
    java2.util2.List list66 = java2.util2.Collections.nCopies(100, (java.lang.Object)set65);
    int i67 = java2.util2.Collections.indexOfSubList((java2.util2.List)arrayList9, list66);
    java2.util2.Collection collection68 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet57.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet57.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet57.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet58.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet58.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet58.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet60.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet60.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet60.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection68);

  }

  @Test
  public void test265() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test265"); }


    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet();
    java2.util2.List list2 = java2.util2.Collections.nCopies(10, (java.lang.Object)treeSet1);
    java2.util2.Comparator comparator3 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj4 = java2.util2.Collections.min((java2.util2.Collection)treeSet1, comparator3);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator3);

  }

  @Test
  public void test266() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test266"); }


    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set2);
    java2.util2.Enumeration enumeration4 = java2.util2.Collections.enumeration((java2.util2.Collection)set2);
    java2.util2.ArrayList arrayList5 = java2.util2.Collections.list(enumeration4);
    java2.util2.Set set7 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set7);
    java2.util2.Enumeration enumeration9 = java2.util2.Collections.enumeration((java2.util2.Collection)set7);
    java2.util2.ArrayList arrayList10 = java2.util2.Collections.list(enumeration9);
    java2.util2.Collections.fill((java2.util2.List)arrayList5, (java.lang.Object)arrayList10);
    java2.util2.Set set13 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection14 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set13);
    java2.util2.Enumeration enumeration15 = java2.util2.Collections.enumeration((java2.util2.Collection)set13);
    java2.util2.ArrayList arrayList16 = java2.util2.Collections.list(enumeration15);
    java2.util2.Set set18 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection19 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set18);
    java2.util2.Enumeration enumeration20 = java2.util2.Collections.enumeration((java2.util2.Collection)set18);
    java2.util2.ArrayList arrayList21 = java2.util2.Collections.list(enumeration20);
    java2.util2.Collections.fill((java2.util2.List)arrayList16, (java.lang.Object)arrayList21);
    java2.util2.Set set24 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection25 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set24);
    java2.util2.Enumeration enumeration26 = java2.util2.Collections.enumeration((java2.util2.Collection)set24);
    java2.util2.ArrayList arrayList27 = java2.util2.Collections.list(enumeration26);
    java2.util2.List list28 = java2.util2.Collections.singletonList((java.lang.Object)enumeration26);
    java2.util2.List list29 = java2.util2.Collections.unmodifiableList(list28);
    java2.util2.Set set31 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection32 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set31);
    java2.util2.Enumeration enumeration33 = java2.util2.Collections.enumeration((java2.util2.Collection)set31);
    java2.util2.ArrayList arrayList34 = java2.util2.Collections.list(enumeration33);
    java2.util2.List list35 = java2.util2.Collections.singletonList((java.lang.Object)enumeration33);
    java2.util2.List list36 = java2.util2.Collections.unmodifiableList(list35);
    int i37 = java2.util2.Collections.indexOfSubList(list29, list35);
    java2.util2.Collections.fill((java2.util2.List)arrayList21, (java.lang.Object)list35);
    java2.util2.Collections.shuffle(list35);
    java2.util2.Collections.copy((java2.util2.List)arrayList10, list35);
    java2.util2.List list41 = java2.util2.Collections.nCopies(100, (java.lang.Object)arrayList10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj42 = java2.util2.Collections.min((java2.util2.Collection)arrayList10);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);

  }

  @Test
  public void test267() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test267"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java2.util2.Set set5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet3);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet3);
    java.lang.Object obj7 = treeSet3.clone();
    java2.util2.Set set9 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set10 = java2.util2.Collections.singleton((java.lang.Object)set9);
    java2.util2.TreeSet treeSet11 = new java2.util2.TreeSet((java2.util2.Collection)set10);
    java2.util2.TreeSet treeSet12 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet11);
    java2.util2.Set set13 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet11);
    java2.util2.List list14 = java2.util2.Collections.singletonList((java.lang.Object)treeSet11);
    java2.util2.Comparator comparator15 = treeSet11.comparator();
    java2.util2.Set set17 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection18 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set17);
    java2.util2.Enumeration enumeration19 = java2.util2.Collections.enumeration((java2.util2.Collection)set17);
    java2.util2.ArrayList arrayList20 = java2.util2.Collections.list(enumeration19);
    java2.util2.Set set22 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection23 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set22);
    java2.util2.Enumeration enumeration24 = java2.util2.Collections.enumeration((java2.util2.Collection)set22);
    java2.util2.ArrayList arrayList25 = java2.util2.Collections.list(enumeration24);
    java2.util2.Set set27 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection28 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set27);
    java2.util2.Enumeration enumeration29 = java2.util2.Collections.enumeration((java2.util2.Collection)set27);
    java2.util2.ArrayList arrayList30 = java2.util2.Collections.list(enumeration29);
    java2.util2.List list31 = java2.util2.Collections.singletonList((java.lang.Object)enumeration29);
    java2.util2.List list32 = java2.util2.Collections.unmodifiableList(list31);
    java2.util2.Collections.copy((java2.util2.List)arrayList25, list31);
    boolean b34 = arrayList20.containsAll((java2.util2.Collection)arrayList25);
    java2.util2.Set set35 = java2.util2.Collections.singleton((java.lang.Object)b34);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet36 = treeSet3.subSet((java.lang.Object)treeSet11, (java.lang.Object)set35);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet11.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet11.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet11.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet12.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet12.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);

  }

  @Test
  public void test268() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test268"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java.lang.Object obj4 = treeSet3.clone();
    java2.util2.SortedSet sortedSet5 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet3);
    java2.util2.Set set7 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set8 = java2.util2.Collections.singleton((java.lang.Object)set7);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b9 = treeSet3.addAll((java2.util2.Collection)set7);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);

  }

  @Test
  public void test269() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test269"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java.lang.Object obj5 = treeSet4.first();
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet((java2.util2.Collection)treeSet4);
    java2.util2.SortedSet sortedSet8 = treeSet6.headSet((java.lang.Object)(short)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet8);

  }

  @Test
  public void test270() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test270"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Collections.fill((java2.util2.List)arrayList4, (java.lang.Object)arrayList9);
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set12);
    java2.util2.Enumeration enumeration14 = java2.util2.Collections.enumeration((java2.util2.Collection)set12);
    java2.util2.ArrayList arrayList15 = java2.util2.Collections.list(enumeration14);
    java2.util2.List list16 = java2.util2.Collections.singletonList((java.lang.Object)enumeration14);
    java2.util2.List list17 = java2.util2.Collections.unmodifiableList(list16);
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set19);
    java2.util2.Enumeration enumeration21 = java2.util2.Collections.enumeration((java2.util2.Collection)set19);
    java2.util2.ArrayList arrayList22 = java2.util2.Collections.list(enumeration21);
    java2.util2.List list23 = java2.util2.Collections.singletonList((java.lang.Object)enumeration21);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list23);
    int i25 = java2.util2.Collections.indexOfSubList(list17, list23);
    java2.util2.Collections.fill((java2.util2.List)arrayList9, (java.lang.Object)list23);
    java2.util2.Collections.sort((java2.util2.List)arrayList9);
    java2.util2.Set set29 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection30 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set29);
    java2.util2.Enumeration enumeration31 = java2.util2.Collections.enumeration((java2.util2.Collection)set29);
    java2.util2.ArrayList arrayList32 = java2.util2.Collections.list(enumeration31);
    java2.util2.Set set34 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection35 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set34);
    java2.util2.Enumeration enumeration36 = java2.util2.Collections.enumeration((java2.util2.Collection)set34);
    java2.util2.ArrayList arrayList37 = java2.util2.Collections.list(enumeration36);
    java2.util2.Collections.fill((java2.util2.List)arrayList32, (java.lang.Object)arrayList37);
    java2.util2.Set set40 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection41 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set40);
    java2.util2.Enumeration enumeration42 = java2.util2.Collections.enumeration((java2.util2.Collection)set40);
    java2.util2.ArrayList arrayList43 = java2.util2.Collections.list(enumeration42);
    java2.util2.List list44 = java2.util2.Collections.singletonList((java.lang.Object)enumeration42);
    java2.util2.List list45 = java2.util2.Collections.unmodifiableList(list44);
    java2.util2.Set set47 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection48 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set47);
    java2.util2.Enumeration enumeration49 = java2.util2.Collections.enumeration((java2.util2.Collection)set47);
    java2.util2.ArrayList arrayList50 = java2.util2.Collections.list(enumeration49);
    java2.util2.List list51 = java2.util2.Collections.singletonList((java.lang.Object)enumeration49);
    java2.util2.List list52 = java2.util2.Collections.unmodifiableList(list51);
    int i53 = java2.util2.Collections.indexOfSubList(list45, list51);
    java2.util2.Collections.fill((java2.util2.List)arrayList37, (java.lang.Object)list51);
    java2.util2.TreeSet treeSet55 = new java2.util2.TreeSet();
    java2.util2.Set set57 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection58 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set57);
    java2.util2.Comparator comparator59 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj60 = java2.util2.Collections.max(collection58, comparator59);
    java.lang.Object[] obj_array61 = new java.lang.Object[] { comparator59};
    java.lang.Object[] obj_array62 = treeSet55.toArray(obj_array61);
    java.lang.Object[] obj_array63 = arrayList37.toArray(obj_array61);
    int i64 = java2.util2.Collections.indexOfSubList((java2.util2.List)arrayList9, (java2.util2.List)arrayList37);
    java2.util2.Collections.sort((java2.util2.List)arrayList9);
    java2.util2.Collection collection66 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet55.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet55.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet55.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj60 + "' != '" + 10L+ "'", obj60.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection66);

  }

  @Test
  public void test271() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test271"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Collection collection5 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)arrayList4);
    java2.util2.Enumeration enumeration6 = java2.util2.Collections.enumeration((java2.util2.Collection)arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration6);

  }

  @Test
  public void test272() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test272"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet4);
    java2.util2.Collection collection6 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection6);

  }

  @Test
  public void test273() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test273"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Set set11 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set11);
    java2.util2.Enumeration enumeration13 = java2.util2.Collections.enumeration((java2.util2.Collection)set11);
    java2.util2.ArrayList arrayList14 = java2.util2.Collections.list(enumeration13);
    java2.util2.List list15 = java2.util2.Collections.singletonList((java.lang.Object)enumeration13);
    java2.util2.List list16 = java2.util2.Collections.unmodifiableList(list15);
    java2.util2.Collections.copy((java2.util2.List)arrayList9, list15);
    boolean b18 = arrayList4.containsAll((java2.util2.Collection)arrayList9);
    java2.util2.TreeSet treeSet19 = new java2.util2.TreeSet();
    java2.util2.Set set22 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set23 = java2.util2.Collections.singleton((java.lang.Object)set22);
    java2.util2.Enumeration enumeration24 = java2.util2.Collections.enumeration((java2.util2.Collection)set22);
    java2.util2.Map map25 = java2.util2.Collections.singletonMap((java.lang.Object)10.0f, (java.lang.Object)enumeration24);
    boolean b26 = java2.util2.Collections.replaceAll((java2.util2.List)arrayList9, (java.lang.Object)treeSet19, (java.lang.Object)map25);
    java2.util2.Set set28 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection29 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set28);
    java2.util2.Enumeration enumeration30 = java2.util2.Collections.enumeration((java2.util2.Collection)set28);
    java2.util2.ArrayList arrayList31 = java2.util2.Collections.list(enumeration30);
    java2.util2.Set set33 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection34 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set33);
    java2.util2.Enumeration enumeration35 = java2.util2.Collections.enumeration((java2.util2.Collection)set33);
    java2.util2.ArrayList arrayList36 = java2.util2.Collections.list(enumeration35);
    java2.util2.Collections.fill((java2.util2.List)arrayList31, (java.lang.Object)arrayList36);
    java2.util2.Set set39 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection40 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set39);
    java2.util2.Enumeration enumeration41 = java2.util2.Collections.enumeration((java2.util2.Collection)set39);
    java2.util2.ArrayList arrayList42 = java2.util2.Collections.list(enumeration41);
    java2.util2.List list43 = java2.util2.Collections.singletonList((java.lang.Object)enumeration41);
    java2.util2.List list44 = java2.util2.Collections.unmodifiableList(list43);
    java2.util2.Set set46 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection47 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set46);
    java2.util2.Enumeration enumeration48 = java2.util2.Collections.enumeration((java2.util2.Collection)set46);
    java2.util2.ArrayList arrayList49 = java2.util2.Collections.list(enumeration48);
    java2.util2.List list50 = java2.util2.Collections.singletonList((java.lang.Object)enumeration48);
    java2.util2.List list51 = java2.util2.Collections.unmodifiableList(list50);
    int i52 = java2.util2.Collections.indexOfSubList(list44, list50);
    java2.util2.Collections.fill((java2.util2.List)arrayList36, (java.lang.Object)list50);
    java2.util2.TreeSet treeSet54 = new java2.util2.TreeSet();
    java2.util2.Set set56 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection57 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set56);
    java2.util2.Comparator comparator58 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj59 = java2.util2.Collections.max(collection57, comparator58);
    java.lang.Object[] obj_array60 = new java.lang.Object[] { comparator58};
    java.lang.Object[] obj_array61 = treeSet54.toArray(obj_array60);
    java.lang.Object[] obj_array62 = arrayList36.toArray(obj_array60);
    java2.util2.Collections.shuffle((java2.util2.List)arrayList36);
    int i64 = java2.util2.Collections.indexOfSubList((java2.util2.List)arrayList9, (java2.util2.List)arrayList36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet19.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet54.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet54.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet54.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj59 + "' != '" + 10L+ "'", obj59.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == (-1));

  }

  @Test
  public void test274() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test274"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java2.util2.Set set5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet3);
    java2.util2.SortedSet sortedSet7 = treeSet3.tailSet((java.lang.Object)0.0d);
    java.lang.String str8 = treeSet3.toString();
    boolean b10 = treeSet3.equals((java.lang.Object)0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[[1.0]]"+ "'", str8.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test275() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test275"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Set set11 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set11);
    java2.util2.Enumeration enumeration13 = java2.util2.Collections.enumeration((java2.util2.Collection)set11);
    java2.util2.ArrayList arrayList14 = java2.util2.Collections.list(enumeration13);
    java2.util2.List list15 = java2.util2.Collections.singletonList((java.lang.Object)enumeration13);
    java2.util2.List list16 = java2.util2.Collections.unmodifiableList(list15);
    java2.util2.Collections.copy((java2.util2.List)arrayList9, list15);
    boolean b18 = arrayList4.containsAll((java2.util2.Collection)arrayList9);
    java2.util2.Collections.sort((java2.util2.List)arrayList9);
    java2.util2.Set set21 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection22 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set21);
    java2.util2.Enumeration enumeration23 = java2.util2.Collections.enumeration((java2.util2.Collection)set21);
    java2.util2.ArrayList arrayList24 = java2.util2.Collections.list(enumeration23);
    java2.util2.ArrayList arrayList25 = java2.util2.Collections.list(enumeration23);
    int i26 = java2.util2.Collections.lastIndexOfSubList((java2.util2.List)arrayList9, (java2.util2.List)arrayList25);
    java2.util2.List list27 = java2.util2.Collections.synchronizedList((java2.util2.List)arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);

  }

  @Test
  public void test276() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test276"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet4);
    java2.util2.Comparator comparator6 = treeSet5.comparator();
    java.lang.Object obj7 = treeSet5.first();
    java.lang.Object[] obj_array8 = treeSet5.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);

  }

  @Test
  public void test277() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test277"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.List list5 = java2.util2.Collections.singletonList((java.lang.Object)enumeration3);
    java2.util2.Collections.reverse(list5);
    java2.util2.Collections.rotate(list5, 1);
    java2.util2.Set set10 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection11 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set10);
    java2.util2.Enumeration enumeration12 = java2.util2.Collections.enumeration((java2.util2.Collection)set10);
    java2.util2.ArrayList arrayList13 = java2.util2.Collections.list(enumeration12);
    java2.util2.Set set15 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection16 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set15);
    java2.util2.Enumeration enumeration17 = java2.util2.Collections.enumeration((java2.util2.Collection)set15);
    java2.util2.ArrayList arrayList18 = java2.util2.Collections.list(enumeration17);
    java2.util2.List list19 = java2.util2.Collections.singletonList((java.lang.Object)enumeration17);
    boolean b20 = arrayList13.retainAll((java2.util2.Collection)list19);
    java2.util2.Collections.rotate(list19, 100);
    java2.util2.Collections.shuffle(list19);
    int i24 = java2.util2.Collections.indexOfSubList(list5, list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == (-1));

  }

  @Test
  public void test278() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test278"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set2);
    java2.util2.Comparator comparator4 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj5 = java2.util2.Collections.max(collection3, comparator4);
    boolean b6 = treeSet0.containsAll(collection3);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection(collection3);
    java2.util2.Comparator comparator8 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj9 = java2.util2.Collections.max(collection7, comparator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 10L+ "'", obj5.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 10L+ "'", obj9.equals(10L));

  }

  @Test
  public void test279() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test279"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java2.util2.Iterator iterator5 = treeSet4.iterator();
    java2.util2.Comparator comparator6 = treeSet4.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator6);

  }

  @Test
  public void test280() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test280"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java2.util2.Set set5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet3);
    java2.util2.List list6 = java2.util2.Collections.singletonList((java.lang.Object)treeSet3);
    java2.util2.Iterator iterator7 = treeSet3.iterator();
    java2.util2.Comparator comparator8 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj9 = java2.util2.Collections.min((java2.util2.Collection)treeSet3, comparator8);
    java2.util2.Set set11 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set11);
    java2.util2.Enumeration enumeration13 = java2.util2.Collections.enumeration((java2.util2.Collection)set11);
    java2.util2.ArrayList arrayList14 = java2.util2.Collections.list(enumeration13);
    java2.util2.Set set16 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection17 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set16);
    java2.util2.Enumeration enumeration18 = java2.util2.Collections.enumeration((java2.util2.Collection)set16);
    java2.util2.ArrayList arrayList19 = java2.util2.Collections.list(enumeration18);
    java2.util2.Set set21 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection22 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set21);
    java2.util2.Enumeration enumeration23 = java2.util2.Collections.enumeration((java2.util2.Collection)set21);
    java2.util2.ArrayList arrayList24 = java2.util2.Collections.list(enumeration23);
    java2.util2.List list25 = java2.util2.Collections.singletonList((java.lang.Object)enumeration23);
    java2.util2.List list26 = java2.util2.Collections.unmodifiableList(list25);
    java2.util2.Collections.copy((java2.util2.List)arrayList19, list25);
    boolean b28 = arrayList14.containsAll((java2.util2.Collection)arrayList19);
    java2.util2.TreeSet treeSet29 = new java2.util2.TreeSet();
    java2.util2.Set set32 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set33 = java2.util2.Collections.singleton((java.lang.Object)set32);
    java2.util2.Enumeration enumeration34 = java2.util2.Collections.enumeration((java2.util2.Collection)set32);
    java2.util2.Map map35 = java2.util2.Collections.singletonMap((java.lang.Object)10.0f, (java.lang.Object)enumeration34);
    boolean b36 = java2.util2.Collections.replaceAll((java2.util2.List)arrayList19, (java.lang.Object)treeSet29, (java.lang.Object)map35);
    boolean b37 = treeSet3.equals((java.lang.Object)treeSet29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet29.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet29.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet29.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);

  }

  @Test
  public void test281() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test281"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java2.util2.Set set5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet3);
    java2.util2.SortedSet sortedSet7 = treeSet3.tailSet((java.lang.Object)0.0d);
    java2.util2.Iterator iterator8 = treeSet3.iterator();
    java2.util2.Set set10 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection11 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set10);
    java2.util2.Comparator comparator12 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj13 = java2.util2.Collections.max(collection11, comparator12);
    java.lang.Object obj14 = java2.util2.Collections.min(collection11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b15 = treeSet3.remove((java.lang.Object)collection11);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 10L+ "'", obj13.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + 10L+ "'", obj14.equals(10L));

  }

  @Test
  public void test282() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test282"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java.lang.Object obj5 = treeSet4.first();
    java2.util2.Comparator comparator6 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj7 = java2.util2.Collections.min((java2.util2.Collection)treeSet4, comparator6);
    java.lang.String str8 = treeSet4.toString();
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet4);
    java2.util2.Iterator iterator10 = treeSet4.iterator();
    java2.util2.Set set11 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet4);
    java2.util2.Set set14 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set15 = java2.util2.Collections.singleton((java.lang.Object)set14);
    java2.util2.TreeSet treeSet16 = new java2.util2.TreeSet((java2.util2.Collection)set15);
    java2.util2.TreeSet treeSet17 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet16);
    java.lang.Object obj18 = treeSet17.first();
    java2.util2.TreeSet treeSet19 = new java2.util2.TreeSet((java2.util2.Collection)treeSet17);
    java2.util2.Map map20 = java2.util2.Collections.singletonMap((java.lang.Object)100.0d, (java.lang.Object)treeSet19);
    java.lang.String str21 = treeSet19.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet22 = treeSet4.headSet((java.lang.Object)treeSet19);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[[1.0]]"+ "'", str8.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet16.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet16.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet17.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet17.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet17.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet19.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet19.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[[1.0]]"+ "'", str21.equals("[[1.0]]"));

  }

  @Test
  public void test283() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test283"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Collections.fill((java2.util2.List)arrayList4, (java.lang.Object)arrayList9);
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set12);
    java2.util2.Enumeration enumeration14 = java2.util2.Collections.enumeration((java2.util2.Collection)set12);
    java2.util2.ArrayList arrayList15 = java2.util2.Collections.list(enumeration14);
    java2.util2.List list16 = java2.util2.Collections.singletonList((java.lang.Object)enumeration14);
    java2.util2.List list17 = java2.util2.Collections.unmodifiableList(list16);
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set19);
    java2.util2.Enumeration enumeration21 = java2.util2.Collections.enumeration((java2.util2.Collection)set19);
    java2.util2.ArrayList arrayList22 = java2.util2.Collections.list(enumeration21);
    java2.util2.List list23 = java2.util2.Collections.singletonList((java.lang.Object)enumeration21);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list23);
    int i25 = java2.util2.Collections.indexOfSubList(list17, list23);
    java2.util2.Collections.fill((java2.util2.List)arrayList9, (java.lang.Object)list23);
    java2.util2.TreeSet treeSet27 = new java2.util2.TreeSet();
    java2.util2.Set set29 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection30 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set29);
    java2.util2.Comparator comparator31 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj32 = java2.util2.Collections.max(collection30, comparator31);
    java.lang.Object[] obj_array33 = new java.lang.Object[] { comparator31};
    java.lang.Object[] obj_array34 = treeSet27.toArray(obj_array33);
    java.lang.Object[] obj_array35 = arrayList9.toArray(obj_array33);
    java2.util2.Collections.shuffle((java2.util2.List)arrayList9);
    java2.util2.Collections.rotate((java2.util2.List)arrayList9, (-1));
    java2.util2.Collections.reverse((java2.util2.List)arrayList9);
    java2.util2.List list40 = java2.util2.Collections.synchronizedList((java2.util2.List)arrayList9);
    java.lang.Object[] obj_array41 = arrayList9.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet27.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet27.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + 10L+ "'", obj32.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array41);

  }

  @Test
  public void test284() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test284"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Set set11 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set11);
    java2.util2.Enumeration enumeration13 = java2.util2.Collections.enumeration((java2.util2.Collection)set11);
    java2.util2.ArrayList arrayList14 = java2.util2.Collections.list(enumeration13);
    java2.util2.List list15 = java2.util2.Collections.singletonList((java.lang.Object)enumeration13);
    java2.util2.List list16 = java2.util2.Collections.unmodifiableList(list15);
    java2.util2.Collections.copy((java2.util2.List)arrayList9, list15);
    boolean b18 = arrayList4.containsAll((java2.util2.Collection)arrayList9);
    java2.util2.Collections.sort((java2.util2.List)arrayList9);
    java2.util2.Collections.shuffle((java2.util2.List)arrayList9);
    java2.util2.List list21 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList9);
    java2.util2.List list22 = java2.util2.Collections.synchronizedList((java2.util2.List)arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);

  }

  @Test
  public void test285() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test285"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Collections.fill((java2.util2.List)arrayList4, (java.lang.Object)arrayList9);
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set12);
    java2.util2.Enumeration enumeration14 = java2.util2.Collections.enumeration((java2.util2.Collection)set12);
    java2.util2.ArrayList arrayList15 = java2.util2.Collections.list(enumeration14);
    java2.util2.List list16 = java2.util2.Collections.singletonList((java.lang.Object)enumeration14);
    java2.util2.List list17 = java2.util2.Collections.unmodifiableList(list16);
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set19);
    java2.util2.Enumeration enumeration21 = java2.util2.Collections.enumeration((java2.util2.Collection)set19);
    java2.util2.ArrayList arrayList22 = java2.util2.Collections.list(enumeration21);
    java2.util2.List list23 = java2.util2.Collections.singletonList((java.lang.Object)enumeration21);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list23);
    int i25 = java2.util2.Collections.indexOfSubList(list17, list23);
    java2.util2.Collections.fill((java2.util2.List)arrayList9, (java.lang.Object)list23);
    java2.util2.TreeSet treeSet27 = new java2.util2.TreeSet();
    java2.util2.Set set29 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection30 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set29);
    java2.util2.Comparator comparator31 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj32 = java2.util2.Collections.max(collection30, comparator31);
    java.lang.Object[] obj_array33 = new java.lang.Object[] { comparator31};
    java.lang.Object[] obj_array34 = treeSet27.toArray(obj_array33);
    java.lang.Object[] obj_array35 = arrayList9.toArray(obj_array33);
    java2.util2.TreeSet treeSet36 = new java2.util2.TreeSet((java2.util2.Collection)arrayList9);
    java2.util2.Collection collection37 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet36);
    java.lang.String str38 = treeSet36.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet27.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet27.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + 10L+ "'", obj32.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet36.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet36.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection37);

  }

  @Test
  public void test286() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test286"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java.lang.Object obj5 = treeSet4.first();
    java2.util2.Iterator iterator6 = treeSet4.iterator();
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);

  }

  @Test
  public void test287() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test287"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet4);
    java.lang.Object obj6 = treeSet4.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj6);

  }

  @Test
  public void test288() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test288"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set7 = java2.util2.Collections.singleton((java.lang.Object)set6);
    java2.util2.TreeSet treeSet8 = new java2.util2.TreeSet((java2.util2.Collection)set7);
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet8);
    boolean b10 = treeSet3.equals((java.lang.Object)treeSet8);
    java.lang.String str11 = treeSet8.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet8.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[[1.0]]"+ "'", str11.equals("[[1.0]]"));

  }

  @Test
  public void test289() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test289"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.ArrayList arrayList5 = java2.util2.Collections.list(enumeration3);
    java2.util2.Comparator comparator6 = java2.util2.Collections.reverseOrder();
    java2.util2.Set set8 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set9 = java2.util2.Collections.singleton((java.lang.Object)set8);
    java2.util2.TreeSet treeSet10 = new java2.util2.TreeSet((java2.util2.Collection)set9);
    java2.util2.TreeSet treeSet11 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet10);
    java2.util2.Set set12 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet10);
    java2.util2.List list13 = java2.util2.Collections.singletonList((java.lang.Object)treeSet10);
    java2.util2.Iterator iterator14 = treeSet10.iterator();
    java2.util2.Map map15 = java2.util2.Collections.singletonMap((java.lang.Object)comparator6, (java.lang.Object)treeSet10);
    java2.util2.Comparator comparator16 = java2.util2.Collections.reverseOrder();
    int i17 = java2.util2.Collections.binarySearch((java2.util2.List)arrayList5, (java.lang.Object)map15, comparator16);
    java2.util2.Map map18 = java2.util2.Collections.synchronizedMap(map15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet10.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet11.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet11.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet11.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map18);

  }

  @Test
  public void test290() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test290"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java2.util2.Set set5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet3);
    java2.util2.List list6 = java2.util2.Collections.singletonList((java.lang.Object)treeSet3);
    java2.util2.Set set7 = java2.util2.Collections.singleton((java.lang.Object)list6);
    java2.util2.Set set9 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set9);
    java2.util2.Enumeration enumeration11 = java2.util2.Collections.enumeration((java2.util2.Collection)set9);
    java2.util2.ArrayList arrayList12 = java2.util2.Collections.list(enumeration11);
    java2.util2.Set set14 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection15 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set14);
    java2.util2.Enumeration enumeration16 = java2.util2.Collections.enumeration((java2.util2.Collection)set14);
    java2.util2.ArrayList arrayList17 = java2.util2.Collections.list(enumeration16);
    java2.util2.List list18 = java2.util2.Collections.singletonList((java.lang.Object)enumeration16);
    boolean b19 = arrayList12.retainAll((java2.util2.Collection)list18);
    java2.util2.Collections.rotate(list18, 100);
    java2.util2.Set set23 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set24 = java2.util2.Collections.singleton((java.lang.Object)set23);
    java2.util2.TreeSet treeSet25 = new java2.util2.TreeSet((java2.util2.Collection)set24);
    java2.util2.TreeSet treeSet26 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet25);
    java2.util2.Set set27 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet25);
    java2.util2.SortedSet sortedSet28 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet25);
    java.lang.Object obj29 = treeSet25.clone();
    boolean b30 = java2.util2.Collections.replaceAll(list6, (java.lang.Object)list18, obj29);
    java2.util2.Set set32 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set33 = java2.util2.Collections.singleton((java.lang.Object)set32);
    java2.util2.TreeSet treeSet34 = new java2.util2.TreeSet((java2.util2.Collection)set33);
    java2.util2.TreeSet treeSet35 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet34);
    java.lang.Object[] obj_array36 = treeSet35.toArray();
    java2.util2.Comparator comparator37 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int i38 = java2.util2.Collections.binarySearch(list18, (java.lang.Object)obj_array36, comparator37);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet25.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet25.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet25.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet26.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet26.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet26.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet34.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet34.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet34.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet35.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet35.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet35.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator37);

  }

  @Test
  public void test291() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test291"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java.lang.Object obj5 = treeSet4.first();
    java2.util2.Comparator comparator6 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj7 = java2.util2.Collections.min((java2.util2.Collection)treeSet4, comparator6);
    java.lang.String str8 = treeSet4.toString();
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet4);
    java2.util2.Set set10 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet9);
    java2.util2.TreeSet treeSet11 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[[1.0]]"+ "'", str8.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet11.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet11.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet11.toString(), "[[1.0]]");

  }

  @Test
  public void test292() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test292"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet4);
    java2.util2.Comparator comparator6 = treeSet5.comparator();
    java.lang.Object obj7 = treeSet5.first();
    java2.util2.Comparator comparator8 = treeSet5.comparator();
    java.lang.Object obj9 = treeSet5.last();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj9);

  }

  @Test
  public void test293() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test293"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java2.util2.Set set5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet3);
    java2.util2.List list6 = java2.util2.Collections.singletonList((java.lang.Object)treeSet3);
    java2.util2.Comparator comparator7 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj8 = java2.util2.Collections.min((java2.util2.Collection)treeSet3, comparator7);
    java.lang.Object[] obj_array9 = treeSet3.toArray();
    java.lang.Object obj10 = treeSet3.first();
    java2.util2.Iterator iterator11 = treeSet3.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator11);

  }

  @Test
  public void test294() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test294"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Collections.fill((java2.util2.List)arrayList4, (java.lang.Object)arrayList9);
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set12);
    java2.util2.Enumeration enumeration14 = java2.util2.Collections.enumeration((java2.util2.Collection)set12);
    java2.util2.ArrayList arrayList15 = java2.util2.Collections.list(enumeration14);
    java2.util2.List list16 = java2.util2.Collections.singletonList((java.lang.Object)enumeration14);
    java2.util2.List list17 = java2.util2.Collections.unmodifiableList(list16);
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set19);
    java2.util2.Enumeration enumeration21 = java2.util2.Collections.enumeration((java2.util2.Collection)set19);
    java2.util2.ArrayList arrayList22 = java2.util2.Collections.list(enumeration21);
    java2.util2.List list23 = java2.util2.Collections.singletonList((java.lang.Object)enumeration21);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list23);
    int i25 = java2.util2.Collections.indexOfSubList(list17, list23);
    java2.util2.Collections.fill((java2.util2.List)arrayList9, (java.lang.Object)list23);
    java2.util2.Collections.sort((java2.util2.List)arrayList9);
    java2.util2.Comparator comparator28 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj29 = java2.util2.Collections.max((java2.util2.Collection)arrayList9, comparator28);
    java.lang.Object[] obj_array30 = arrayList9.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array30);

  }

  @Test
  public void test295() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test295"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.List list10 = java2.util2.Collections.singletonList((java.lang.Object)enumeration8);
    boolean b11 = arrayList4.retainAll((java2.util2.Collection)list10);
    java2.util2.Collections.rotate(list10, 100);
    java2.util2.Set set15 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set16 = java2.util2.Collections.singleton((java.lang.Object)set15);
    java2.util2.TreeSet treeSet17 = new java2.util2.TreeSet((java2.util2.Collection)set16);
    java2.util2.TreeSet treeSet18 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet17);
    java.lang.Object obj19 = treeSet18.first();
    java2.util2.Set set20 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet18);
    java.lang.Object[] obj_array21 = treeSet18.toArray();
    java2.util2.Enumeration enumeration22 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet18);
    java2.util2.ArrayList arrayList23 = java2.util2.Collections.list(enumeration22);
    java2.util2.Set set25 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set26 = java2.util2.Collections.singleton((java.lang.Object)set25);
    java2.util2.TreeSet treeSet27 = new java2.util2.TreeSet((java2.util2.Collection)set26);
    java2.util2.TreeSet treeSet28 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet27);
    java2.util2.Set set29 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet27);
    java2.util2.List list30 = java2.util2.Collections.singletonList((java.lang.Object)treeSet27);
    java2.util2.Set set31 = java2.util2.Collections.singleton((java.lang.Object)list30);
    java2.util2.Set set33 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection34 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set33);
    java2.util2.Enumeration enumeration35 = java2.util2.Collections.enumeration((java2.util2.Collection)set33);
    java2.util2.ArrayList arrayList36 = java2.util2.Collections.list(enumeration35);
    java2.util2.Set set38 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection39 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set38);
    java2.util2.Enumeration enumeration40 = java2.util2.Collections.enumeration((java2.util2.Collection)set38);
    java2.util2.ArrayList arrayList41 = java2.util2.Collections.list(enumeration40);
    java2.util2.List list42 = java2.util2.Collections.singletonList((java.lang.Object)enumeration40);
    boolean b43 = arrayList36.retainAll((java2.util2.Collection)list42);
    java2.util2.Collections.rotate(list42, 100);
    java2.util2.Set set47 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set48 = java2.util2.Collections.singleton((java.lang.Object)set47);
    java2.util2.TreeSet treeSet49 = new java2.util2.TreeSet((java2.util2.Collection)set48);
    java2.util2.TreeSet treeSet50 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet49);
    java2.util2.Set set51 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet49);
    java2.util2.SortedSet sortedSet52 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet49);
    java.lang.Object obj53 = treeSet49.clone();
    boolean b54 = java2.util2.Collections.replaceAll(list30, (java.lang.Object)list42, obj53);
    boolean b55 = arrayList23.containsAll((java2.util2.Collection)list30);
    java2.util2.Set set57 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set58 = java2.util2.Collections.singleton((java.lang.Object)set57);
    java2.util2.TreeSet treeSet59 = new java2.util2.TreeSet((java2.util2.Collection)set58);
    java2.util2.TreeSet treeSet60 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet59);
    java2.util2.Set set62 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set63 = java2.util2.Collections.singleton((java.lang.Object)set62);
    java2.util2.TreeSet treeSet64 = new java2.util2.TreeSet((java2.util2.Collection)set63);
    java2.util2.TreeSet treeSet65 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet64);
    java2.util2.Set set66 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet64);
    java2.util2.List list67 = java2.util2.Collections.singletonList((java.lang.Object)treeSet64);
    boolean b68 = treeSet59.retainAll((java2.util2.Collection)list67);
    java2.util2.Comparator comparator69 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj70 = java2.util2.Collections.max((java2.util2.Collection)list67, comparator69);
    java2.util2.Collections.copy((java2.util2.List)arrayList23, list67);
    boolean b73 = java2.util2.Collections.replaceAll(list10, (java.lang.Object)arrayList23, (java.lang.Object)0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet17.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet17.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet17.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet18.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet18.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet27.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet27.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet28.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet28.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet28.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet49.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet49.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet49.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet50.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet50.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet50.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet59.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet59.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet59.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet60.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet60.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet60.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet64.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet64.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet64.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet65.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet65.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet65.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);

  }

  @Test
  public void test296() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test296"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java.lang.Object obj5 = treeSet4.first();
    java2.util2.SortedSet sortedSet7 = treeSet4.tailSet((java.lang.Object)(short)1);
    java2.util2.Comparator comparator8 = treeSet4.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator8);

  }

  @Test
  public void test297() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test297"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java2.util2.Set set5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet3);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet3);
    java.lang.Object obj7 = treeSet3.clone();
    java.lang.Object obj8 = treeSet3.clone();
    java.lang.Object obj9 = treeSet3.first();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj9);

  }

  @Test
  public void test298() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test298"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java2.util2.Set set5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet3);
    java2.util2.SortedSet sortedSet7 = treeSet3.tailSet((java.lang.Object)0.0d);
    java.lang.String str8 = treeSet3.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj9 = java2.util2.Collections.min((java2.util2.Collection)treeSet3);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[[1.0]]"+ "'", str8.equals("[[1.0]]"));

  }

  @Test
  public void test299() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test299"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.List list10 = java2.util2.Collections.singletonList((java.lang.Object)enumeration8);
    boolean b11 = arrayList4.retainAll((java2.util2.Collection)list10);
    java2.util2.Collections.rotate(list10, 100);
    java2.util2.Set set16 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection17 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set16);
    java2.util2.Enumeration enumeration18 = java2.util2.Collections.enumeration((java2.util2.Collection)set16);
    java2.util2.ArrayList arrayList19 = java2.util2.Collections.list(enumeration18);
    java2.util2.Set set21 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection22 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set21);
    java2.util2.Enumeration enumeration23 = java2.util2.Collections.enumeration((java2.util2.Collection)set21);
    java2.util2.ArrayList arrayList24 = java2.util2.Collections.list(enumeration23);
    java2.util2.Collections.fill((java2.util2.List)arrayList19, (java.lang.Object)arrayList24);
    boolean b26 = java2.util2.Collections.replaceAll(list10, (java.lang.Object)(-2), (java.lang.Object)arrayList19);
    java2.util2.List list27 = java2.util2.Collections.singletonList((java.lang.Object)(-2));
    java2.util2.List list28 = java2.util2.Collections.singletonList((java.lang.Object)(-2));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);

  }

  @Test
  public void test300() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test300"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Set set11 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set11);
    java2.util2.Enumeration enumeration13 = java2.util2.Collections.enumeration((java2.util2.Collection)set11);
    java2.util2.ArrayList arrayList14 = java2.util2.Collections.list(enumeration13);
    java2.util2.List list15 = java2.util2.Collections.singletonList((java.lang.Object)enumeration13);
    java2.util2.List list16 = java2.util2.Collections.unmodifiableList(list15);
    java2.util2.Collections.copy((java2.util2.List)arrayList9, list15);
    boolean b18 = arrayList4.containsAll((java2.util2.Collection)arrayList9);
    java2.util2.Set set20 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection21 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set20);
    java2.util2.Enumeration enumeration22 = java2.util2.Collections.enumeration((java2.util2.Collection)set20);
    java2.util2.ArrayList arrayList23 = java2.util2.Collections.list(enumeration22);
    java2.util2.Set set25 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection26 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set25);
    java2.util2.Enumeration enumeration27 = java2.util2.Collections.enumeration((java2.util2.Collection)set25);
    java2.util2.ArrayList arrayList28 = java2.util2.Collections.list(enumeration27);
    java2.util2.Collections.fill((java2.util2.List)arrayList23, (java.lang.Object)arrayList28);
    java2.util2.Set set31 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection32 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set31);
    java2.util2.Enumeration enumeration33 = java2.util2.Collections.enumeration((java2.util2.Collection)set31);
    java2.util2.ArrayList arrayList34 = java2.util2.Collections.list(enumeration33);
    java2.util2.List list35 = java2.util2.Collections.singletonList((java.lang.Object)enumeration33);
    java2.util2.List list36 = java2.util2.Collections.unmodifiableList(list35);
    java2.util2.Set set38 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection39 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set38);
    java2.util2.Enumeration enumeration40 = java2.util2.Collections.enumeration((java2.util2.Collection)set38);
    java2.util2.ArrayList arrayList41 = java2.util2.Collections.list(enumeration40);
    java2.util2.List list42 = java2.util2.Collections.singletonList((java.lang.Object)enumeration40);
    java2.util2.List list43 = java2.util2.Collections.unmodifiableList(list42);
    int i44 = java2.util2.Collections.indexOfSubList(list36, list42);
    java2.util2.Collections.fill((java2.util2.List)arrayList28, (java.lang.Object)list42);
    java2.util2.Collections.rotate((java2.util2.List)arrayList28, 0);
    java2.util2.Set set50 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection51 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set50);
    java2.util2.Enumeration enumeration52 = java2.util2.Collections.enumeration((java2.util2.Collection)set50);
    java2.util2.ArrayList arrayList53 = java2.util2.Collections.list(enumeration52);
    java2.util2.Set set55 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection56 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set55);
    java2.util2.Enumeration enumeration57 = java2.util2.Collections.enumeration((java2.util2.Collection)set55);
    java2.util2.ArrayList arrayList58 = java2.util2.Collections.list(enumeration57);
    java2.util2.List list59 = java2.util2.Collections.singletonList((java.lang.Object)enumeration57);
    java2.util2.List list60 = java2.util2.Collections.unmodifiableList(list59);
    java2.util2.Collections.copy((java2.util2.List)arrayList53, list59);
    boolean b62 = java2.util2.Collections.replaceAll((java2.util2.List)arrayList28, (java.lang.Object)(byte)10, (java.lang.Object)list59);
    java2.util2.Collections.shuffle((java2.util2.List)arrayList28);
    java2.util2.Collections.copy((java2.util2.List)arrayList4, (java2.util2.List)arrayList28);
    java2.util2.List list65 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList4);
    java2.util2.Set set67 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set68 = java2.util2.Collections.singleton((java.lang.Object)set67);
    java2.util2.TreeSet treeSet69 = new java2.util2.TreeSet((java2.util2.Collection)set68);
    java2.util2.TreeSet treeSet70 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet69);
    java.lang.Object obj71 = treeSet70.first();
    java2.util2.SortedSet sortedSet73 = treeSet70.tailSet((java.lang.Object)(short)1);
    java2.util2.TreeSet treeSet74 = new java2.util2.TreeSet();
    java2.util2.Set set76 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection77 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set76);
    boolean b78 = treeSet74.removeAll(collection77);
    boolean b79 = treeSet70.containsAll((java2.util2.Collection)treeSet74);
    boolean b80 = arrayList4.containsAll((java2.util2.Collection)treeSet70);
    java2.util2.Comparator comparator81 = treeSet70.comparator();
    java2.util2.Set set82 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet69.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet69.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet69.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet70.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet70.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet70.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet74.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet74.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet74.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set82);

  }

  @Test
  public void test301() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test301"); }


    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set2);
    java2.util2.Collection collection4 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)set2);
    java2.util2.Map map5 = java2.util2.Collections.singletonMap((java.lang.Object)(-1), (java.lang.Object)collection4);
    java2.util2.Map map6 = java2.util2.Collections.unmodifiableMap(map5);
    java2.util2.Map map7 = java2.util2.Collections.unmodifiableMap(map5);
    java2.util2.Map map8 = java2.util2.Collections.unmodifiableMap(map5);
    java2.util2.Map map9 = java2.util2.Collections.unmodifiableMap(map5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map9);

  }

  @Test
  public void test302() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test302"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.List list5 = java2.util2.Collections.singletonList((java.lang.Object)enumeration3);
    java2.util2.Collections.reverse(list5);
    java2.util2.Set set8 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set8);
    java2.util2.Enumeration enumeration10 = java2.util2.Collections.enumeration((java2.util2.Collection)set8);
    java2.util2.ArrayList arrayList11 = java2.util2.Collections.list(enumeration10);
    java2.util2.Set set13 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection14 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set13);
    java2.util2.Enumeration enumeration15 = java2.util2.Collections.enumeration((java2.util2.Collection)set13);
    java2.util2.ArrayList arrayList16 = java2.util2.Collections.list(enumeration15);
    java2.util2.Collections.fill((java2.util2.List)arrayList11, (java.lang.Object)arrayList16);
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set19);
    java2.util2.Enumeration enumeration21 = java2.util2.Collections.enumeration((java2.util2.Collection)set19);
    java2.util2.ArrayList arrayList22 = java2.util2.Collections.list(enumeration21);
    java2.util2.List list23 = java2.util2.Collections.singletonList((java.lang.Object)enumeration21);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list23);
    java2.util2.Set set26 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection27 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set26);
    java2.util2.Enumeration enumeration28 = java2.util2.Collections.enumeration((java2.util2.Collection)set26);
    java2.util2.ArrayList arrayList29 = java2.util2.Collections.list(enumeration28);
    java2.util2.List list30 = java2.util2.Collections.singletonList((java.lang.Object)enumeration28);
    java2.util2.List list31 = java2.util2.Collections.unmodifiableList(list30);
    int i32 = java2.util2.Collections.indexOfSubList(list24, list30);
    java2.util2.Collections.fill((java2.util2.List)arrayList16, (java.lang.Object)list30);
    java2.util2.Collections.rotate((java2.util2.List)arrayList16, 0);
    java2.util2.Comparator comparator36 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj37 = java2.util2.Collections.max((java2.util2.Collection)arrayList16, comparator36);
    java2.util2.Comparator comparator38 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int i39 = java2.util2.Collections.binarySearch(list5, (java.lang.Object)comparator36, comparator38);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator38);

  }

  @Test
  public void test303() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test303"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java2.util2.Set set5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet3);
    java2.util2.List list6 = java2.util2.Collections.singletonList((java.lang.Object)treeSet3);
    java2.util2.Comparator comparator7 = treeSet3.comparator();
    java2.util2.Set set8 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj9 = java2.util2.Collections.min((java2.util2.Collection)set8);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);

  }

  @Test
  public void test304() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test304"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java2.util2.Set set5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet3);
    java2.util2.SortedSet sortedSet7 = treeSet3.tailSet((java.lang.Object)0.0d);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj8 = java2.util2.Collections.max((java2.util2.Collection)treeSet3);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);

  }

  @Test
  public void test305() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test305"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)set1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    java.lang.Object obj5 = treeSet4.first();
    java2.util2.SortedSet sortedSet7 = treeSet4.tailSet((java.lang.Object)(short)1);
    java2.util2.TreeSet treeSet8 = new java2.util2.TreeSet();
    java2.util2.Set set10 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection11 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set10);
    boolean b12 = treeSet8.removeAll(collection11);
    boolean b13 = treeSet4.containsAll((java2.util2.Collection)treeSet8);
    java2.util2.Enumeration enumeration14 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet8.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration14);

  }

  @Test
  public void test306() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test306"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Set set11 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set11);
    java2.util2.Enumeration enumeration13 = java2.util2.Collections.enumeration((java2.util2.Collection)set11);
    java2.util2.ArrayList arrayList14 = java2.util2.Collections.list(enumeration13);
    java2.util2.List list15 = java2.util2.Collections.singletonList((java.lang.Object)enumeration13);
    java2.util2.List list16 = java2.util2.Collections.unmodifiableList(list15);
    java2.util2.Collections.copy((java2.util2.List)arrayList9, list15);
    boolean b18 = arrayList4.containsAll((java2.util2.Collection)arrayList9);
    java2.util2.Collections.sort((java2.util2.List)arrayList9);
    java2.util2.Set set21 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection22 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set21);
    java2.util2.Comparator comparator23 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj24 = java2.util2.Collections.max(collection22, comparator23);
    java.lang.Object obj25 = java2.util2.Collections.min(collection22);
    java2.util2.Enumeration enumeration26 = java2.util2.Collections.enumeration(collection22);
    boolean b27 = arrayList9.containsAll(collection22);
    java2.util2.Set set29 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection30 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set29);
    java2.util2.Comparator comparator31 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj32 = java2.util2.Collections.max(collection30, comparator31);
    java2.util2.Enumeration enumeration33 = java2.util2.Collections.enumeration(collection30);
    java2.util2.Collections.fill((java2.util2.List)arrayList9, (java.lang.Object)collection30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 10L+ "'", obj24.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + 10L+ "'", obj25.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + 10L+ "'", obj32.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration33);

  }

  @Test
  public void test307() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test307"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Collections.fill((java2.util2.List)arrayList4, (java.lang.Object)arrayList9);
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set12);
    java2.util2.Enumeration enumeration14 = java2.util2.Collections.enumeration((java2.util2.Collection)set12);
    java2.util2.ArrayList arrayList15 = java2.util2.Collections.list(enumeration14);
    java2.util2.List list16 = java2.util2.Collections.singletonList((java.lang.Object)enumeration14);
    java2.util2.List list17 = java2.util2.Collections.unmodifiableList(list16);
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set19);
    java2.util2.Enumeration enumeration21 = java2.util2.Collections.enumeration((java2.util2.Collection)set19);
    java2.util2.ArrayList arrayList22 = java2.util2.Collections.list(enumeration21);
    java2.util2.List list23 = java2.util2.Collections.singletonList((java.lang.Object)enumeration21);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list23);
    int i25 = java2.util2.Collections.indexOfSubList(list17, list23);
    java2.util2.Collections.fill((java2.util2.List)arrayList9, (java.lang.Object)list23);
    java2.util2.Collections.rotate((java2.util2.List)arrayList9, 0);
    java2.util2.Comparator comparator29 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj30 = java2.util2.Collections.max((java2.util2.Collection)arrayList9, comparator29);
    java2.util2.Comparator comparator31 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort((java2.util2.List)arrayList9, comparator31);
    java2.util2.Set set34 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection35 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set34);
    java2.util2.Enumeration enumeration36 = java2.util2.Collections.enumeration((java2.util2.Collection)set34);
    java2.util2.ArrayList arrayList37 = java2.util2.Collections.list(enumeration36);
    java2.util2.Set set39 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection40 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set39);
    java2.util2.Enumeration enumeration41 = java2.util2.Collections.enumeration((java2.util2.Collection)set39);
    java2.util2.ArrayList arrayList42 = java2.util2.Collections.list(enumeration41);
    java2.util2.Set set44 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection45 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set44);
    java2.util2.Enumeration enumeration46 = java2.util2.Collections.enumeration((java2.util2.Collection)set44);
    java2.util2.ArrayList arrayList47 = java2.util2.Collections.list(enumeration46);
    java2.util2.List list48 = java2.util2.Collections.singletonList((java.lang.Object)enumeration46);
    java2.util2.List list49 = java2.util2.Collections.unmodifiableList(list48);
    java2.util2.Collections.copy((java2.util2.List)arrayList42, list48);
    boolean b51 = arrayList37.containsAll((java2.util2.Collection)arrayList42);
    java2.util2.Collections.sort((java2.util2.List)arrayList42);
    java2.util2.Set set55 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set56 = java2.util2.Collections.singleton((java.lang.Object)set55);
    java2.util2.TreeSet treeSet57 = new java2.util2.TreeSet((java2.util2.Collection)set56);
    java2.util2.TreeSet treeSet58 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet57);
    java.lang.Object obj59 = treeSet58.first();
    java2.util2.TreeSet treeSet60 = new java2.util2.TreeSet((java2.util2.Collection)treeSet58);
    java2.util2.Map map61 = java2.util2.Collections.singletonMap((java.lang.Object)100.0d, (java.lang.Object)treeSet60);
    boolean b62 = java2.util2.Collections.replaceAll((java2.util2.List)arrayList9, (java.lang.Object)arrayList42, (java.lang.Object)100.0d);
    java2.util2.Set set65 = java2.util2.Collections.singleton((java.lang.Object)' ');
    java2.util2.List list66 = java2.util2.Collections.nCopies(100, (java.lang.Object)set65);
    int i67 = java2.util2.Collections.indexOfSubList((java2.util2.List)arrayList9, list66);
    java2.util2.Set set69 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection70 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set69);
    java2.util2.Enumeration enumeration71 = java2.util2.Collections.enumeration((java2.util2.Collection)set69);
    java2.util2.ArrayList arrayList72 = java2.util2.Collections.list(enumeration71);
    java2.util2.Set set74 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection75 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set74);
    java2.util2.Enumeration enumeration76 = java2.util2.Collections.enumeration((java2.util2.Collection)set74);
    java2.util2.ArrayList arrayList77 = java2.util2.Collections.list(enumeration76);
    java2.util2.Set set79 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection80 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set79);
    java2.util2.Enumeration enumeration81 = java2.util2.Collections.enumeration((java2.util2.Collection)set79);
    java2.util2.ArrayList arrayList82 = java2.util2.Collections.list(enumeration81);
    java2.util2.List list83 = java2.util2.Collections.singletonList((java.lang.Object)enumeration81);
    java2.util2.List list84 = java2.util2.Collections.unmodifiableList(list83);
    java2.util2.Collections.copy((java2.util2.List)arrayList77, list83);
    boolean b86 = arrayList72.containsAll((java2.util2.Collection)arrayList77);
    java2.util2.Collections.sort((java2.util2.List)arrayList77);
    java2.util2.Collections.shuffle((java2.util2.List)arrayList77);
    int i89 = java2.util2.Collections.lastIndexOfSubList((java2.util2.List)arrayList9, (java2.util2.List)arrayList77);
    java2.util2.List list90 = java2.util2.Collections.synchronizedList((java2.util2.List)arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet57.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet57.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet57.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet58.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet58.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet58.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet60.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet60.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet60.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i89 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list90);

  }

  @Test
  public void test308() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test308"); }


    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)set2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet4);
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.List list7 = java2.util2.Collections.nCopies((-2), (java.lang.Object)treeSet5);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[[1.0]]");

  }

  @Test
  public void test309() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test309"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    java2.util2.ArrayList arrayList4 = java2.util2.Collections.list(enumeration3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)set6);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.Collections.fill((java2.util2.List)arrayList4, (java.lang.Object)arrayList9);
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set12);
    java2.util2.Enumeration enumeration14 = java2.util2.Collections.enumeration((java2.util2.Collection)set12);
    java2.util2.ArrayList arrayList15 = java2.util2.Collections.list(enumeration14);
    java2.util2.List list16 = java2.util2.Collections.singletonList((java.lang.Object)enumeration14);
    java2.util2.List list17 = java2.util2.Collections.unmodifiableList(list16);
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection collection20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set19);
    java2.util2.Enumeration enumeration21 = java2.util2.Collections.enumeration((java2.util2.Collection)set19);
    java2.util2.ArrayList arrayList22 = java2.util2.Collections.list(enumeration21);
    java2.util2.List list23 = java2.util2.Collections.singletonList((java.lang.Object)enumeration21);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list23);
    int i25 = java2.util2.Collections.indexOfSubList(list17, list23);
    java2.util2.Collections.fill((java2.util2.List)arrayList9, (java.lang.Object)list23);
    java2.util2.Comparator comparator27 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj28 = java2.util2.Collections.min((java2.util2.Collection)list23, comparator27);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj29 = java2.util2.Collections.min((java2.util2.Collection)list23);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj28);

  }

  @Test
  public void test310() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test310"); }


    java2.util2.Set set2 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)set2);
    java2.util2.Enumeration enumeration4 = java2.util2.Collections.enumeration((java2.util2.Collection)set2);
    java2.util2.Map map5 = java2.util2.Collections.singletonMap((java.lang.Object)10.0f, (java.lang.Object)enumeration4);
    java2.util2.Map map6 = java2.util2.Collections.unmodifiableMap(map5);
    java2.util2.Map map7 = java2.util2.Collections.synchronizedMap(map5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map7);

  }

}
