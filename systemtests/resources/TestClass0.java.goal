package foo.bar;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class TestClass0 {

  public static boolean debug = false;

  @Test
  public void test001() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test001"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    java2.util2.Collections.copy(list2, list5);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java.lang.Object obj9 = java2.util2.Collections.min((java2.util2.Collection)list5);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);

  }

  @Test
  public void test002() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test002"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set9 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set10 = java2.util2.Collections.unmodifiableSet(set9);
    java2.util2.List list13 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set14 = java2.util2.Collections.singleton((java.lang.Object)0);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet15 = treeSet5.subSet((java.lang.Object)set9, (java.lang.Object)set14);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);

  }

  @Test
  public void test003() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test003"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      boolean b7 = treeSet5.add((java.lang.Object)(short)(-1));
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");

  }

  @Test
  public void test004() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test004"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set13 = java2.util2.Collections.unmodifiableSet(set12);
    java2.util2.TreeSet treeSet14 = new java2.util2.TreeSet((java2.util2.Collection)set12);
    java2.util2.SortedSet sortedSet16 = treeSet14.tailSet((java.lang.Object)(short)0);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      boolean b17 = treeSet5.add((java.lang.Object)sortedSet16);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet14.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet16);

  }

  @Test
  public void test005() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test005"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    java2.util2.Collections.copy(list2, list5);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java2.util2.Collections.swap(list2, 10, 1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);

  }

  @Test
  public void test006() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test006"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list2);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java.lang.Object obj4 = java2.util2.Collections.max((java2.util2.Collection)list2);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);

  }

  @Test
  public void test007() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test007"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list3 = java2.util2.Collections.unmodifiableList(list2);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java2.util2.Collections.swap(list2, 100, 1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);

  }

  @Test
  public void test008() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test008"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list2);
    java2.util2.List list4 = java2.util2.Collections.unmodifiableList(list2);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java.lang.Object obj5 = java2.util2.Collections.min((java2.util2.Collection)list2);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list4);

  }

  @Test
  public void test009() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test009"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.fill(list2, (java.lang.Object)(-1.0d));
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java2.util2.Collections.swap(list2, 100, (-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);

  }

  @Test
  public void test010() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test010"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list2);
    java2.util2.List list4 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.Collection collection5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list4);
    java2.util2.Collections.shuffle(list4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection5);

  }

  @Test
  public void test011() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test011"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java.lang.Object[] obj_array9 = treeSet5.toArray();
    java2.util2.Set set10 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet5);
    java2.util2.List list13 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list13);
    java2.util2.List list15 = java2.util2.Collections.unmodifiableList(list13);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet16 = treeSet5.headSet((java.lang.Object)list13);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);

  }

  @Test
  public void test012() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test012"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)1);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java2.util2.Collections.sort(list1);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);

  }

  @Test
  public void test013() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test013"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet5);
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set10 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set11 = java2.util2.Collections.unmodifiableSet(set10);
    java2.util2.TreeSet treeSet12 = new java2.util2.TreeSet((java2.util2.Collection)set10);
    java2.util2.SortedSet sortedSet14 = treeSet12.tailSet((java.lang.Object)(short)0);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet15 = treeSet5.headSet((java.lang.Object)sortedSet14);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet12.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet12.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet14);

  }

  @Test
  public void test014() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test014"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java.lang.Object[] obj_array9 = treeSet5.toArray();
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set13 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet14 = new java2.util2.TreeSet((java2.util2.Collection)set13);
    java.lang.Object[] obj_array15 = treeSet14.toArray();
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list21);
    java2.util2.List list23 = java2.util2.Collections.unmodifiableList(list21);
    java2.util2.Collections.copy(list18, list21);
    boolean b25 = treeSet14.addAll((java2.util2.Collection)list18);
    java.lang.Object obj26 = treeSet14.first();
    java2.util2.SortedSet sortedSet28 = treeSet14.tailSet((java.lang.Object)"");
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      boolean b29 = treeSet5.contains((java.lang.Object)"");
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet14.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + 0+ "'", obj26.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet28);

  }

  @Test
  public void test015() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test015"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    int i8 = java2.util2.Collections.indexOfSubList(list2, list7);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list14);
    java2.util2.List list16 = java2.util2.Collections.unmodifiableList(list14);
    java2.util2.Collections.copy(list11, list14);
    java2.util2.Collections.copy(list7, list11);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java.lang.Object obj19 = java2.util2.Collections.min((java2.util2.Collection)list7);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);

  }

  @Test
  public void test016() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test016"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set4 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set4);
    java.lang.Object[] obj_array6 = treeSet5.toArray();
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list12);
    java2.util2.List list14 = java2.util2.Collections.unmodifiableList(list12);
    java2.util2.Collections.copy(list9, list12);
    boolean b16 = treeSet5.addAll((java2.util2.Collection)list9);
    java.lang.Object obj17 = treeSet5.first();
    java2.util2.SortedSet sortedSet19 = treeSet5.tailSet((java.lang.Object)"");
    java2.util2.List list20 = java2.util2.Collections.nCopies(1, (java.lang.Object)treeSet5);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java2.util2.Collections.sort(list20);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + 0+ "'", obj17.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);

  }

  @Test
  public void test017() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test017"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set9 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet10 = new java2.util2.TreeSet((java2.util2.Collection)set9);
    java.lang.Object[] obj_array11 = treeSet10.toArray();
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list17 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list17);
    java2.util2.List list19 = java2.util2.Collections.unmodifiableList(list17);
    java2.util2.Collections.copy(list14, list17);
    boolean b21 = treeSet10.addAll((java2.util2.Collection)list14);
    java2.util2.List list24 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list25 = java2.util2.Collections.unmodifiableList(list24);
    java2.util2.Collections.fill(list14, (java.lang.Object)list25);
    java2.util2.List list27 = java2.util2.Collections.unmodifiableList(list25);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      boolean b28 = treeSet4.contains((java.lang.Object)list27);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet10.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);

  }

  @Test
  public void test018() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test018"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.fill(list2, (java.lang.Object)(-1.0d));
    java2.util2.Collections.shuffle(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);

  }

  @Test
  public void test019() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test019"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    int i16 = treeSet4.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);

  }

  @Test
  public void test020() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test020"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.Set set6 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet4);
    boolean b7 = treeSet4.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);

  }

  @Test
  public void test021() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test021"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set4 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set4);
    java.lang.Object[] obj_array6 = treeSet5.toArray();
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list12);
    java2.util2.List list14 = java2.util2.Collections.unmodifiableList(list12);
    java2.util2.Collections.copy(list9, list12);
    boolean b16 = treeSet5.addAll((java2.util2.Collection)list9);
    java.lang.Object obj17 = treeSet5.first();
    java2.util2.SortedSet sortedSet19 = treeSet5.tailSet((java.lang.Object)"");
    java2.util2.List list20 = java2.util2.Collections.nCopies(1, (java.lang.Object)treeSet5);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java.lang.Object obj21 = java2.util2.Collections.min((java2.util2.Collection)list20);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + 0+ "'", obj17.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);

  }

  @Test
  public void test022() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test022"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    java2.util2.Collections.copy(list2, list5);
    java2.util2.Collections.rotate(list2, 0);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java2.util2.Collections.swap(list2, 1, 10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);

  }

  @Test
  public void test023() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test023"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list9);
    java2.util2.List list11 = java2.util2.Collections.unmodifiableList(list9);
    int i12 = java2.util2.Collections.indexOfSubList(list6, list11);
    java2.util2.List list13 = java2.util2.Collections.synchronizedList(list11);
    int i14 = java2.util2.Collections.lastIndexOfSubList(list2, list11);
    java2.util2.Collection collection15 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list2);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list21);
    java2.util2.List list23 = java2.util2.Collections.unmodifiableList(list21);
    int i24 = java2.util2.Collections.indexOfSubList(list18, list23);
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list30 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list30);
    java2.util2.List list32 = java2.util2.Collections.unmodifiableList(list30);
    int i33 = java2.util2.Collections.indexOfSubList(list27, list32);
    java2.util2.List list36 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list39 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list39);
    java2.util2.List list41 = java2.util2.Collections.unmodifiableList(list39);
    java2.util2.Collections.copy(list36, list39);
    java2.util2.Collections.copy(list32, list36);
    java2.util2.List list46 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list49 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list49);
    java2.util2.List list51 = java2.util2.Collections.unmodifiableList(list49);
    java2.util2.Collections.copy(list46, list49);
    int i53 = java2.util2.Collections.indexOfSubList(list36, list49);
    java2.util2.List list56 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list59 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list59);
    java2.util2.List list61 = java2.util2.Collections.unmodifiableList(list59);
    int i62 = java2.util2.Collections.indexOfSubList(list56, list61);
    java2.util2.List list65 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list68 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list68);
    java2.util2.List list70 = java2.util2.Collections.unmodifiableList(list68);
    java2.util2.Collections.copy(list65, list68);
    java2.util2.Collections.copy(list61, list65);
    java2.util2.List list75 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list78 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list78);
    java2.util2.List list80 = java2.util2.Collections.unmodifiableList(list78);
    java2.util2.Collections.copy(list75, list78);
    int i82 = java2.util2.Collections.indexOfSubList(list65, list78);
    boolean b83 = java2.util2.Collections.replaceAll(list23, (java.lang.Object)list36, (java.lang.Object)list65);
    java2.util2.List list86 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set87 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet88 = new java2.util2.TreeSet((java2.util2.Collection)set87);
    java.lang.Object[] obj_array89 = treeSet88.toArray();
    int i90 = java2.util2.Collections.binarySearch(list23, (java.lang.Object)treeSet88);
    int i91 = java2.util2.Collections.lastIndexOfSubList(list2, list23);
    java2.util2.Collections.reverse(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet88.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet88.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet88.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 0);

  }

  @Test
  public void test024() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test024"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list19 = java2.util2.Collections.unmodifiableList(list18);
    java2.util2.Collections.fill(list8, (java.lang.Object)list19);
    java2.util2.List list23 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list23);
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.fill(list23, (java.lang.Object)(-1.0d));
    java2.util2.Collections.copy(list19, list23);
    java2.util2.List list32 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list33 = java2.util2.Collections.unmodifiableList(list32);
    java2.util2.List list34 = java2.util2.Collections.unmodifiableList(list32);
    java2.util2.Collections.copy(list19, list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);

  }

  @Test
  public void test025() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test025"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet7 = treeSet5.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj8 = java2.util2.Collections.max((java2.util2.Collection)treeSet5);
    boolean b9 = treeSet5.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 0+ "'", obj8.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test026() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test026"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.first();
    java2.util2.SortedSet sortedSet18 = treeSet4.tailSet((java.lang.Object)"");
    java.lang.String str19 = treeSet4.toString();
    java2.util2.List list23 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list26 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list26);
    java2.util2.List list28 = java2.util2.Collections.unmodifiableList(list26);
    int i29 = java2.util2.Collections.indexOfSubList(list23, list28);
    java2.util2.Map map30 = java2.util2.Collections.singletonMap((java.lang.Object)0L, (java.lang.Object)list28);
    java2.util2.Map map31 = java2.util2.Collections.synchronizedMap(map30);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      boolean b32 = treeSet4.remove((java.lang.Object)map31);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 0+ "'", obj16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[0]"+ "'", str19.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map31);

  }

  @Test
  public void test027() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test027"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.Comparator comparator16 = treeSet4.comparator();
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      boolean b18 = treeSet4.contains((java.lang.Object)"");
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator16);

  }

  @Test
  public void test028() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test028"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet7 = treeSet5.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj8 = java2.util2.Collections.max((java2.util2.Collection)treeSet5);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list14);
    java2.util2.List list16 = java2.util2.Collections.unmodifiableList(list14);
    int i17 = java2.util2.Collections.indexOfSubList(list11, list16);
    java2.util2.List list20 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list23 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list23);
    java2.util2.List list25 = java2.util2.Collections.unmodifiableList(list23);
    java2.util2.Collections.copy(list20, list23);
    java2.util2.Collections.copy(list16, list20);
    java2.util2.List list30 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list33 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list33);
    java2.util2.List list35 = java2.util2.Collections.unmodifiableList(list33);
    java2.util2.Collections.copy(list30, list33);
    int i37 = java2.util2.Collections.indexOfSubList(list20, list33);
    boolean b38 = treeSet5.equals((java.lang.Object)list20);
    treeSet5.clear();
    boolean b40 = treeSet5.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 0+ "'", obj8.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);

  }

  @Test
  public void test029() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test029"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set4 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set4);
    java.lang.Object[] obj_array6 = treeSet5.toArray();
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list12);
    java2.util2.List list14 = java2.util2.Collections.unmodifiableList(list12);
    java2.util2.Collections.copy(list9, list12);
    boolean b16 = treeSet5.addAll((java2.util2.Collection)list9);
    java.lang.Object obj17 = treeSet5.first();
    java2.util2.SortedSet sortedSet19 = treeSet5.tailSet((java.lang.Object)"");
    java2.util2.List list20 = java2.util2.Collections.nCopies(1, (java.lang.Object)treeSet5);
    java.lang.String str21 = treeSet5.toString();
    java2.util2.List list24 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list24);
    java2.util2.List list28 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.fill(list24, (java.lang.Object)(-1.0d));
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      boolean b30 = treeSet5.add((java.lang.Object)list24);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + 0+ "'", obj17.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[0]"+ "'", str21.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);

  }

  @Test
  public void test030() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test030"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list3 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.List list4 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.List list7 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set8 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set9 = java2.util2.Collections.unmodifiableSet(set8);
    java2.util2.TreeSet treeSet10 = new java2.util2.TreeSet((java2.util2.Collection)set8);
    java2.util2.SortedSet sortedSet12 = treeSet10.headSet((java.lang.Object)(short)(-1));
    java2.util2.Collections.fill(list4, (java.lang.Object)sortedSet12);
    java2.util2.List list16 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list19 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list19);
    java2.util2.List list21 = java2.util2.Collections.unmodifiableList(list19);
    int i22 = java2.util2.Collections.indexOfSubList(list16, list21);
    java2.util2.List list25 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list28 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list28);
    java2.util2.List list30 = java2.util2.Collections.unmodifiableList(list28);
    java2.util2.Collections.copy(list25, list28);
    java2.util2.Collections.copy(list21, list25);
    java2.util2.List list35 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list38 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list38);
    java2.util2.List list40 = java2.util2.Collections.unmodifiableList(list38);
    java2.util2.Collections.copy(list35, list38);
    int i42 = java2.util2.Collections.indexOfSubList(list25, list38);
    java2.util2.Comparator comparator43 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list38, comparator43);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java.lang.Object obj45 = java2.util2.Collections.max((java2.util2.Collection)list4, comparator43);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet10.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator43);

  }

  @Test
  public void test031() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test031"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list9);
    java2.util2.List list11 = java2.util2.Collections.unmodifiableList(list9);
    int i12 = java2.util2.Collections.indexOfSubList(list6, list11);
    java2.util2.List list13 = java2.util2.Collections.synchronizedList(list11);
    int i14 = java2.util2.Collections.lastIndexOfSubList(list2, list11);
    java2.util2.Collection collection15 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list2);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list21);
    java2.util2.List list23 = java2.util2.Collections.unmodifiableList(list21);
    int i24 = java2.util2.Collections.indexOfSubList(list18, list23);
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list30 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list30);
    java2.util2.List list32 = java2.util2.Collections.unmodifiableList(list30);
    int i33 = java2.util2.Collections.indexOfSubList(list27, list32);
    java2.util2.List list36 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list39 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list39);
    java2.util2.List list41 = java2.util2.Collections.unmodifiableList(list39);
    java2.util2.Collections.copy(list36, list39);
    java2.util2.Collections.copy(list32, list36);
    java2.util2.List list46 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list49 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list49);
    java2.util2.List list51 = java2.util2.Collections.unmodifiableList(list49);
    java2.util2.Collections.copy(list46, list49);
    int i53 = java2.util2.Collections.indexOfSubList(list36, list49);
    java2.util2.List list56 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list59 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list59);
    java2.util2.List list61 = java2.util2.Collections.unmodifiableList(list59);
    int i62 = java2.util2.Collections.indexOfSubList(list56, list61);
    java2.util2.List list65 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list68 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list68);
    java2.util2.List list70 = java2.util2.Collections.unmodifiableList(list68);
    java2.util2.Collections.copy(list65, list68);
    java2.util2.Collections.copy(list61, list65);
    java2.util2.List list75 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list78 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list78);
    java2.util2.List list80 = java2.util2.Collections.unmodifiableList(list78);
    java2.util2.Collections.copy(list75, list78);
    int i82 = java2.util2.Collections.indexOfSubList(list65, list78);
    boolean b83 = java2.util2.Collections.replaceAll(list23, (java.lang.Object)list36, (java.lang.Object)list65);
    java2.util2.List list86 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set87 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet88 = new java2.util2.TreeSet((java2.util2.Collection)set87);
    java.lang.Object[] obj_array89 = treeSet88.toArray();
    int i90 = java2.util2.Collections.binarySearch(list23, (java.lang.Object)treeSet88);
    int i91 = java2.util2.Collections.lastIndexOfSubList(list2, list23);
    java2.util2.List list92 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.Collections.sort(list92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet88.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet88.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet88.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list92);

  }

  @Test
  public void test032() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test032"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet7 = treeSet5.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj8 = java2.util2.Collections.max((java2.util2.Collection)treeSet5);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet14 = treeSet5.tailSet((java.lang.Object)list11);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 0+ "'", obj8.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);

  }

  @Test
  public void test033() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test033"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set13 = java2.util2.Collections.unmodifiableSet(set12);
    java2.util2.TreeSet treeSet14 = new java2.util2.TreeSet((java2.util2.Collection)set12);
    java2.util2.SortedSet sortedSet16 = treeSet14.headSet((java.lang.Object)(short)(-1));
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      boolean b17 = treeSet5.containsAll((java2.util2.Collection)sortedSet16);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet14.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet16);

  }

  @Test
  public void test034() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test034"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    int i8 = java2.util2.Collections.indexOfSubList(list2, list7);
    java2.util2.Enumeration enumeration9 = java2.util2.Collections.enumeration((java2.util2.Collection)list2);
    java2.util2.ArrayList arrayList10 = java2.util2.Collections.list(enumeration9);
    java.lang.Object[] obj_array11 = arrayList10.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array11);

  }

  @Test
  public void test035() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test035"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java.lang.Object obj1 = treeSet0.last();
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");

  }

  @Test
  public void test036() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test036"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    int i8 = java2.util2.Collections.indexOfSubList(list2, list7);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java2.util2.Collections.swap(list7, 100, (-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);

  }

  @Test
  public void test037() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test037"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list3 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set7 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set8 = java2.util2.Collections.unmodifiableSet(set7);
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.Collection)set7);
    java2.util2.SortedSet sortedSet11 = treeSet9.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj12 = java2.util2.Collections.max((java2.util2.Collection)treeSet9);
    java2.util2.List list15 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list18);
    java2.util2.List list20 = java2.util2.Collections.unmodifiableList(list18);
    int i21 = java2.util2.Collections.indexOfSubList(list15, list20);
    java2.util2.List list22 = java2.util2.Collections.synchronizedList(list20);
    boolean b23 = treeSet9.retainAll((java2.util2.Collection)list22);
    int i24 = java2.util2.Collections.lastIndexOfSubList(list3, list22);
    java2.util2.Collections.sort(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 0+ "'", obj12.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);

  }

  @Test
  public void test038() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test038"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list19 = java2.util2.Collections.unmodifiableList(list18);
    java2.util2.Collections.fill(list8, (java.lang.Object)list19);
    java2.util2.List list23 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list26 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list26);
    java2.util2.List list28 = java2.util2.Collections.unmodifiableList(list26);
    java2.util2.Collections.copy(list23, list26);
    java2.util2.Collections.rotate(list23, 0);
    java2.util2.List list34 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list37 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list37);
    java2.util2.List list39 = java2.util2.Collections.unmodifiableList(list37);
    int i40 = java2.util2.Collections.indexOfSubList(list34, list39);
    java2.util2.List list43 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list46 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list46);
    java2.util2.List list48 = java2.util2.Collections.unmodifiableList(list46);
    java2.util2.Collections.copy(list43, list46);
    java2.util2.Collections.copy(list39, list43);
    java2.util2.List list53 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list56 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list56);
    java2.util2.List list58 = java2.util2.Collections.unmodifiableList(list56);
    java2.util2.Collections.copy(list53, list56);
    int i60 = java2.util2.Collections.indexOfSubList(list43, list56);
    java2.util2.Comparator comparator61 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list56, comparator61);
    java2.util2.Collections.sort(list23, comparator61);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java.lang.Object obj64 = java2.util2.Collections.min((java2.util2.Collection)list8, comparator61);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator61);

  }

  @Test
  public void test039() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test039"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.Comparator comparator16 = treeSet4.comparator();
    java2.util2.List list20 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set21 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet22 = new java2.util2.TreeSet((java2.util2.Collection)set21);
    java.lang.Object[] obj_array23 = treeSet22.toArray();
    java2.util2.List list26 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list29 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list29);
    java2.util2.List list31 = java2.util2.Collections.unmodifiableList(list29);
    java2.util2.Collections.copy(list26, list29);
    boolean b33 = treeSet22.addAll((java2.util2.Collection)list26);
    java.lang.Object obj34 = treeSet22.first();
    java2.util2.SortedSet sortedSet36 = treeSet22.tailSet((java.lang.Object)"");
    java2.util2.List list37 = java2.util2.Collections.nCopies(1, (java.lang.Object)treeSet22);
    java.lang.String str38 = treeSet22.toString();
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      boolean b39 = treeSet4.contains((java.lang.Object)treeSet22);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet22.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet22.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet22.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj34 + "' != '" + 0+ "'", obj34.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "[0]"+ "'", str38.equals("[0]"));

  }

  @Test
  public void test040() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test040"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet7 = treeSet5.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj8 = java2.util2.Collections.max((java2.util2.Collection)treeSet5);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list14);
    java2.util2.List list16 = java2.util2.Collections.unmodifiableList(list14);
    int i17 = java2.util2.Collections.indexOfSubList(list11, list16);
    java2.util2.List list20 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list23 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list23);
    java2.util2.List list25 = java2.util2.Collections.unmodifiableList(list23);
    java2.util2.Collections.copy(list20, list23);
    java2.util2.Collections.copy(list16, list20);
    java2.util2.List list30 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list33 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list33);
    java2.util2.List list35 = java2.util2.Collections.unmodifiableList(list33);
    java2.util2.Collections.copy(list30, list33);
    int i37 = java2.util2.Collections.indexOfSubList(list20, list33);
    boolean b38 = treeSet5.equals((java.lang.Object)list20);
    treeSet5.clear();
    treeSet5.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 0+ "'", obj8.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);

  }

  @Test
  public void test041() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test041"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)1);
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list6 = java2.util2.Collections.unmodifiableList(list5);
    int i7 = java2.util2.Collections.lastIndexOfSubList(list2, list5);
    java2.util2.Collections.reverse(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);

  }

  @Test
  public void test042() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test042"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    int i8 = java2.util2.Collections.indexOfSubList(list2, list7);
    java2.util2.Enumeration enumeration9 = java2.util2.Collections.enumeration((java2.util2.Collection)list2);
    java2.util2.ArrayList arrayList10 = java2.util2.Collections.list(enumeration9);
    java2.util2.Set set11 = java2.util2.Collections.singleton((java.lang.Object)enumeration9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);

  }

  @Test
  public void test043() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test043"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    java2.util2.Collections.copy(list2, list5);
    int i10 = java2.util2.Collections.binarySearch(list5, (java.lang.Object)10.0f);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java.lang.Object obj11 = java2.util2.Collections.max((java2.util2.Collection)list5);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test044() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test044"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list19 = java2.util2.Collections.unmodifiableList(list18);
    java2.util2.Collections.fill(list8, (java.lang.Object)list19);
    java2.util2.List list23 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list23);
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list30 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list30);
    java2.util2.List list32 = java2.util2.Collections.unmodifiableList(list30);
    int i33 = java2.util2.Collections.indexOfSubList(list27, list32);
    java2.util2.List list36 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list39 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list39);
    java2.util2.List list41 = java2.util2.Collections.unmodifiableList(list39);
    java2.util2.Collections.copy(list36, list39);
    java2.util2.Collections.copy(list32, list36);
    java2.util2.List list46 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list49 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list49);
    java2.util2.List list51 = java2.util2.Collections.unmodifiableList(list49);
    java2.util2.Collections.copy(list46, list49);
    int i53 = java2.util2.Collections.indexOfSubList(list36, list49);
    java2.util2.Comparator comparator54 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list49, comparator54);
    int i56 = java2.util2.Collections.binarySearch(list19, (java.lang.Object)list23, comparator54);
    java2.util2.Collections.sort(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == (-1));

  }

  @Test
  public void test045() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test045"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list19 = java2.util2.Collections.unmodifiableList(list18);
    java2.util2.Collections.fill(list8, (java.lang.Object)list19);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java2.util2.Collections.swap(list8, 1, 10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);

  }

  @Test
  public void test046() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test046"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.clone();
    java2.util2.List list20 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set21 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set22 = java2.util2.Collections.unmodifiableSet(set21);
    java2.util2.TreeSet treeSet23 = new java2.util2.TreeSet((java2.util2.Collection)set21);
    java2.util2.SortedSet sortedSet25 = treeSet23.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj26 = java2.util2.Collections.max((java2.util2.Collection)treeSet23);
    java2.util2.List list29 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set30 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet31 = new java2.util2.TreeSet((java2.util2.Collection)set30);
    java.lang.Object[] obj_array32 = treeSet31.toArray();
    java2.util2.List list35 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list38 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list38);
    java2.util2.List list40 = java2.util2.Collections.unmodifiableList(list38);
    java2.util2.Collections.copy(list35, list38);
    boolean b42 = treeSet31.addAll((java2.util2.Collection)list35);
    java2.util2.List list45 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list46 = java2.util2.Collections.unmodifiableList(list45);
    java2.util2.Collections.fill(list35, (java.lang.Object)list46);
    boolean b48 = treeSet23.removeAll((java2.util2.Collection)list35);
    java2.util2.List list49 = java2.util2.Collections.nCopies(1, (java.lang.Object)list35);
    java2.util2.SortedSet sortedSet50 = treeSet4.tailSet((java.lang.Object)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet23.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet23.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet23.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + 0+ "'", obj26.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet31.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet31.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet31.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet50);

  }

  @Test
  public void test047() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test047"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list19 = java2.util2.Collections.unmodifiableList(list18);
    java2.util2.Collections.fill(list8, (java.lang.Object)list19);
    java2.util2.Collection collection21 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list8);
    java2.util2.List list22 = java2.util2.Collections.unmodifiableList(list8);
    java2.util2.List list25 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list26 = java2.util2.Collections.unmodifiableList(list25);
    java2.util2.List list29 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set30 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set31 = java2.util2.Collections.unmodifiableSet(set30);
    java2.util2.TreeSet treeSet32 = new java2.util2.TreeSet((java2.util2.Collection)set30);
    java2.util2.SortedSet sortedSet34 = treeSet32.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj35 = java2.util2.Collections.max((java2.util2.Collection)treeSet32);
    java2.util2.List list38 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list41 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list41);
    java2.util2.List list43 = java2.util2.Collections.unmodifiableList(list41);
    int i44 = java2.util2.Collections.indexOfSubList(list38, list43);
    java2.util2.List list45 = java2.util2.Collections.synchronizedList(list43);
    boolean b46 = treeSet32.retainAll((java2.util2.Collection)list45);
    int i47 = java2.util2.Collections.lastIndexOfSubList(list26, list45);
    java2.util2.Collections.reverse(list45);
    java2.util2.Collections.copy(list8, list45);
    java2.util2.Collections.reverse(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet32.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet32.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet32.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + 0+ "'", obj35.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);

  }

  @Test
  public void test048() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test048"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet7 = treeSet5.headSet((java.lang.Object)(short)(-1));
    java2.util2.List list10 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set11 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet12 = new java2.util2.TreeSet((java2.util2.Collection)set11);
    java.lang.Object[] obj_array13 = treeSet12.toArray();
    java2.util2.List list16 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list19 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list19);
    java2.util2.List list21 = java2.util2.Collections.unmodifiableList(list19);
    java2.util2.Collections.copy(list16, list19);
    boolean b23 = treeSet12.addAll((java2.util2.Collection)list16);
    java.lang.Object obj24 = treeSet12.first();
    boolean b25 = treeSet5.contains(obj24);
    java.lang.Object obj26 = treeSet5.last();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet12.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet12.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 0+ "'", obj24.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + 0+ "'", obj26.equals(0));

  }

  @Test
  public void test049() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test049"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java.lang.Object[] obj_array9 = treeSet5.toArray();
    java2.util2.SortedSet sortedSet11 = treeSet5.tailSet((java.lang.Object)"[0]");
    int i12 = treeSet5.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);

  }

  @Test
  public void test050() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test050"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list6);
    java2.util2.List list8 = java2.util2.Collections.unmodifiableList(list6);
    int i9 = java2.util2.Collections.indexOfSubList(list3, list8);
    java2.util2.Map map10 = java2.util2.Collections.singletonMap((java.lang.Object)0L, (java.lang.Object)list8);
    java2.util2.Map map11 = java2.util2.Collections.synchronizedMap(map10);
    java2.util2.Map map12 = java2.util2.Collections.unmodifiableMap(map11);
    java2.util2.Map map13 = java2.util2.Collections.synchronizedMap(map12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map13);

  }

  @Test
  public void test051() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test051"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java.lang.Object[] obj_array9 = treeSet5.toArray();
    java2.util2.TreeSet treeSet10 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet5);
    java.lang.Object obj11 = treeSet5.last();
    boolean b12 = treeSet5.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet10.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + 0+ "'", obj11.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test052() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test052"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet7 = treeSet5.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj8 = java2.util2.Collections.max((java2.util2.Collection)treeSet5);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list14);
    java2.util2.List list16 = java2.util2.Collections.unmodifiableList(list14);
    int i17 = java2.util2.Collections.indexOfSubList(list11, list16);
    java2.util2.List list20 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list23 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list23);
    java2.util2.List list25 = java2.util2.Collections.unmodifiableList(list23);
    java2.util2.Collections.copy(list20, list23);
    java2.util2.Collections.copy(list16, list20);
    java2.util2.List list30 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list33 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list33);
    java2.util2.List list35 = java2.util2.Collections.unmodifiableList(list33);
    java2.util2.Collections.copy(list30, list33);
    int i37 = java2.util2.Collections.indexOfSubList(list20, list33);
    boolean b38 = treeSet5.equals((java.lang.Object)list20);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java.lang.Object obj39 = java2.util2.Collections.min((java2.util2.Collection)list20);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 0+ "'", obj8.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);

  }

  @Test
  public void test053() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test053"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set4 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set5 = java2.util2.Collections.unmodifiableSet(set4);
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet((java2.util2.Collection)set4);
    java2.util2.SortedSet sortedSet8 = treeSet6.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj9 = java2.util2.Collections.max((java2.util2.Collection)treeSet6);
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set13 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet14 = new java2.util2.TreeSet((java2.util2.Collection)set13);
    java.lang.Object[] obj_array15 = treeSet14.toArray();
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list21);
    java2.util2.List list23 = java2.util2.Collections.unmodifiableList(list21);
    java2.util2.Collections.copy(list18, list21);
    boolean b25 = treeSet14.addAll((java2.util2.Collection)list18);
    java2.util2.List list28 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list29 = java2.util2.Collections.unmodifiableList(list28);
    java2.util2.Collections.fill(list18, (java.lang.Object)list29);
    boolean b31 = treeSet6.removeAll((java2.util2.Collection)list18);
    java2.util2.List list32 = java2.util2.Collections.nCopies(1, (java.lang.Object)list18);
    java2.util2.Collections.shuffle(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 0+ "'", obj9.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet14.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);

  }

  @Test
  public void test054() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test054"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.first();
    java2.util2.SortedSet sortedSet18 = treeSet4.tailSet((java.lang.Object)"");
    java.lang.String str19 = treeSet4.toString();
    java2.util2.List list22 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set23 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet24 = new java2.util2.TreeSet((java2.util2.Collection)set23);
    java.lang.Object[] obj_array25 = treeSet24.toArray();
    java.lang.Object[] obj_array26 = treeSet4.toArray(obj_array25);
    java2.util2.List list29 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set30 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet31 = new java2.util2.TreeSet((java2.util2.Collection)set30);
    java.lang.Object[] obj_array32 = treeSet31.toArray();
    java2.util2.List list35 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list38 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list38);
    java2.util2.List list40 = java2.util2.Collections.unmodifiableList(list38);
    java2.util2.Collections.copy(list35, list38);
    boolean b42 = treeSet31.addAll((java2.util2.Collection)list35);
    java.lang.Object obj43 = treeSet31.first();
    java2.util2.SortedSet sortedSet45 = treeSet31.tailSet((java.lang.Object)"");
    java2.util2.SortedSet sortedSet46 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet31);
    boolean b47 = treeSet4.equals((java.lang.Object)treeSet31);
    java2.util2.Comparator comparator48 = treeSet31.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 0+ "'", obj16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[0]"+ "'", str19.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet24.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet24.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet24.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet31.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet31.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet31.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj43 + "' != '" + 0+ "'", obj43.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator48);

  }

  @Test
  public void test055() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test055"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.clone();
    java2.util2.List list19 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set20 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set21 = java2.util2.Collections.unmodifiableSet(set20);
    java2.util2.TreeSet treeSet22 = new java2.util2.TreeSet((java2.util2.Collection)set20);
    java2.util2.SortedSet sortedSet23 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet22);
    boolean b24 = treeSet4.removeAll((java2.util2.Collection)treeSet22);
    java.lang.Object obj25 = treeSet22.first();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet22.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet22.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet22.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + 0+ "'", obj25.equals(0));

  }

  @Test
  public void test056() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test056"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list6);
    java2.util2.List list8 = java2.util2.Collections.unmodifiableList(list6);
    int i9 = java2.util2.Collections.indexOfSubList(list3, list8);
    java2.util2.Map map10 = java2.util2.Collections.singletonMap((java.lang.Object)0L, (java.lang.Object)list8);
    java2.util2.Map map11 = java2.util2.Collections.synchronizedMap(map10);
    java2.util2.Map map12 = java2.util2.Collections.synchronizedMap(map11);
    java2.util2.Map map13 = java2.util2.Collections.synchronizedMap(map12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map13);

  }

  @Test
  public void test057() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test057"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java.lang.Object[] obj_array9 = treeSet5.toArray();
    java.lang.Object obj10 = treeSet5.first();
    java2.util2.List list13 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list14 = java2.util2.Collections.unmodifiableList(list13);
    java2.util2.List list17 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set18 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set19 = java2.util2.Collections.unmodifiableSet(set18);
    java2.util2.TreeSet treeSet20 = new java2.util2.TreeSet((java2.util2.Collection)set18);
    java2.util2.SortedSet sortedSet22 = treeSet20.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj23 = java2.util2.Collections.max((java2.util2.Collection)treeSet20);
    java2.util2.List list26 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list29 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list29);
    java2.util2.List list31 = java2.util2.Collections.unmodifiableList(list29);
    int i32 = java2.util2.Collections.indexOfSubList(list26, list31);
    java2.util2.List list33 = java2.util2.Collections.synchronizedList(list31);
    boolean b34 = treeSet20.retainAll((java2.util2.Collection)list33);
    int i35 = java2.util2.Collections.lastIndexOfSubList(list14, list33);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      boolean b36 = treeSet5.contains((java.lang.Object)list33);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 0+ "'", obj10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet20.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet20.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet20.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 0+ "'", obj23.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);

  }

  @Test
  public void test058() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test058"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet7 = treeSet5.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj8 = java2.util2.Collections.max((java2.util2.Collection)treeSet5);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet((java2.util2.Collection)set12);
    java.lang.Object[] obj_array14 = treeSet13.toArray();
    java2.util2.List list17 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list20 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list20);
    java2.util2.List list22 = java2.util2.Collections.unmodifiableList(list20);
    java2.util2.Collections.copy(list17, list20);
    boolean b24 = treeSet13.addAll((java2.util2.Collection)list17);
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list28 = java2.util2.Collections.unmodifiableList(list27);
    java2.util2.Collections.fill(list17, (java.lang.Object)list28);
    boolean b30 = treeSet5.removeAll((java2.util2.Collection)list17);
    java2.util2.List list33 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set34 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set35 = java2.util2.Collections.unmodifiableSet(set34);
    java2.util2.TreeSet treeSet36 = new java2.util2.TreeSet((java2.util2.Collection)set34);
    java2.util2.SortedSet sortedSet38 = treeSet36.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj39 = java2.util2.Collections.max((java2.util2.Collection)treeSet36);
    java2.util2.List list42 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list45 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list45);
    java2.util2.List list47 = java2.util2.Collections.unmodifiableList(list45);
    int i48 = java2.util2.Collections.indexOfSubList(list42, list47);
    java2.util2.List list49 = java2.util2.Collections.synchronizedList(list47);
    boolean b50 = treeSet36.retainAll((java2.util2.Collection)list49);
    boolean b51 = treeSet5.equals((java.lang.Object)b50);
    java2.util2.List list54 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set55 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet56 = new java2.util2.TreeSet((java2.util2.Collection)set55);
    java.lang.Object[] obj_array57 = treeSet56.toArray();
    java2.util2.List list60 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list63 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list63);
    java2.util2.List list65 = java2.util2.Collections.unmodifiableList(list63);
    java2.util2.Collections.copy(list60, list63);
    boolean b67 = treeSet56.addAll((java2.util2.Collection)list60);
    java2.util2.List list70 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list71 = java2.util2.Collections.unmodifiableList(list70);
    java2.util2.Collections.fill(list60, (java.lang.Object)list71);
    java2.util2.List list73 = java2.util2.Collections.unmodifiableList(list71);
    java2.util2.List list74 = java2.util2.Collections.unmodifiableList(list71);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet75 = treeSet5.headSet((java.lang.Object)list74);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 0+ "'", obj8.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet36.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet36.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet36.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj39 + "' != '" + 0+ "'", obj39.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet56.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet56.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet56.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list74);

  }

  @Test
  public void test059() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test059"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    java2.util2.Collections.copy(list2, list5);
    java2.util2.Collections.fill(list2, (java.lang.Object)0.0f);
    java2.util2.Collections.reverse(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);

  }

  @Test
  public void test060() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test060"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list3 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.List list4 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.List list7 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set8 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set9 = java2.util2.Collections.unmodifiableSet(set8);
    java2.util2.TreeSet treeSet10 = new java2.util2.TreeSet((java2.util2.Collection)set8);
    java2.util2.SortedSet sortedSet12 = treeSet10.headSet((java.lang.Object)(short)(-1));
    java2.util2.Collections.fill(list4, (java.lang.Object)sortedSet12);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java2.util2.Collections.swap(list4, 0, 100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet10.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet12);

  }

  @Test
  public void test061() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test061"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list6);
    java2.util2.List list8 = java2.util2.Collections.unmodifiableList(list6);
    int i9 = java2.util2.Collections.indexOfSubList(list3, list8);
    java2.util2.Map map10 = java2.util2.Collections.singletonMap((java.lang.Object)0L, (java.lang.Object)list8);
    java2.util2.Map map11 = java2.util2.Collections.synchronizedMap(map10);
    java2.util2.Map map12 = java2.util2.Collections.unmodifiableMap(map11);
    java2.util2.Map map13 = java2.util2.Collections.unmodifiableMap(map12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map13);

  }

  @Test
  public void test062() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test062"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet7 = treeSet5.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj8 = java2.util2.Collections.max((java2.util2.Collection)treeSet5);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list14);
    java2.util2.List list16 = java2.util2.Collections.unmodifiableList(list14);
    int i17 = java2.util2.Collections.indexOfSubList(list11, list16);
    java2.util2.List list18 = java2.util2.Collections.synchronizedList(list16);
    boolean b19 = treeSet5.retainAll((java2.util2.Collection)list18);
    java.lang.Object[] obj_array20 = treeSet5.toArray();
    java2.util2.List list23 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set24 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set25 = java2.util2.Collections.unmodifiableSet(set24);
    java2.util2.TreeSet treeSet26 = new java2.util2.TreeSet((java2.util2.Collection)set24);
    java2.util2.Set set27 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet26);
    java2.util2.List list30 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list33 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list33);
    java2.util2.List list35 = java2.util2.Collections.unmodifiableList(list33);
    int i36 = java2.util2.Collections.indexOfSubList(list30, list35);
    java2.util2.List list39 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list42 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list42);
    java2.util2.List list44 = java2.util2.Collections.unmodifiableList(list42);
    java2.util2.Collections.copy(list39, list42);
    java2.util2.Collections.copy(list35, list39);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet47 = treeSet5.subSet((java.lang.Object)set27, (java.lang.Object)list39);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 0+ "'", obj8.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet26.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet26.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet26.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);

  }

  @Test
  public void test063() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test063"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.first();
    java2.util2.SortedSet sortedSet18 = treeSet4.tailSet((java.lang.Object)"");
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set22 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet23 = new java2.util2.TreeSet((java2.util2.Collection)set22);
    java.lang.Object[] obj_array24 = treeSet23.toArray();
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list30 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list30);
    java2.util2.List list32 = java2.util2.Collections.unmodifiableList(list30);
    java2.util2.Collections.copy(list27, list30);
    boolean b34 = treeSet23.addAll((java2.util2.Collection)list27);
    java.lang.Object obj35 = treeSet23.first();
    java2.util2.SortedSet sortedSet37 = treeSet23.tailSet((java.lang.Object)"");
    java2.util2.SortedSet sortedSet38 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet23);
    boolean b39 = treeSet4.addAll((java2.util2.Collection)treeSet23);
    java2.util2.List list42 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list42);
    java2.util2.List list46 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.fill(list42, (java.lang.Object)(-1.0d));
    boolean b48 = treeSet4.removeAll((java2.util2.Collection)list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 0+ "'", obj16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet23.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet23.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet23.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + 0+ "'", obj35.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);

  }

  @Test
  public void test064() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test064"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet7 = treeSet5.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj8 = java2.util2.Collections.max((java2.util2.Collection)treeSet5);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet((java2.util2.Collection)set12);
    java.lang.Object[] obj_array14 = treeSet13.toArray();
    java2.util2.List list17 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list20 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list20);
    java2.util2.List list22 = java2.util2.Collections.unmodifiableList(list20);
    java2.util2.Collections.copy(list17, list20);
    boolean b24 = treeSet13.addAll((java2.util2.Collection)list17);
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list28 = java2.util2.Collections.unmodifiableList(list27);
    java2.util2.Collections.fill(list17, (java.lang.Object)list28);
    boolean b30 = treeSet5.removeAll((java2.util2.Collection)list17);
    int i31 = treeSet5.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 0+ "'", obj8.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);

  }

  @Test
  public void test065() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test065"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java.lang.Object[] obj_array9 = treeSet5.toArray();
    java2.util2.TreeSet treeSet10 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet5);
    java2.util2.List list13 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set14 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set15 = java2.util2.Collections.unmodifiableSet(set14);
    java2.util2.TreeSet treeSet16 = new java2.util2.TreeSet((java2.util2.Collection)set14);
    java2.util2.SortedSet sortedSet18 = treeSet16.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj19 = java2.util2.Collections.max((java2.util2.Collection)treeSet16);
    java2.util2.List list22 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list25 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list25);
    java2.util2.List list27 = java2.util2.Collections.unmodifiableList(list25);
    int i28 = java2.util2.Collections.indexOfSubList(list22, list27);
    java2.util2.List list31 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list34 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list34);
    java2.util2.List list36 = java2.util2.Collections.unmodifiableList(list34);
    java2.util2.Collections.copy(list31, list34);
    java2.util2.Collections.copy(list27, list31);
    java2.util2.List list41 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list44 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list44);
    java2.util2.List list46 = java2.util2.Collections.unmodifiableList(list44);
    java2.util2.Collections.copy(list41, list44);
    int i48 = java2.util2.Collections.indexOfSubList(list31, list44);
    boolean b49 = treeSet16.equals((java.lang.Object)list31);
    treeSet16.clear();
    java2.util2.List list53 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set54 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set55 = java2.util2.Collections.unmodifiableSet(set54);
    java2.util2.TreeSet treeSet56 = new java2.util2.TreeSet((java2.util2.Collection)set54);
    java.lang.Object[] obj_array58 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array59 = treeSet56.toArray(obj_array58);
    java.lang.Object[] obj_array60 = treeSet16.toArray(obj_array59);
    java.lang.Object[] obj_array61 = treeSet5.toArray(obj_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet10.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet16.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + 0+ "'", obj19.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet56.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet56.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet56.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array61);

  }

  @Test
  public void test066() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test066"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    int i8 = java2.util2.Collections.indexOfSubList(list2, list7);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set13 = java2.util2.Collections.unmodifiableSet(set12);
    java2.util2.TreeSet treeSet14 = new java2.util2.TreeSet((java2.util2.Collection)set12);
    java2.util2.SortedSet sortedSet16 = treeSet14.tailSet((java.lang.Object)(short)0);
    java2.util2.List list19 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    boolean b20 = java2.util2.Collections.replaceAll(list2, (java.lang.Object)sortedSet16, (java.lang.Object)(-1.0d));
    java2.util2.Collections.rotate(list2, 1);
    java2.util2.List list25 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list28 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list28);
    java2.util2.List list30 = java2.util2.Collections.unmodifiableList(list28);
    int i31 = java2.util2.Collections.indexOfSubList(list25, list30);
    java2.util2.List list34 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list37 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list37);
    java2.util2.List list39 = java2.util2.Collections.unmodifiableList(list37);
    int i40 = java2.util2.Collections.indexOfSubList(list34, list39);
    java2.util2.List list43 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list46 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list46);
    java2.util2.List list48 = java2.util2.Collections.unmodifiableList(list46);
    java2.util2.Collections.copy(list43, list46);
    java2.util2.Collections.copy(list39, list43);
    java2.util2.List list53 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list56 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list56);
    java2.util2.List list58 = java2.util2.Collections.unmodifiableList(list56);
    java2.util2.Collections.copy(list53, list56);
    int i60 = java2.util2.Collections.indexOfSubList(list43, list56);
    java2.util2.List list63 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list66 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list66);
    java2.util2.List list68 = java2.util2.Collections.unmodifiableList(list66);
    int i69 = java2.util2.Collections.indexOfSubList(list63, list68);
    java2.util2.List list72 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list75 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list75);
    java2.util2.List list77 = java2.util2.Collections.unmodifiableList(list75);
    java2.util2.Collections.copy(list72, list75);
    java2.util2.Collections.copy(list68, list72);
    java2.util2.List list82 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list85 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list85);
    java2.util2.List list87 = java2.util2.Collections.unmodifiableList(list85);
    java2.util2.Collections.copy(list82, list85);
    int i89 = java2.util2.Collections.indexOfSubList(list72, list85);
    boolean b90 = java2.util2.Collections.replaceAll(list30, (java.lang.Object)list43, (java.lang.Object)list72);
    java2.util2.Collections.copy(list2, list72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet14.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == false);

  }

  @Test
  public void test067() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test067"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet7 = treeSet5.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj8 = java2.util2.Collections.max((java2.util2.Collection)treeSet5);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list14);
    java2.util2.List list16 = java2.util2.Collections.unmodifiableList(list14);
    int i17 = java2.util2.Collections.indexOfSubList(list11, list16);
    java2.util2.List list18 = java2.util2.Collections.synchronizedList(list16);
    boolean b19 = treeSet5.retainAll((java2.util2.Collection)list18);
    boolean b20 = treeSet5.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 0+ "'", obj8.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);

  }

  @Test
  public void test068() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test068"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.Set set6 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet4);
    java2.util2.List list7 = java2.util2.Collections.singletonList((java.lang.Object)set6);
    java2.util2.Collections.rotate(list7, 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);

  }

  @Test
  public void test069() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test069"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java.lang.Object[] obj_array9 = treeSet5.toArray();
    java2.util2.TreeSet treeSet10 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet5);
    java2.util2.Iterator iterator11 = treeSet5.iterator();
    boolean b13 = treeSet5.equals((java.lang.Object)(byte)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet10.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);

  }

  @Test
  public void test070() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test070"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);

  }

  @Test
  public void test071() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test071"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet7 = treeSet5.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj8 = java2.util2.Collections.max((java2.util2.Collection)treeSet5);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet((java2.util2.Collection)set12);
    java.lang.Object[] obj_array14 = treeSet13.toArray();
    java2.util2.List list17 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list20 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list20);
    java2.util2.List list22 = java2.util2.Collections.unmodifiableList(list20);
    java2.util2.Collections.copy(list17, list20);
    boolean b24 = treeSet13.addAll((java2.util2.Collection)list17);
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list28 = java2.util2.Collections.unmodifiableList(list27);
    java2.util2.Collections.fill(list17, (java.lang.Object)list28);
    boolean b30 = treeSet5.removeAll((java2.util2.Collection)list17);
    java2.util2.Collections.sort(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 0+ "'", obj8.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);

  }

  @Test
  public void test072() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test072"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set4 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set4);
    java.lang.Object[] obj_array6 = treeSet5.toArray();
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list12);
    java2.util2.List list14 = java2.util2.Collections.unmodifiableList(list12);
    java2.util2.Collections.copy(list9, list12);
    boolean b16 = treeSet5.addAll((java2.util2.Collection)list9);
    java2.util2.List list19 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list20 = java2.util2.Collections.unmodifiableList(list19);
    java2.util2.Collections.fill(list9, (java.lang.Object)list20);
    java2.util2.List list24 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list24);
    java2.util2.List list28 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.fill(list24, (java.lang.Object)(-1.0d));
    java2.util2.Collections.copy(list20, list24);
    java2.util2.List list31 = java2.util2.Collections.nCopies(1, (java.lang.Object)list24);
    java2.util2.List list34 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set35 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet36 = new java2.util2.TreeSet((java2.util2.Collection)set35);
    java.lang.Object[] obj_array37 = treeSet36.toArray();
    java2.util2.List list40 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list43 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list43);
    java2.util2.List list45 = java2.util2.Collections.unmodifiableList(list43);
    java2.util2.Collections.copy(list40, list43);
    boolean b47 = treeSet36.addAll((java2.util2.Collection)list40);
    java2.util2.List list50 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list51 = java2.util2.Collections.unmodifiableList(list50);
    java2.util2.Collections.fill(list40, (java.lang.Object)list51);
    java2.util2.List list55 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list55);
    java2.util2.List list59 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.fill(list55, (java.lang.Object)(-1.0d));
    java2.util2.Collections.copy(list51, list55);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java2.util2.Collections.fill(list31, (java.lang.Object)list51);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet36.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet36.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet36.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);

  }

  @Test
  public void test073() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test073"); }


    java2.util2.Map map2 = java2.util2.Collections.singletonMap((java.lang.Object)"", (java.lang.Object)0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map2);

  }

  @Test
  public void test074() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test074"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set4 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set4);
    java.lang.Object[] obj_array6 = treeSet5.toArray();
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list12);
    java2.util2.List list14 = java2.util2.Collections.unmodifiableList(list12);
    java2.util2.Collections.copy(list9, list12);
    boolean b16 = treeSet5.addAll((java2.util2.Collection)list9);
    java.lang.Object obj17 = treeSet5.first();
    java2.util2.SortedSet sortedSet19 = treeSet5.tailSet((java.lang.Object)"");
    java2.util2.List list20 = java2.util2.Collections.nCopies(1, (java.lang.Object)treeSet5);
    java2.util2.List list23 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list26 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list26);
    java2.util2.List list28 = java2.util2.Collections.unmodifiableList(list26);
    java2.util2.Collections.copy(list23, list26);
    java2.util2.Collections.fill(list23, (java.lang.Object)0.0f);
    java2.util2.List list35 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set36 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet37 = new java2.util2.TreeSet((java2.util2.Collection)set36);
    java.lang.Object[] obj_array38 = treeSet37.toArray();
    java2.util2.List list41 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list44 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list44);
    java2.util2.List list46 = java2.util2.Collections.unmodifiableList(list44);
    java2.util2.Collections.copy(list41, list44);
    boolean b48 = treeSet37.addAll((java2.util2.Collection)list41);
    java.lang.Object obj49 = treeSet37.first();
    java2.util2.SortedSet sortedSet51 = treeSet37.tailSet((java.lang.Object)"");
    java2.util2.List list52 = java2.util2.Collections.nCopies(1, (java.lang.Object)treeSet37);
    java.lang.String str53 = treeSet37.toString();
    java2.util2.List list56 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list59 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list59);
    java2.util2.List list61 = java2.util2.Collections.unmodifiableList(list59);
    java2.util2.Collections.copy(list56, list59);
    java2.util2.Collections.rotate(list56, 0);
    java2.util2.List list67 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list70 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list70);
    java2.util2.List list72 = java2.util2.Collections.unmodifiableList(list70);
    int i73 = java2.util2.Collections.indexOfSubList(list67, list72);
    java2.util2.List list76 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list79 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list79);
    java2.util2.List list81 = java2.util2.Collections.unmodifiableList(list79);
    java2.util2.Collections.copy(list76, list79);
    java2.util2.Collections.copy(list72, list76);
    java2.util2.List list86 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list89 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list89);
    java2.util2.List list91 = java2.util2.Collections.unmodifiableList(list89);
    java2.util2.Collections.copy(list86, list89);
    int i93 = java2.util2.Collections.indexOfSubList(list76, list89);
    java2.util2.Comparator comparator94 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list89, comparator94);
    java2.util2.Collections.sort(list56, comparator94);
    int i97 = java2.util2.Collections.binarySearch(list23, (java.lang.Object)str53, comparator94);
    java2.util2.TreeSet treeSet98 = new java2.util2.TreeSet(comparator94);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java2.util2.Collections.sort(list20, comparator94);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + 0+ "'", obj17.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet37.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet37.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet37.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj49 + "' != '" + 0+ "'", obj49.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "[0]"+ "'", str53.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i97 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet98.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet98.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet98.toString(), "[]");

  }

  @Test
  public void test075() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test075"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list3 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.List list4 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.List list7 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set8 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set9 = java2.util2.Collections.unmodifiableSet(set8);
    java2.util2.TreeSet treeSet10 = new java2.util2.TreeSet((java2.util2.Collection)set8);
    java2.util2.SortedSet sortedSet12 = treeSet10.headSet((java.lang.Object)(short)(-1));
    java2.util2.Collections.fill(list4, (java.lang.Object)sortedSet12);
    java2.util2.List list16 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list19 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list19);
    java2.util2.List list21 = java2.util2.Collections.unmodifiableList(list19);
    java2.util2.Collections.copy(list16, list19);
    java2.util2.Collections.fill(list16, (java.lang.Object)0.0f);
    java2.util2.List list28 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set29 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet30 = new java2.util2.TreeSet((java2.util2.Collection)set29);
    java.lang.Object[] obj_array31 = treeSet30.toArray();
    java2.util2.List list34 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list37 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list37);
    java2.util2.List list39 = java2.util2.Collections.unmodifiableList(list37);
    java2.util2.Collections.copy(list34, list37);
    boolean b41 = treeSet30.addAll((java2.util2.Collection)list34);
    java.lang.Object obj42 = treeSet30.first();
    java2.util2.SortedSet sortedSet44 = treeSet30.tailSet((java.lang.Object)"");
    java2.util2.List list45 = java2.util2.Collections.nCopies(1, (java.lang.Object)treeSet30);
    java.lang.String str46 = treeSet30.toString();
    java2.util2.List list49 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list52 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list52);
    java2.util2.List list54 = java2.util2.Collections.unmodifiableList(list52);
    java2.util2.Collections.copy(list49, list52);
    java2.util2.Collections.rotate(list49, 0);
    java2.util2.List list60 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list63 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list63);
    java2.util2.List list65 = java2.util2.Collections.unmodifiableList(list63);
    int i66 = java2.util2.Collections.indexOfSubList(list60, list65);
    java2.util2.List list69 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list72 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list72);
    java2.util2.List list74 = java2.util2.Collections.unmodifiableList(list72);
    java2.util2.Collections.copy(list69, list72);
    java2.util2.Collections.copy(list65, list69);
    java2.util2.List list79 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list82 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list82);
    java2.util2.List list84 = java2.util2.Collections.unmodifiableList(list82);
    java2.util2.Collections.copy(list79, list82);
    int i86 = java2.util2.Collections.indexOfSubList(list69, list82);
    java2.util2.Comparator comparator87 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list82, comparator87);
    java2.util2.Collections.sort(list49, comparator87);
    int i90 = java2.util2.Collections.binarySearch(list16, (java.lang.Object)str46, comparator87);
    java2.util2.TreeSet treeSet91 = new java2.util2.TreeSet(comparator87);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java.lang.Object obj92 = java2.util2.Collections.max((java2.util2.Collection)list4, comparator87);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet10.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet30.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet30.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet30.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj42 + "' != '" + 0+ "'", obj42.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "[0]"+ "'", str46.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet91.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet91.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet91.toString(), "[]");

  }

  @Test
  public void test076() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test076"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    int i8 = java2.util2.Collections.indexOfSubList(list2, list7);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java.lang.Object obj9 = java2.util2.Collections.max((java2.util2.Collection)list2);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);

  }

  @Test
  public void test077() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test077"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    int i8 = java2.util2.Collections.indexOfSubList(list2, list7);
    java2.util2.Enumeration enumeration9 = java2.util2.Collections.enumeration((java2.util2.Collection)list2);
    java2.util2.ArrayList arrayList10 = java2.util2.Collections.list(enumeration9);
    java2.util2.ArrayList arrayList11 = java2.util2.Collections.list(enumeration9);
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list14);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list21);
    java2.util2.List list23 = java2.util2.Collections.unmodifiableList(list21);
    int i24 = java2.util2.Collections.indexOfSubList(list18, list23);
    java2.util2.List list25 = java2.util2.Collections.synchronizedList(list23);
    int i26 = java2.util2.Collections.lastIndexOfSubList(list14, list23);
    java2.util2.List list30 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set31 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet32 = new java2.util2.TreeSet((java2.util2.Collection)set31);
    java.lang.Object[] obj_array33 = treeSet32.toArray();
    java2.util2.List list36 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list39 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list39);
    java2.util2.List list41 = java2.util2.Collections.unmodifiableList(list39);
    java2.util2.Collections.copy(list36, list39);
    boolean b43 = treeSet32.addAll((java2.util2.Collection)list36);
    java2.util2.List list46 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list47 = java2.util2.Collections.unmodifiableList(list46);
    java2.util2.Collections.fill(list36, (java.lang.Object)list47);
    java2.util2.List list51 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list52 = java2.util2.Collections.unmodifiableList(list51);
    java2.util2.List list55 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list58 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list58);
    java2.util2.List list60 = java2.util2.Collections.unmodifiableList(list58);
    int i61 = java2.util2.Collections.indexOfSubList(list55, list60);
    java2.util2.List list64 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list67 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list67);
    java2.util2.List list69 = java2.util2.Collections.unmodifiableList(list67);
    java2.util2.Collections.copy(list64, list67);
    java2.util2.Collections.copy(list60, list64);
    java2.util2.List list74 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list77 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list77);
    java2.util2.List list79 = java2.util2.Collections.unmodifiableList(list77);
    java2.util2.Collections.copy(list74, list77);
    int i81 = java2.util2.Collections.indexOfSubList(list64, list77);
    java2.util2.Comparator comparator82 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list77, comparator82);
    int i84 = java2.util2.Collections.binarySearch(list47, (java.lang.Object)list51, comparator82);
    java2.util2.TreeSet treeSet85 = new java2.util2.TreeSet(comparator82);
    boolean b86 = java2.util2.Collections.replaceAll(list23, (java.lang.Object)(-1.0d), (java.lang.Object)comparator82);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java.lang.Object obj87 = java2.util2.Collections.min((java2.util2.Collection)arrayList11, comparator82);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet32.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet32.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet32.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet85.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet85.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet85.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);

  }

  @Test
  public void test078() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test078"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet7 = treeSet5.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj8 = java2.util2.Collections.max((java2.util2.Collection)treeSet5);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet((java2.util2.Collection)set12);
    java.lang.Object[] obj_array14 = treeSet13.toArray();
    java2.util2.List list17 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list20 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list20);
    java2.util2.List list22 = java2.util2.Collections.unmodifiableList(list20);
    java2.util2.Collections.copy(list17, list20);
    boolean b24 = treeSet13.addAll((java2.util2.Collection)list17);
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list28 = java2.util2.Collections.unmodifiableList(list27);
    java2.util2.Collections.fill(list17, (java.lang.Object)list28);
    boolean b30 = treeSet5.removeAll((java2.util2.Collection)list17);
    java2.util2.Set set31 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 0+ "'", obj8.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);

  }

  @Test
  public void test079() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test079"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    boolean b14 = treeSet5.addAll((java2.util2.Collection)list13);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list21);
    java2.util2.List list23 = java2.util2.Collections.unmodifiableList(list21);
    int i24 = java2.util2.Collections.indexOfSubList(list18, list23);
    java2.util2.Map map25 = java2.util2.Collections.singletonMap((java.lang.Object)0L, (java.lang.Object)list23);
    java2.util2.Map map26 = java2.util2.Collections.synchronizedMap(map25);
    java2.util2.Map map27 = java2.util2.Collections.unmodifiableMap(map25);
    java2.util2.Map map28 = java2.util2.Collections.synchronizedMap(map25);
    java2.util2.Map map29 = java2.util2.Collections.synchronizedMap(map25);
    java2.util2.List list32 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set33 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set34 = java2.util2.Collections.unmodifiableSet(set33);
    java2.util2.TreeSet treeSet35 = new java2.util2.TreeSet((java2.util2.Collection)set33);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet36 = treeSet5.subSet((java.lang.Object)map25, (java.lang.Object)set33);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet35.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet35.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet35.toString(), "[0]");

  }

  @Test
  public void test080() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test080"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.first();
    java2.util2.SortedSet sortedSet18 = treeSet4.tailSet((java.lang.Object)"");
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set22 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet23 = new java2.util2.TreeSet((java2.util2.Collection)set22);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet24 = treeSet4.tailSet((java.lang.Object)set22);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 0+ "'", obj16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet23.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet23.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet23.toString(), "[0]");

  }

  @Test
  public void test081() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test081"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet5);
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set10 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set11 = java2.util2.Collections.unmodifiableSet(set10);
    java2.util2.TreeSet treeSet12 = new java2.util2.TreeSet((java2.util2.Collection)set10);
    java.lang.Object[] obj_array14 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array15 = treeSet12.toArray(obj_array14);
    java.lang.Object[] obj_array16 = treeSet12.toArray();
    boolean b17 = treeSet5.removeAll((java2.util2.Collection)treeSet12);
    java2.util2.Iterator iterator18 = treeSet12.iterator();
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set22 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet23 = new java2.util2.TreeSet((java2.util2.Collection)set22);
    java.lang.Object[] obj_array24 = treeSet23.toArray();
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list30 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list30);
    java2.util2.List list32 = java2.util2.Collections.unmodifiableList(list30);
    java2.util2.Collections.copy(list27, list30);
    boolean b34 = treeSet23.addAll((java2.util2.Collection)list27);
    java.lang.Object obj35 = treeSet23.first();
    treeSet23.clear();
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      boolean b37 = treeSet12.add((java.lang.Object)treeSet23);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet12.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet12.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet23.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet23.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet23.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + 0+ "'", obj35.equals(0));

  }

  @Test
  public void test082() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test082"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    int i8 = java2.util2.Collections.indexOfSubList(list2, list7);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list14);
    java2.util2.List list16 = java2.util2.Collections.unmodifiableList(list14);
    int i17 = java2.util2.Collections.indexOfSubList(list11, list16);
    java2.util2.List list20 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list23 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list23);
    java2.util2.List list25 = java2.util2.Collections.unmodifiableList(list23);
    java2.util2.Collections.copy(list20, list23);
    java2.util2.Collections.copy(list16, list20);
    java2.util2.List list30 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list33 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list33);
    java2.util2.List list35 = java2.util2.Collections.unmodifiableList(list33);
    java2.util2.Collections.copy(list30, list33);
    int i37 = java2.util2.Collections.indexOfSubList(list20, list33);
    java2.util2.List list40 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list43 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list43);
    java2.util2.List list45 = java2.util2.Collections.unmodifiableList(list43);
    int i46 = java2.util2.Collections.indexOfSubList(list40, list45);
    java2.util2.List list49 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list52 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list52);
    java2.util2.List list54 = java2.util2.Collections.unmodifiableList(list52);
    java2.util2.Collections.copy(list49, list52);
    java2.util2.Collections.copy(list45, list49);
    java2.util2.List list59 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list62 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list62);
    java2.util2.List list64 = java2.util2.Collections.unmodifiableList(list62);
    java2.util2.Collections.copy(list59, list62);
    int i66 = java2.util2.Collections.indexOfSubList(list49, list62);
    boolean b67 = java2.util2.Collections.replaceAll(list7, (java.lang.Object)list20, (java.lang.Object)list49);
    java2.util2.Collection collection68 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list20);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java2.util2.Collections.swap(list20, (-1), 1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection68);

  }

  @Test
  public void test083() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test083"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java.lang.Object[] obj_array9 = treeSet5.toArray();
    java2.util2.Set set10 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet5);
    java2.util2.Collection collection11 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet5);
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set15 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet16 = new java2.util2.TreeSet((java2.util2.Collection)set15);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet17 = treeSet5.tailSet((java.lang.Object)set15);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet16.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet16.toString(), "[0]");

  }

  @Test
  public void test084() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test084"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set4 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set5 = java2.util2.Collections.unmodifiableSet(set4);
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet((java2.util2.Collection)set4);
    java.lang.Object[] obj_array8 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array9 = treeSet6.toArray(obj_array8);
    java.lang.Object[] obj_array10 = treeSet6.toArray();
    java.lang.Object obj11 = treeSet6.first();
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set15 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set16 = java2.util2.Collections.unmodifiableSet(set15);
    java2.util2.TreeSet treeSet17 = new java2.util2.TreeSet((java2.util2.Collection)set15);
    java2.util2.SortedSet sortedSet19 = treeSet17.tailSet((java.lang.Object)(short)0);
    java2.util2.List list22 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set23 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet24 = new java2.util2.TreeSet((java2.util2.Collection)set23);
    java.lang.Object[] obj_array25 = treeSet24.toArray();
    java2.util2.List list28 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list31 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list31);
    java2.util2.List list33 = java2.util2.Collections.unmodifiableList(list31);
    java2.util2.Collections.copy(list28, list31);
    boolean b35 = treeSet24.addAll((java2.util2.Collection)list28);
    java.lang.Object obj36 = treeSet24.first();
    java2.util2.SortedSet sortedSet38 = treeSet24.tailSet((java.lang.Object)"");
    java.lang.String str39 = treeSet24.toString();
    java2.util2.List list42 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set43 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet44 = new java2.util2.TreeSet((java2.util2.Collection)set43);
    java.lang.Object[] obj_array45 = treeSet44.toArray();
    java.lang.Object[] obj_array46 = treeSet24.toArray(obj_array45);
    java.lang.Object[] obj_array47 = treeSet17.toArray(obj_array45);
    java.lang.Object[] obj_array48 = treeSet6.toArray(obj_array45);
    java2.util2.List list51 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list54 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list54);
    java2.util2.List list56 = java2.util2.Collections.unmodifiableList(list54);
    java2.util2.Collections.copy(list51, list54);
    java2.util2.Collections.rotate(list51, 0);
    java2.util2.List list62 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list65 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list65);
    java2.util2.List list67 = java2.util2.Collections.unmodifiableList(list65);
    int i68 = java2.util2.Collections.indexOfSubList(list62, list67);
    java2.util2.List list71 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list74 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list74);
    java2.util2.List list76 = java2.util2.Collections.unmodifiableList(list74);
    java2.util2.Collections.copy(list71, list74);
    java2.util2.Collections.copy(list67, list71);
    java2.util2.List list81 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list84 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list84);
    java2.util2.List list86 = java2.util2.Collections.unmodifiableList(list84);
    java2.util2.Collections.copy(list81, list84);
    int i88 = java2.util2.Collections.indexOfSubList(list71, list84);
    java2.util2.Comparator comparator89 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list84, comparator89);
    java2.util2.Collections.sort(list51, comparator89);
    java.lang.Object obj92 = java2.util2.Collections.min((java2.util2.Collection)treeSet6, comparator89);
    java2.util2.TreeSet treeSet93 = new java2.util2.TreeSet(comparator89);
    java2.util2.List list94 = java2.util2.Collections.nCopies(100, (java.lang.Object)comparator89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + 0+ "'", obj11.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet17.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet17.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet17.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet24.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet24.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet24.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj36 + "' != '" + 0+ "'", obj36.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "[0]"+ "'", str39.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet44.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet44.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet44.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj92 + "' != '" + 0+ "'", obj92.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet93.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet93.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet93.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list94);

  }

  @Test
  public void test085() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test085"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java.lang.Object[] obj_array9 = treeSet5.toArray();
    java2.util2.Set set10 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet5);
    java2.util2.List list13 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list13);
    java2.util2.List list17 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list20 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list20);
    java2.util2.List list22 = java2.util2.Collections.unmodifiableList(list20);
    int i23 = java2.util2.Collections.indexOfSubList(list17, list22);
    java2.util2.List list24 = java2.util2.Collections.synchronizedList(list22);
    int i25 = java2.util2.Collections.lastIndexOfSubList(list13, list22);
    java2.util2.Collection collection26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list13);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet27 = treeSet5.headSet((java.lang.Object)collection26);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection26);

  }

  @Test
  public void test086() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test086"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.first();
    java2.util2.SortedSet sortedSet18 = treeSet4.tailSet((java.lang.Object)"");
    java2.util2.SortedSet sortedSet19 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet4);
    java.lang.Object[] obj_array20 = treeSet4.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 0+ "'", obj16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array20);

  }

  @Test
  public void test087() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test087"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.Set set16 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet4);
    java2.util2.TreeSet treeSet17 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet4);
    java2.util2.TreeSet treeSet18 = new java2.util2.TreeSet((java2.util2.Collection)treeSet4);
    boolean b19 = treeSet4.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet17.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet17.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet17.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet18.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet18.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);

  }

  @Test
  public void test088() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test088"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.Set set16 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet4);
    java2.util2.Set set17 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet4);
    java2.util2.Collection collection18 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)set17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection18);

  }

  @Test
  public void test089() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test089"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet7 = treeSet5.tailSet((java.lang.Object)(short)0);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java2.util2.TreeSet treeSet8 = new java2.util2.TreeSet((java2.util2.Collection)sortedSet7);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);

  }

  @Test
  public void test090() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test090"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list9);
    java2.util2.List list11 = java2.util2.Collections.unmodifiableList(list9);
    int i12 = java2.util2.Collections.indexOfSubList(list6, list11);
    java2.util2.List list13 = java2.util2.Collections.synchronizedList(list11);
    int i14 = java2.util2.Collections.lastIndexOfSubList(list2, list11);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java2.util2.Collections.swap(list11, 0, 10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);

  }

  @Test
  public void test091() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test091"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet7 = treeSet5.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj8 = java2.util2.Collections.max((java2.util2.Collection)treeSet5);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet((java2.util2.Collection)set12);
    java.lang.Object[] obj_array14 = treeSet13.toArray();
    java2.util2.List list17 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list20 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list20);
    java2.util2.List list22 = java2.util2.Collections.unmodifiableList(list20);
    java2.util2.Collections.copy(list17, list20);
    boolean b24 = treeSet13.addAll((java2.util2.Collection)list17);
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list28 = java2.util2.Collections.unmodifiableList(list27);
    java2.util2.Collections.fill(list17, (java.lang.Object)list28);
    boolean b30 = treeSet5.removeAll((java2.util2.Collection)list17);
    java2.util2.List list33 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set34 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set35 = java2.util2.Collections.unmodifiableSet(set34);
    java2.util2.TreeSet treeSet36 = new java2.util2.TreeSet((java2.util2.Collection)set34);
    java2.util2.SortedSet sortedSet38 = treeSet36.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj39 = java2.util2.Collections.max((java2.util2.Collection)treeSet36);
    java2.util2.List list42 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list45 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list45);
    java2.util2.List list47 = java2.util2.Collections.unmodifiableList(list45);
    int i48 = java2.util2.Collections.indexOfSubList(list42, list47);
    java2.util2.List list49 = java2.util2.Collections.synchronizedList(list47);
    boolean b50 = treeSet36.retainAll((java2.util2.Collection)list49);
    boolean b51 = treeSet5.equals((java.lang.Object)b50);
    java.lang.Object[] obj_array52 = treeSet5.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 0+ "'", obj8.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet36.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet36.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet36.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj39 + "' != '" + 0+ "'", obj39.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array52);

  }

  @Test
  public void test092() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test092"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)1);
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list6 = java2.util2.Collections.unmodifiableList(list5);
    int i7 = java2.util2.Collections.lastIndexOfSubList(list2, list5);
    java2.util2.Collections.shuffle(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);

  }

  @Test
  public void test093() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test093"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)(-1.0d));
    java2.util2.List list2 = java2.util2.Collections.singletonList((java.lang.Object)(-1.0d));
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java2.util2.Collections.sort(list2);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);

  }

  @Test
  public void test094() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test094"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list19 = java2.util2.Collections.unmodifiableList(list18);
    java2.util2.Collections.fill(list8, (java.lang.Object)list19);
    java2.util2.Collection collection21 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list8);
    java2.util2.List list22 = java2.util2.Collections.unmodifiableList(list8);
    java2.util2.List list25 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list26 = java2.util2.Collections.unmodifiableList(list25);
    java2.util2.List list29 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set30 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set31 = java2.util2.Collections.unmodifiableSet(set30);
    java2.util2.TreeSet treeSet32 = new java2.util2.TreeSet((java2.util2.Collection)set30);
    java2.util2.SortedSet sortedSet34 = treeSet32.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj35 = java2.util2.Collections.max((java2.util2.Collection)treeSet32);
    java2.util2.List list38 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list41 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list41);
    java2.util2.List list43 = java2.util2.Collections.unmodifiableList(list41);
    int i44 = java2.util2.Collections.indexOfSubList(list38, list43);
    java2.util2.List list45 = java2.util2.Collections.synchronizedList(list43);
    boolean b46 = treeSet32.retainAll((java2.util2.Collection)list45);
    int i47 = java2.util2.Collections.lastIndexOfSubList(list26, list45);
    java2.util2.Collections.reverse(list45);
    java2.util2.Collections.copy(list8, list45);
    java2.util2.List list52 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list55 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list55);
    java2.util2.List list57 = java2.util2.Collections.unmodifiableList(list55);
    int i58 = java2.util2.Collections.indexOfSubList(list52, list57);
    java2.util2.List list61 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list64 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list64);
    java2.util2.List list66 = java2.util2.Collections.unmodifiableList(list64);
    java2.util2.Collections.copy(list61, list64);
    java2.util2.Collections.copy(list57, list61);
    java2.util2.Collection collection69 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list61);
    java2.util2.List list72 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list75 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list75);
    java2.util2.List list77 = java2.util2.Collections.unmodifiableList(list75);
    java2.util2.Collections.copy(list72, list75);
    java2.util2.Collections.sort(list72);
    boolean b80 = java2.util2.Collections.replaceAll(list8, (java.lang.Object)list61, (java.lang.Object)list72);
    java2.util2.List list81 = java2.util2.Collections.synchronizedList(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet32.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet32.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet32.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + 0+ "'", obj35.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list81);

  }

  @Test
  public void test095() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test095"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    int i8 = java2.util2.Collections.indexOfSubList(list2, list7);
    java2.util2.Enumeration enumeration9 = java2.util2.Collections.enumeration((java2.util2.Collection)list2);
    java2.util2.ArrayList arrayList10 = java2.util2.Collections.list(enumeration9);
    java2.util2.ArrayList arrayList11 = java2.util2.Collections.list(enumeration9);
    java2.util2.List list12 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList11);
    java2.util2.List list15 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list15);
    int i18 = java2.util2.Collections.binarySearch(list15, (java.lang.Object)(short)100);
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list24 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list24);
    java2.util2.List list26 = java2.util2.Collections.unmodifiableList(list24);
    java2.util2.Collections.copy(list21, list24);
    java2.util2.Collections.rotate(list21, 0);
    java2.util2.List list32 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list35 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list35);
    java2.util2.List list37 = java2.util2.Collections.unmodifiableList(list35);
    int i38 = java2.util2.Collections.indexOfSubList(list32, list37);
    java2.util2.List list41 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list44 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list44);
    java2.util2.List list46 = java2.util2.Collections.unmodifiableList(list44);
    java2.util2.Collections.copy(list41, list44);
    java2.util2.Collections.copy(list37, list41);
    java2.util2.List list51 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list54 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list54);
    java2.util2.List list56 = java2.util2.Collections.unmodifiableList(list54);
    java2.util2.Collections.copy(list51, list54);
    int i58 = java2.util2.Collections.indexOfSubList(list41, list54);
    java2.util2.Comparator comparator59 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list54, comparator59);
    java2.util2.Collections.sort(list21, comparator59);
    java2.util2.Map map62 = java2.util2.Collections.singletonMap((java.lang.Object)list15, (java.lang.Object)list21);
    java2.util2.Collections.fill((java2.util2.List)arrayList11, (java.lang.Object)map62);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java2.util2.Collections.swap((java2.util2.List)arrayList11, 0, 1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map62);

  }

  @Test
  public void test096() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test096"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list19 = java2.util2.Collections.unmodifiableList(list18);
    java2.util2.Collections.fill(list8, (java.lang.Object)list19);
    java2.util2.List list23 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list23);
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.fill(list23, (java.lang.Object)(-1.0d));
    java2.util2.Collections.copy(list19, list23);
    java2.util2.List list32 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list35 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list35);
    java2.util2.List list37 = java2.util2.Collections.unmodifiableList(list35);
    int i38 = java2.util2.Collections.indexOfSubList(list32, list37);
    java2.util2.List list39 = java2.util2.Collections.synchronizedList(list37);
    int i40 = java2.util2.Collections.lastIndexOfSubList(list19, list39);
    java2.util2.Collection collection41 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list19);
    java2.util2.Collections.shuffle(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection41);

  }

  @Test
  public void test097() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test097"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.clone();
    java2.util2.List list19 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set20 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set21 = java2.util2.Collections.unmodifiableSet(set20);
    java2.util2.TreeSet treeSet22 = new java2.util2.TreeSet((java2.util2.Collection)set20);
    java2.util2.SortedSet sortedSet23 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet22);
    boolean b24 = treeSet4.removeAll((java2.util2.Collection)treeSet22);
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set28 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set29 = java2.util2.Collections.unmodifiableSet(set28);
    java2.util2.TreeSet treeSet30 = new java2.util2.TreeSet((java2.util2.Collection)set28);
    java2.util2.SortedSet sortedSet31 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet30);
    java2.util2.List list34 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set35 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set36 = java2.util2.Collections.unmodifiableSet(set35);
    java2.util2.TreeSet treeSet37 = new java2.util2.TreeSet((java2.util2.Collection)set35);
    java.lang.Object[] obj_array39 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array40 = treeSet37.toArray(obj_array39);
    java.lang.Object[] obj_array41 = treeSet37.toArray();
    boolean b42 = treeSet30.removeAll((java2.util2.Collection)treeSet37);
    java2.util2.Comparator comparator43 = treeSet37.comparator();
    java2.util2.SortedSet sortedSet44 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet37);
    boolean b45 = treeSet22.removeAll((java2.util2.Collection)sortedSet44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet22.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet22.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet22.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet30.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet30.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet30.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet37.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet37.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet37.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);

  }

  @Test
  public void test098() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test098"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    java.lang.Object[] obj_array1 = treeSet0.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array1);

  }

  @Test
  public void test099() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test099"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    java2.util2.Collections.copy(list2, list5);
    java2.util2.Collections.fill(list2, (java.lang.Object)0.0f);
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set15 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet16 = new java2.util2.TreeSet((java2.util2.Collection)set15);
    java.lang.Object[] obj_array17 = treeSet16.toArray();
    java2.util2.List list20 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list23 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list23);
    java2.util2.List list25 = java2.util2.Collections.unmodifiableList(list23);
    java2.util2.Collections.copy(list20, list23);
    boolean b27 = treeSet16.addAll((java2.util2.Collection)list20);
    java.lang.Object obj28 = treeSet16.first();
    java2.util2.SortedSet sortedSet30 = treeSet16.tailSet((java.lang.Object)"");
    java2.util2.List list31 = java2.util2.Collections.nCopies(1, (java.lang.Object)treeSet16);
    java.lang.String str32 = treeSet16.toString();
    java2.util2.List list35 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list38 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list38);
    java2.util2.List list40 = java2.util2.Collections.unmodifiableList(list38);
    java2.util2.Collections.copy(list35, list38);
    java2.util2.Collections.rotate(list35, 0);
    java2.util2.List list46 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list49 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list49);
    java2.util2.List list51 = java2.util2.Collections.unmodifiableList(list49);
    int i52 = java2.util2.Collections.indexOfSubList(list46, list51);
    java2.util2.List list55 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list58 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list58);
    java2.util2.List list60 = java2.util2.Collections.unmodifiableList(list58);
    java2.util2.Collections.copy(list55, list58);
    java2.util2.Collections.copy(list51, list55);
    java2.util2.List list65 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list68 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list68);
    java2.util2.List list70 = java2.util2.Collections.unmodifiableList(list68);
    java2.util2.Collections.copy(list65, list68);
    int i72 = java2.util2.Collections.indexOfSubList(list55, list68);
    java2.util2.Comparator comparator73 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list68, comparator73);
    java2.util2.Collections.sort(list35, comparator73);
    int i76 = java2.util2.Collections.binarySearch(list2, (java.lang.Object)str32, comparator73);
    java2.util2.TreeSet treeSet77 = new java2.util2.TreeSet(comparator73);
    java2.util2.List list80 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list83 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list83);
    java2.util2.List list85 = java2.util2.Collections.unmodifiableList(list83);
    int i86 = java2.util2.Collections.indexOfSubList(list80, list85);
    java2.util2.List list89 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list92 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list92);
    java2.util2.List list94 = java2.util2.Collections.unmodifiableList(list92);
    java2.util2.Collections.copy(list89, list92);
    java2.util2.Collections.copy(list85, list89);
    java2.util2.Collections.rotate(list85, 100);
    boolean b99 = treeSet77.equals((java.lang.Object)list85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet16.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet16.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + 0+ "'", obj28.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "[0]"+ "'", str32.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet77.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet77.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet77.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b99 == false);

  }

  @Test
  public void test100() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test100"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet5);
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set10 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set11 = java2.util2.Collections.unmodifiableSet(set10);
    java2.util2.TreeSet treeSet12 = new java2.util2.TreeSet((java2.util2.Collection)set10);
    java.lang.Object[] obj_array14 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array15 = treeSet12.toArray(obj_array14);
    java.lang.Object[] obj_array16 = treeSet12.toArray();
    boolean b17 = treeSet5.removeAll((java2.util2.Collection)treeSet12);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java.lang.Object obj18 = java2.util2.Collections.max((java2.util2.Collection)treeSet5);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet12.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet12.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);

  }

  @Test
  public void test101() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test101"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.first();
    java2.util2.SortedSet sortedSet18 = treeSet4.tailSet((java.lang.Object)"");
    java.lang.String str19 = treeSet4.toString();
    java2.util2.List list22 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set23 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet24 = new java2.util2.TreeSet((java2.util2.Collection)set23);
    java.lang.Object[] obj_array25 = treeSet24.toArray();
    java.lang.Object[] obj_array26 = treeSet4.toArray(obj_array25);
    java2.util2.List list29 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set30 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet31 = new java2.util2.TreeSet((java2.util2.Collection)set30);
    java.lang.Object[] obj_array32 = treeSet31.toArray();
    java2.util2.List list35 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list38 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list38);
    java2.util2.List list40 = java2.util2.Collections.unmodifiableList(list38);
    java2.util2.Collections.copy(list35, list38);
    boolean b42 = treeSet31.addAll((java2.util2.Collection)list35);
    java.lang.Object obj43 = treeSet31.first();
    java2.util2.SortedSet sortedSet45 = treeSet31.tailSet((java.lang.Object)"");
    java2.util2.SortedSet sortedSet46 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet31);
    boolean b47 = treeSet4.equals((java.lang.Object)treeSet31);
    int i48 = treeSet31.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 0+ "'", obj16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[0]"+ "'", str19.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet24.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet24.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet24.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet31.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet31.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet31.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj43 + "' != '" + 0+ "'", obj43.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);

  }

  @Test
  public void test102() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test102"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.Set set6 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet5);
    treeSet5.clear();
    boolean b8 = treeSet5.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test103() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test103"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    int i8 = java2.util2.Collections.indexOfSubList(list2, list7);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set13 = java2.util2.Collections.unmodifiableSet(set12);
    java2.util2.TreeSet treeSet14 = new java2.util2.TreeSet((java2.util2.Collection)set12);
    java2.util2.SortedSet sortedSet16 = treeSet14.tailSet((java.lang.Object)(short)0);
    java2.util2.List list19 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    boolean b20 = java2.util2.Collections.replaceAll(list2, (java.lang.Object)sortedSet16, (java.lang.Object)(-1.0d));
    java2.util2.Collections.rotate(list2, 1);
    java2.util2.List list23 = java2.util2.Collections.unmodifiableList(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet14.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);

  }

  @Test
  public void test104() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test104"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java.lang.Object[] obj_array9 = treeSet5.toArray();
    java2.util2.TreeSet treeSet10 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet5);
    java2.util2.List list13 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list16 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list16);
    java2.util2.List list18 = java2.util2.Collections.unmodifiableList(list16);
    java2.util2.Collections.copy(list13, list16);
    java2.util2.Collections.fill(list13, (java.lang.Object)0.0f);
    java2.util2.List list25 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set26 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet27 = new java2.util2.TreeSet((java2.util2.Collection)set26);
    java.lang.Object[] obj_array28 = treeSet27.toArray();
    java2.util2.List list31 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list34 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list34);
    java2.util2.List list36 = java2.util2.Collections.unmodifiableList(list34);
    java2.util2.Collections.copy(list31, list34);
    boolean b38 = treeSet27.addAll((java2.util2.Collection)list31);
    java.lang.Object obj39 = treeSet27.first();
    java2.util2.SortedSet sortedSet41 = treeSet27.tailSet((java.lang.Object)"");
    java2.util2.List list42 = java2.util2.Collections.nCopies(1, (java.lang.Object)treeSet27);
    java.lang.String str43 = treeSet27.toString();
    java2.util2.List list46 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list49 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list49);
    java2.util2.List list51 = java2.util2.Collections.unmodifiableList(list49);
    java2.util2.Collections.copy(list46, list49);
    java2.util2.Collections.rotate(list46, 0);
    java2.util2.List list57 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list60 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list60);
    java2.util2.List list62 = java2.util2.Collections.unmodifiableList(list60);
    int i63 = java2.util2.Collections.indexOfSubList(list57, list62);
    java2.util2.List list66 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list69 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list69);
    java2.util2.List list71 = java2.util2.Collections.unmodifiableList(list69);
    java2.util2.Collections.copy(list66, list69);
    java2.util2.Collections.copy(list62, list66);
    java2.util2.List list76 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list79 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list79);
    java2.util2.List list81 = java2.util2.Collections.unmodifiableList(list79);
    java2.util2.Collections.copy(list76, list79);
    int i83 = java2.util2.Collections.indexOfSubList(list66, list79);
    java2.util2.Comparator comparator84 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list79, comparator84);
    java2.util2.Collections.sort(list46, comparator84);
    int i87 = java2.util2.Collections.binarySearch(list13, (java.lang.Object)str43, comparator84);
    java.lang.Object obj88 = java2.util2.Collections.min((java2.util2.Collection)treeSet10, comparator84);
    java2.util2.Comparator comparator89 = treeSet10.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet10.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet27.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet27.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj39 + "' != '" + 0+ "'", obj39.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "[0]"+ "'", str43.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj88 + "' != '" + 0+ "'", obj88.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator89);

  }

  @Test
  public void test105() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test105"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    int i8 = java2.util2.Collections.indexOfSubList(list2, list7);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list14);
    java2.util2.List list16 = java2.util2.Collections.unmodifiableList(list14);
    java2.util2.Collections.copy(list11, list14);
    java2.util2.Collections.copy(list7, list11);
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set22 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set23 = java2.util2.Collections.unmodifiableSet(set22);
    java2.util2.TreeSet treeSet24 = new java2.util2.TreeSet((java2.util2.Collection)set22);
    java.lang.Object[] obj_array26 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array27 = treeSet24.toArray(obj_array26);
    java2.util2.List list30 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list30);
    java2.util2.List list32 = java2.util2.Collections.unmodifiableList(list30);
    boolean b33 = treeSet24.addAll((java2.util2.Collection)list32);
    int i34 = java2.util2.Collections.lastIndexOfSubList(list11, list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet24.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet24.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet24.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);

  }

  @Test
  public void test106() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test106"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java.lang.Object[] obj_array9 = treeSet5.toArray();
    java.lang.Object obj10 = treeSet5.first();
    java2.util2.List list13 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set14 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set15 = java2.util2.Collections.unmodifiableSet(set14);
    java2.util2.TreeSet treeSet16 = new java2.util2.TreeSet((java2.util2.Collection)set14);
    java2.util2.SortedSet sortedSet18 = treeSet16.tailSet((java.lang.Object)(short)0);
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set22 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet23 = new java2.util2.TreeSet((java2.util2.Collection)set22);
    java.lang.Object[] obj_array24 = treeSet23.toArray();
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list30 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list30);
    java2.util2.List list32 = java2.util2.Collections.unmodifiableList(list30);
    java2.util2.Collections.copy(list27, list30);
    boolean b34 = treeSet23.addAll((java2.util2.Collection)list27);
    java.lang.Object obj35 = treeSet23.first();
    java2.util2.SortedSet sortedSet37 = treeSet23.tailSet((java.lang.Object)"");
    java.lang.String str38 = treeSet23.toString();
    java2.util2.List list41 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set42 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet43 = new java2.util2.TreeSet((java2.util2.Collection)set42);
    java.lang.Object[] obj_array44 = treeSet43.toArray();
    java.lang.Object[] obj_array45 = treeSet23.toArray(obj_array44);
    java.lang.Object[] obj_array46 = treeSet16.toArray(obj_array44);
    java.lang.Object[] obj_array47 = treeSet5.toArray(obj_array44);
    java2.util2.List list50 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list53 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list53);
    java2.util2.List list55 = java2.util2.Collections.unmodifiableList(list53);
    java2.util2.Collections.copy(list50, list53);
    java2.util2.Collections.rotate(list50, 0);
    java2.util2.List list61 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list64 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list64);
    java2.util2.List list66 = java2.util2.Collections.unmodifiableList(list64);
    int i67 = java2.util2.Collections.indexOfSubList(list61, list66);
    java2.util2.List list70 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list73 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list73);
    java2.util2.List list75 = java2.util2.Collections.unmodifiableList(list73);
    java2.util2.Collections.copy(list70, list73);
    java2.util2.Collections.copy(list66, list70);
    java2.util2.List list80 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list83 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list83);
    java2.util2.List list85 = java2.util2.Collections.unmodifiableList(list83);
    java2.util2.Collections.copy(list80, list83);
    int i87 = java2.util2.Collections.indexOfSubList(list70, list83);
    java2.util2.Comparator comparator88 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list83, comparator88);
    java2.util2.Collections.sort(list50, comparator88);
    java.lang.Object obj91 = java2.util2.Collections.min((java2.util2.Collection)treeSet5, comparator88);
    java2.util2.TreeSet treeSet92 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet5);
    java2.util2.Comparator comparator93 = treeSet5.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 0+ "'", obj10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet16.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet16.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet23.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet23.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet23.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + 0+ "'", obj35.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "[0]"+ "'", str38.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet43.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet43.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet43.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj91 + "' != '" + 0+ "'", obj91.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet92.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet92.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet92.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator93);

  }

  @Test
  public void test107() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test107"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    int i8 = java2.util2.Collections.indexOfSubList(list2, list7);
    java2.util2.Enumeration enumeration9 = java2.util2.Collections.enumeration((java2.util2.Collection)list2);
    java2.util2.ArrayList arrayList10 = java2.util2.Collections.list(enumeration9);
    java2.util2.ArrayList arrayList11 = java2.util2.Collections.list(enumeration9);
    java2.util2.List list12 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList11);
    java2.util2.List list15 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list15);
    int i18 = java2.util2.Collections.binarySearch(list15, (java.lang.Object)(short)100);
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list24 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list24);
    java2.util2.List list26 = java2.util2.Collections.unmodifiableList(list24);
    java2.util2.Collections.copy(list21, list24);
    java2.util2.Collections.rotate(list21, 0);
    java2.util2.List list32 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list35 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list35);
    java2.util2.List list37 = java2.util2.Collections.unmodifiableList(list35);
    int i38 = java2.util2.Collections.indexOfSubList(list32, list37);
    java2.util2.List list41 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list44 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list44);
    java2.util2.List list46 = java2.util2.Collections.unmodifiableList(list44);
    java2.util2.Collections.copy(list41, list44);
    java2.util2.Collections.copy(list37, list41);
    java2.util2.List list51 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list54 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list54);
    java2.util2.List list56 = java2.util2.Collections.unmodifiableList(list54);
    java2.util2.Collections.copy(list51, list54);
    int i58 = java2.util2.Collections.indexOfSubList(list41, list54);
    java2.util2.Comparator comparator59 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list54, comparator59);
    java2.util2.Collections.sort(list21, comparator59);
    java2.util2.Map map62 = java2.util2.Collections.singletonMap((java.lang.Object)list15, (java.lang.Object)list21);
    java2.util2.Collections.fill((java2.util2.List)arrayList11, (java.lang.Object)map62);
    java.lang.String str64 = arrayList11.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "[]"+ "'", str64.equals("[]"));

  }

  @Test
  public void test108() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test108"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list6);
    java2.util2.List list8 = java2.util2.Collections.unmodifiableList(list6);
    int i9 = java2.util2.Collections.indexOfSubList(list3, list8);
    java2.util2.Map map10 = java2.util2.Collections.singletonMap((java.lang.Object)0L, (java.lang.Object)list8);
    java2.util2.Map map11 = java2.util2.Collections.synchronizedMap(map10);
    java2.util2.Map map12 = java2.util2.Collections.unmodifiableMap(map10);
    java2.util2.List list13 = java2.util2.Collections.singletonList((java.lang.Object)map10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);

  }

  @Test
  public void test109() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test109"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet5);
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set10 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set11 = java2.util2.Collections.unmodifiableSet(set10);
    java2.util2.TreeSet treeSet12 = new java2.util2.TreeSet((java2.util2.Collection)set10);
    java.lang.Object[] obj_array14 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array15 = treeSet12.toArray(obj_array14);
    java.lang.Object[] obj_array16 = treeSet12.toArray();
    boolean b17 = treeSet5.removeAll((java2.util2.Collection)treeSet12);
    java2.util2.SortedSet sortedSet18 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet12.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet12.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet18);

  }

  @Test
  public void test110() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test110"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.String str6 = treeSet5.toString();
    java.lang.Object obj7 = treeSet5.last();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[0]"+ "'", str6.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 0+ "'", obj7.equals(0));

  }

  @Test
  public void test111() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test111"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list19 = java2.util2.Collections.unmodifiableList(list18);
    java2.util2.Collections.fill(list8, (java.lang.Object)list19);
    java2.util2.Collection collection21 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list8);
    java2.util2.List list22 = java2.util2.Collections.unmodifiableList(list8);
    java2.util2.List list25 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list26 = java2.util2.Collections.unmodifiableList(list25);
    java2.util2.List list29 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set30 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set31 = java2.util2.Collections.unmodifiableSet(set30);
    java2.util2.TreeSet treeSet32 = new java2.util2.TreeSet((java2.util2.Collection)set30);
    java2.util2.SortedSet sortedSet34 = treeSet32.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj35 = java2.util2.Collections.max((java2.util2.Collection)treeSet32);
    java2.util2.List list38 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list41 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list41);
    java2.util2.List list43 = java2.util2.Collections.unmodifiableList(list41);
    int i44 = java2.util2.Collections.indexOfSubList(list38, list43);
    java2.util2.List list45 = java2.util2.Collections.synchronizedList(list43);
    boolean b46 = treeSet32.retainAll((java2.util2.Collection)list45);
    int i47 = java2.util2.Collections.lastIndexOfSubList(list26, list45);
    java2.util2.Collections.reverse(list45);
    java2.util2.Collections.copy(list8, list45);
    java2.util2.List list52 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list55 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list55);
    java2.util2.List list57 = java2.util2.Collections.unmodifiableList(list55);
    int i58 = java2.util2.Collections.indexOfSubList(list52, list57);
    java2.util2.List list61 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list64 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list64);
    java2.util2.List list66 = java2.util2.Collections.unmodifiableList(list64);
    java2.util2.Collections.copy(list61, list64);
    java2.util2.Collections.copy(list57, list61);
    java2.util2.Collection collection69 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list61);
    java2.util2.List list72 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list75 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list75);
    java2.util2.List list77 = java2.util2.Collections.unmodifiableList(list75);
    java2.util2.Collections.copy(list72, list75);
    java2.util2.Collections.sort(list72);
    boolean b80 = java2.util2.Collections.replaceAll(list8, (java.lang.Object)list61, (java.lang.Object)list72);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java2.util2.Collections.swap(list8, (-1), 0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet32.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet32.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet32.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + 0+ "'", obj35.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);

  }

  @Test
  public void test112() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test112"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java.lang.Object[] obj_array9 = treeSet5.toArray();
    java2.util2.Set set10 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet5);
    java2.util2.SortedSet sortedSet12 = treeSet5.tailSet((java.lang.Object)1.0f);
    java.lang.Object obj13 = treeSet5.last();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 0+ "'", obj13.equals(0));

  }

  @Test
  public void test113() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test113"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object obj5 = treeSet4.last();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 0+ "'", obj5.equals(0));

  }

  @Test
  public void test114() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test114"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.clone();
    java2.util2.List list19 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list22 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list22);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list22);
    int i25 = java2.util2.Collections.indexOfSubList(list19, list24);
    java2.util2.Enumeration enumeration26 = java2.util2.Collections.enumeration((java2.util2.Collection)list19);
    java2.util2.ArrayList arrayList27 = java2.util2.Collections.list(enumeration26);
    java2.util2.ArrayList arrayList28 = java2.util2.Collections.list(enumeration26);
    java2.util2.List list29 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList28);
    java2.util2.List list32 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set33 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set34 = java2.util2.Collections.unmodifiableSet(set33);
    java2.util2.TreeSet treeSet35 = new java2.util2.TreeSet((java2.util2.Collection)set33);
    java2.util2.SortedSet sortedSet37 = treeSet35.tailSet((java.lang.Object)(short)0);
    java2.util2.List list40 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set41 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet42 = new java2.util2.TreeSet((java2.util2.Collection)set41);
    java.lang.Object[] obj_array43 = treeSet42.toArray();
    java2.util2.List list46 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list49 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list49);
    java2.util2.List list51 = java2.util2.Collections.unmodifiableList(list49);
    java2.util2.Collections.copy(list46, list49);
    boolean b53 = treeSet42.addAll((java2.util2.Collection)list46);
    java.lang.Object obj54 = treeSet42.first();
    java2.util2.SortedSet sortedSet56 = treeSet42.tailSet((java.lang.Object)"");
    java.lang.String str57 = treeSet42.toString();
    java2.util2.List list60 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set61 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet62 = new java2.util2.TreeSet((java2.util2.Collection)set61);
    java.lang.Object[] obj_array63 = treeSet62.toArray();
    java.lang.Object[] obj_array64 = treeSet42.toArray(obj_array63);
    java.lang.Object[] obj_array65 = treeSet35.toArray(obj_array63);
    int i66 = java2.util2.Collections.binarySearch((java2.util2.List)arrayList28, (java.lang.Object)obj_array65);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet67 = treeSet4.headSet((java.lang.Object)arrayList28);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet35.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet35.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet35.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet42.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet42.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet42.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj54 + "' != '" + 0+ "'", obj54.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "[0]"+ "'", str57.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet62.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet62.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet62.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == (-1));

  }

  @Test
  public void test115() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test115"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.List list7 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set8 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.Collection)set8);
    java.lang.Object[] obj_array10 = treeSet9.toArray();
    java2.util2.List list13 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list16 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list16);
    java2.util2.List list18 = java2.util2.Collections.unmodifiableList(list16);
    java2.util2.Collections.copy(list13, list16);
    boolean b20 = treeSet9.addAll((java2.util2.Collection)list13);
    java2.util2.List list23 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list23);
    java2.util2.Collections.fill(list13, (java.lang.Object)list24);
    java2.util2.List list28 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list28);
    java2.util2.List list32 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.fill(list28, (java.lang.Object)(-1.0d));
    java2.util2.Collections.copy(list24, list28);
    java2.util2.List list37 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list40 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list40);
    java2.util2.List list42 = java2.util2.Collections.unmodifiableList(list40);
    int i43 = java2.util2.Collections.indexOfSubList(list37, list42);
    java2.util2.List list44 = java2.util2.Collections.synchronizedList(list42);
    int i45 = java2.util2.Collections.lastIndexOfSubList(list24, list44);
    java2.util2.SortedSet sortedSet46 = treeSet4.headSet((java.lang.Object)i45);
    java2.util2.Iterator iterator47 = treeSet4.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator47);

  }

  @Test
  public void test116() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test116"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.first();
    java2.util2.SortedSet sortedSet18 = treeSet4.tailSet((java.lang.Object)"");
    java.lang.String str19 = treeSet4.toString();
    java2.util2.List list22 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set23 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet24 = new java2.util2.TreeSet((java2.util2.Collection)set23);
    java.lang.Object[] obj_array25 = treeSet24.toArray();
    java.lang.Object[] obj_array26 = treeSet4.toArray(obj_array25);
    java2.util2.List list29 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set30 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet31 = new java2.util2.TreeSet((java2.util2.Collection)set30);
    java.lang.Object[] obj_array32 = treeSet31.toArray();
    java2.util2.List list35 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list38 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list38);
    java2.util2.List list40 = java2.util2.Collections.unmodifiableList(list38);
    java2.util2.Collections.copy(list35, list38);
    boolean b42 = treeSet31.addAll((java2.util2.Collection)list35);
    java.lang.Object obj43 = treeSet31.first();
    java2.util2.SortedSet sortedSet45 = treeSet31.tailSet((java.lang.Object)"");
    java2.util2.SortedSet sortedSet46 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet31);
    boolean b47 = treeSet4.equals((java.lang.Object)treeSet31);
    java2.util2.TreeSet treeSet48 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet31);
    java.lang.Object[] obj_array49 = treeSet48.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 0+ "'", obj16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[0]"+ "'", str19.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet24.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet24.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet24.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet31.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet31.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet31.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj43 + "' != '" + 0+ "'", obj43.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet48.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet48.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet48.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array49);

  }

  @Test
  public void test117() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test117"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.Set set16 = java2.util2.Collections.singleton((java.lang.Object)treeSet4);
    java2.util2.List list19 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set20 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet21 = new java2.util2.TreeSet((java2.util2.Collection)set20);
    java.lang.Object[] obj_array22 = treeSet21.toArray();
    java2.util2.List list25 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list28 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list28);
    java2.util2.List list30 = java2.util2.Collections.unmodifiableList(list28);
    java2.util2.Collections.copy(list25, list28);
    boolean b32 = treeSet21.addAll((java2.util2.Collection)list25);
    java.lang.Object obj33 = treeSet21.first();
    java2.util2.SortedSet sortedSet35 = treeSet21.tailSet((java.lang.Object)"");
    java.lang.String str36 = treeSet21.toString();
    java2.util2.List list39 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set40 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet41 = new java2.util2.TreeSet((java2.util2.Collection)set40);
    java.lang.Object[] obj_array42 = treeSet41.toArray();
    java.lang.Object[] obj_array43 = treeSet21.toArray(obj_array42);
    java.lang.Object obj44 = treeSet21.clone();
    java.lang.Object[] obj_array45 = treeSet21.toArray();
    java2.util2.List list48 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet49 = treeSet4.subSet((java.lang.Object)treeSet21, (java.lang.Object)list48);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet21.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet21.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + 0+ "'", obj33.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "[0]"+ "'", str36.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet41.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet41.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet41.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);

  }

  @Test
  public void test118() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test118"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list3 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set7 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet8 = new java2.util2.TreeSet((java2.util2.Collection)set7);
    java.lang.Object[] obj_array9 = treeSet8.toArray();
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list15 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list15);
    java2.util2.List list17 = java2.util2.Collections.unmodifiableList(list15);
    java2.util2.Collections.copy(list12, list15);
    boolean b19 = treeSet8.addAll((java2.util2.Collection)list12);
    java2.util2.List list22 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list23 = java2.util2.Collections.unmodifiableList(list22);
    java2.util2.Collections.fill(list12, (java.lang.Object)list23);
    java2.util2.Collection collection25 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list12);
    java2.util2.List list28 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set29 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set30 = java2.util2.Collections.unmodifiableSet(set29);
    java2.util2.TreeSet treeSet31 = new java2.util2.TreeSet((java2.util2.Collection)set29);
    java2.util2.SortedSet sortedSet33 = treeSet31.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj34 = treeSet31.clone();
    java2.util2.List list37 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list40 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list40);
    java2.util2.List list42 = java2.util2.Collections.unmodifiableList(list40);
    java2.util2.Collections.copy(list37, list40);
    java2.util2.Collections.rotate(list37, 0);
    java2.util2.List list48 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list51 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list51);
    java2.util2.List list53 = java2.util2.Collections.unmodifiableList(list51);
    int i54 = java2.util2.Collections.indexOfSubList(list48, list53);
    java2.util2.List list57 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list60 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list60);
    java2.util2.List list62 = java2.util2.Collections.unmodifiableList(list60);
    java2.util2.Collections.copy(list57, list60);
    java2.util2.Collections.copy(list53, list57);
    java2.util2.List list67 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list70 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list70);
    java2.util2.List list72 = java2.util2.Collections.unmodifiableList(list70);
    java2.util2.Collections.copy(list67, list70);
    int i74 = java2.util2.Collections.indexOfSubList(list57, list70);
    java2.util2.Comparator comparator75 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list70, comparator75);
    java2.util2.Collections.sort(list37, comparator75);
    int i78 = java2.util2.Collections.binarySearch(list12, (java.lang.Object)treeSet31, comparator75);
    java2.util2.TreeSet treeSet79 = new java2.util2.TreeSet(comparator75);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java.lang.Object obj80 = java2.util2.Collections.max((java2.util2.Collection)list2, comparator75);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet8.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet31.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet31.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet31.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet79.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet79.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet79.toString(), "[]");

  }

  @Test
  public void test119() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test119"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java.lang.Object[] obj_array9 = treeSet5.toArray();
    java2.util2.Set set10 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet5);
    java2.util2.Collection collection11 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet5);
    java.lang.Object obj12 = java2.util2.Collections.min((java2.util2.Collection)treeSet5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 0+ "'", obj12.equals(0));

  }

  @Test
  public void test120() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test120"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.first();
    java2.util2.SortedSet sortedSet18 = treeSet4.tailSet((java.lang.Object)"");
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set22 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet23 = new java2.util2.TreeSet((java2.util2.Collection)set22);
    java.lang.Object[] obj_array24 = treeSet23.toArray();
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list30 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list30);
    java2.util2.List list32 = java2.util2.Collections.unmodifiableList(list30);
    java2.util2.Collections.copy(list27, list30);
    boolean b34 = treeSet23.addAll((java2.util2.Collection)list27);
    java.lang.Object obj35 = treeSet23.first();
    java2.util2.SortedSet sortedSet37 = treeSet23.tailSet((java.lang.Object)"");
    java2.util2.SortedSet sortedSet38 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet23);
    boolean b39 = treeSet4.addAll((java2.util2.Collection)treeSet23);
    java2.util2.List list42 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list45 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list45);
    java2.util2.List list47 = java2.util2.Collections.unmodifiableList(list45);
    int i48 = java2.util2.Collections.indexOfSubList(list42, list47);
    java2.util2.Enumeration enumeration49 = java2.util2.Collections.enumeration((java2.util2.Collection)list42);
    boolean b50 = treeSet4.removeAll((java2.util2.Collection)list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 0+ "'", obj16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet23.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet23.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet23.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + 0+ "'", obj35.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);

  }

  @Test
  public void test121() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test121"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java.lang.Object[] obj_array9 = treeSet5.toArray();
    java.lang.Object obj10 = treeSet5.first();
    java2.util2.List list13 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set14 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set15 = java2.util2.Collections.unmodifiableSet(set14);
    java2.util2.TreeSet treeSet16 = new java2.util2.TreeSet((java2.util2.Collection)set14);
    java2.util2.SortedSet sortedSet18 = treeSet16.tailSet((java.lang.Object)(short)0);
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set22 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet23 = new java2.util2.TreeSet((java2.util2.Collection)set22);
    java.lang.Object[] obj_array24 = treeSet23.toArray();
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list30 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list30);
    java2.util2.List list32 = java2.util2.Collections.unmodifiableList(list30);
    java2.util2.Collections.copy(list27, list30);
    boolean b34 = treeSet23.addAll((java2.util2.Collection)list27);
    java.lang.Object obj35 = treeSet23.first();
    java2.util2.SortedSet sortedSet37 = treeSet23.tailSet((java.lang.Object)"");
    java.lang.String str38 = treeSet23.toString();
    java2.util2.List list41 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set42 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet43 = new java2.util2.TreeSet((java2.util2.Collection)set42);
    java.lang.Object[] obj_array44 = treeSet43.toArray();
    java.lang.Object[] obj_array45 = treeSet23.toArray(obj_array44);
    java.lang.Object[] obj_array46 = treeSet16.toArray(obj_array44);
    java.lang.Object[] obj_array47 = treeSet5.toArray(obj_array44);
    java2.util2.List list50 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list53 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list53);
    java2.util2.List list55 = java2.util2.Collections.unmodifiableList(list53);
    java2.util2.Collections.copy(list50, list53);
    java2.util2.Collections.rotate(list50, 0);
    java2.util2.List list61 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list64 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list64);
    java2.util2.List list66 = java2.util2.Collections.unmodifiableList(list64);
    int i67 = java2.util2.Collections.indexOfSubList(list61, list66);
    java2.util2.List list70 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list73 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list73);
    java2.util2.List list75 = java2.util2.Collections.unmodifiableList(list73);
    java2.util2.Collections.copy(list70, list73);
    java2.util2.Collections.copy(list66, list70);
    java2.util2.List list80 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list83 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list83);
    java2.util2.List list85 = java2.util2.Collections.unmodifiableList(list83);
    java2.util2.Collections.copy(list80, list83);
    int i87 = java2.util2.Collections.indexOfSubList(list70, list83);
    java2.util2.Comparator comparator88 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list83, comparator88);
    java2.util2.Collections.sort(list50, comparator88);
    java.lang.Object obj91 = java2.util2.Collections.min((java2.util2.Collection)treeSet5, comparator88);
    java2.util2.TreeSet treeSet92 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet5);
    java2.util2.Set set93 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet92);
    java2.util2.TreeSet treeSet94 = new java2.util2.TreeSet((java2.util2.Collection)set93);
    java2.util2.Collection collection95 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 0+ "'", obj10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet16.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet16.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet23.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet23.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet23.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + 0+ "'", obj35.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "[0]"+ "'", str38.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet43.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet43.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet43.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj91 + "' != '" + 0+ "'", obj91.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet92.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet92.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet92.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet94.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet94.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet94.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection95);

  }

  @Test
  public void test122() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test122"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    java2.util2.Collections.copy(list2, list5);
    java2.util2.Collections.rotate(list2, 0);
    java2.util2.List list13 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set14 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet15 = new java2.util2.TreeSet((java2.util2.Collection)set14);
    java.lang.Object[] obj_array16 = treeSet15.toArray();
    java2.util2.List list19 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list22 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list22);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list22);
    java2.util2.Collections.copy(list19, list22);
    boolean b26 = treeSet15.addAll((java2.util2.Collection)list19);
    java.lang.Object obj27 = treeSet15.first();
    treeSet15.clear();
    java2.util2.SortedSet sortedSet29 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet15);
    int i30 = java2.util2.Collections.binarySearch(list2, (java.lang.Object)treeSet15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet15.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + 0+ "'", obj27.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == (-1));

  }

  @Test
  public void test123() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test123"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java.lang.Object[] obj_array9 = treeSet5.toArray();
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set13 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet14 = new java2.util2.TreeSet((java2.util2.Collection)set13);
    java.lang.Object[] obj_array15 = treeSet14.toArray();
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list21);
    java2.util2.List list23 = java2.util2.Collections.unmodifiableList(list21);
    java2.util2.Collections.copy(list18, list21);
    boolean b25 = treeSet14.addAll((java2.util2.Collection)list18);
    java2.util2.Set set26 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet14);
    java2.util2.Set set27 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet14);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      boolean b28 = treeSet5.remove((java.lang.Object)treeSet14);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet14.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);

  }

  @Test
  public void test124() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test124"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.Set set6 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet5);
    treeSet5.clear();
    java2.util2.List list10 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list13 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list13);
    java2.util2.List list15 = java2.util2.Collections.unmodifiableList(list13);
    java2.util2.Collections.copy(list10, list13);
    java2.util2.Collections.fill(list10, (java.lang.Object)0.0f);
    java2.util2.List list22 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set23 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet24 = new java2.util2.TreeSet((java2.util2.Collection)set23);
    java.lang.Object[] obj_array25 = treeSet24.toArray();
    java2.util2.List list28 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list31 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list31);
    java2.util2.List list33 = java2.util2.Collections.unmodifiableList(list31);
    java2.util2.Collections.copy(list28, list31);
    boolean b35 = treeSet24.addAll((java2.util2.Collection)list28);
    java.lang.Object obj36 = treeSet24.first();
    java2.util2.SortedSet sortedSet38 = treeSet24.tailSet((java.lang.Object)"");
    java2.util2.List list39 = java2.util2.Collections.nCopies(1, (java.lang.Object)treeSet24);
    java.lang.String str40 = treeSet24.toString();
    java2.util2.List list43 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list46 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list46);
    java2.util2.List list48 = java2.util2.Collections.unmodifiableList(list46);
    java2.util2.Collections.copy(list43, list46);
    java2.util2.Collections.rotate(list43, 0);
    java2.util2.List list54 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list57 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list57);
    java2.util2.List list59 = java2.util2.Collections.unmodifiableList(list57);
    int i60 = java2.util2.Collections.indexOfSubList(list54, list59);
    java2.util2.List list63 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list66 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list66);
    java2.util2.List list68 = java2.util2.Collections.unmodifiableList(list66);
    java2.util2.Collections.copy(list63, list66);
    java2.util2.Collections.copy(list59, list63);
    java2.util2.List list73 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list76 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list76);
    java2.util2.List list78 = java2.util2.Collections.unmodifiableList(list76);
    java2.util2.Collections.copy(list73, list76);
    int i80 = java2.util2.Collections.indexOfSubList(list63, list76);
    java2.util2.Comparator comparator81 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list76, comparator81);
    java2.util2.Collections.sort(list43, comparator81);
    int i84 = java2.util2.Collections.binarySearch(list10, (java.lang.Object)str40, comparator81);
    java2.util2.TreeSet treeSet85 = new java2.util2.TreeSet(comparator81);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java.lang.Object obj86 = java2.util2.Collections.max((java2.util2.Collection)treeSet5, comparator81);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet24.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet24.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet24.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj36 + "' != '" + 0+ "'", obj36.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "[0]"+ "'", str40.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet85.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet85.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet85.toString(), "[]");

  }

  @Test
  public void test125() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test125"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set4 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set4);
    java.lang.Object[] obj_array6 = treeSet5.toArray();
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list12);
    java2.util2.List list14 = java2.util2.Collections.unmodifiableList(list12);
    java2.util2.Collections.copy(list9, list12);
    boolean b16 = treeSet5.addAll((java2.util2.Collection)list9);
    java.lang.Object obj17 = treeSet5.first();
    java2.util2.SortedSet sortedSet19 = treeSet5.tailSet((java.lang.Object)"");
    java2.util2.List list20 = java2.util2.Collections.nCopies(1, (java.lang.Object)treeSet5);
    java.lang.String str21 = treeSet5.toString();
    java2.util2.List list24 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set25 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set26 = java2.util2.Collections.unmodifiableSet(set25);
    java2.util2.TreeSet treeSet27 = new java2.util2.TreeSet((java2.util2.Collection)set25);
    java2.util2.SortedSet sortedSet29 = treeSet27.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj30 = java2.util2.Collections.max((java2.util2.Collection)treeSet27);
    java2.util2.List list33 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list36 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list36);
    java2.util2.List list38 = java2.util2.Collections.unmodifiableList(list36);
    int i39 = java2.util2.Collections.indexOfSubList(list33, list38);
    java2.util2.List list40 = java2.util2.Collections.synchronizedList(list38);
    boolean b41 = treeSet27.retainAll((java2.util2.Collection)list40);
    java.lang.Object[] obj_array42 = treeSet27.toArray();
    boolean b43 = treeSet5.equals((java.lang.Object)obj_array42);
    java.lang.Object obj44 = treeSet5.last();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + 0+ "'", obj17.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[0]"+ "'", str21.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet27.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet27.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj30 + "' != '" + 0+ "'", obj30.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj44 + "' != '" + 0+ "'", obj44.equals(0));

  }

  @Test
  public void test126() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test126"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet5);
    java2.util2.Set set7 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet5);
    java2.util2.Set set8 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet5);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set13 = java2.util2.Collections.unmodifiableSet(set12);
    java2.util2.TreeSet treeSet14 = new java2.util2.TreeSet((java2.util2.Collection)set12);
    java.lang.Object[] obj_array16 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array17 = treeSet14.toArray(obj_array16);
    java.lang.Object[] obj_array18 = treeSet14.toArray();
    java2.util2.Set set19 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet14);
    java2.util2.Collection collection20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet14);
    boolean b21 = treeSet5.equals((java.lang.Object)treeSet14);
    boolean b22 = treeSet14.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet14.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);

  }

  @Test
  public void test127() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test127"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet5);
    int i7 = treeSet5.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);

  }

  @Test
  public void test128() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test128"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)"[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);

  }

  @Test
  public void test129() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test129"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list14);
    java2.util2.List list16 = java2.util2.Collections.unmodifiableList(list14);
    int i17 = java2.util2.Collections.indexOfSubList(list11, list16);
    java2.util2.List list20 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list23 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list23);
    java2.util2.List list25 = java2.util2.Collections.unmodifiableList(list23);
    java2.util2.Collections.copy(list20, list23);
    java2.util2.Collections.copy(list16, list20);
    java2.util2.List list30 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list33 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list33);
    java2.util2.List list35 = java2.util2.Collections.unmodifiableList(list33);
    java2.util2.Collections.copy(list30, list33);
    int i37 = java2.util2.Collections.indexOfSubList(list20, list33);
    boolean b38 = treeSet5.removeAll((java2.util2.Collection)list33);
    java2.util2.List list41 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set42 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet43 = new java2.util2.TreeSet((java2.util2.Collection)set42);
    java.lang.Object[] obj_array44 = treeSet43.toArray();
    java2.util2.List list47 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list50 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list50);
    java2.util2.List list52 = java2.util2.Collections.unmodifiableList(list50);
    java2.util2.Collections.copy(list47, list50);
    boolean b54 = treeSet43.addAll((java2.util2.Collection)list47);
    java2.util2.List list57 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list58 = java2.util2.Collections.unmodifiableList(list57);
    java2.util2.Collections.fill(list47, (java.lang.Object)list58);
    boolean b60 = treeSet5.retainAll((java2.util2.Collection)list47);
    java2.util2.List list63 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list66 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list66);
    java2.util2.List list68 = java2.util2.Collections.unmodifiableList(list66);
    int i69 = java2.util2.Collections.indexOfSubList(list63, list68);
    java2.util2.List list72 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list75 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list75);
    java2.util2.List list77 = java2.util2.Collections.unmodifiableList(list75);
    java2.util2.Collections.copy(list72, list75);
    java2.util2.Collections.copy(list68, list72);
    java2.util2.Collections.rotate(list68, 100);
    boolean b82 = treeSet5.add((java.lang.Object)list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[[]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet43.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet43.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet43.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);

  }

  @Test
  public void test130() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test130"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet7 = treeSet5.headSet((java.lang.Object)(short)(-1));
    java2.util2.Comparator comparator8 = treeSet5.comparator();
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet((java2.util2.Collection)set12);
    java.lang.Object[] obj_array14 = treeSet13.toArray();
    java2.util2.List list17 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list20 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list20);
    java2.util2.List list22 = java2.util2.Collections.unmodifiableList(list20);
    java2.util2.Collections.copy(list17, list20);
    boolean b24 = treeSet13.addAll((java2.util2.Collection)list17);
    java.lang.Object obj25 = treeSet13.first();
    java2.util2.SortedSet sortedSet27 = treeSet13.tailSet((java.lang.Object)"");
    java2.util2.List list30 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set31 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet32 = new java2.util2.TreeSet((java2.util2.Collection)set31);
    java.lang.Object[] obj_array33 = treeSet32.toArray();
    java2.util2.List list36 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list39 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list39);
    java2.util2.List list41 = java2.util2.Collections.unmodifiableList(list39);
    java2.util2.Collections.copy(list36, list39);
    boolean b43 = treeSet32.addAll((java2.util2.Collection)list36);
    java.lang.Object obj44 = treeSet32.first();
    java2.util2.SortedSet sortedSet46 = treeSet32.tailSet((java.lang.Object)"");
    java2.util2.SortedSet sortedSet47 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet32);
    boolean b48 = treeSet13.addAll((java2.util2.Collection)treeSet32);
    java2.util2.Map map49 = java2.util2.Collections.singletonMap((java.lang.Object)treeSet5, (java.lang.Object)treeSet32);
    java2.util2.Comparator comparator50 = treeSet32.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + 0+ "'", obj25.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet32.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet32.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet32.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj44 + "' != '" + 0+ "'", obj44.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator50);

  }

  @Test
  public void test131() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test131"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.first();
    java2.util2.SortedSet sortedSet18 = treeSet4.tailSet((java.lang.Object)"");
    java.lang.String str19 = treeSet4.toString();
    java2.util2.List list22 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set23 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet24 = new java2.util2.TreeSet((java2.util2.Collection)set23);
    java.lang.Object[] obj_array25 = treeSet24.toArray();
    java.lang.Object[] obj_array26 = treeSet4.toArray(obj_array25);
    java2.util2.List list29 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set30 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet31 = new java2.util2.TreeSet((java2.util2.Collection)set30);
    java.lang.Object[] obj_array32 = treeSet31.toArray();
    java2.util2.List list35 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list38 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list38);
    java2.util2.List list40 = java2.util2.Collections.unmodifiableList(list38);
    java2.util2.Collections.copy(list35, list38);
    boolean b42 = treeSet31.addAll((java2.util2.Collection)list35);
    java.lang.Object obj43 = treeSet31.first();
    java2.util2.SortedSet sortedSet45 = treeSet31.tailSet((java.lang.Object)"");
    java2.util2.SortedSet sortedSet46 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet31);
    boolean b47 = treeSet4.equals((java.lang.Object)treeSet31);
    java2.util2.List list50 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set51 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set52 = java2.util2.Collections.unmodifiableSet(set51);
    java2.util2.TreeSet treeSet53 = new java2.util2.TreeSet((java2.util2.Collection)set51);
    java2.util2.Set set54 = java2.util2.Collections.singleton((java.lang.Object)treeSet53);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      boolean b55 = treeSet4.remove((java.lang.Object)set54);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 0+ "'", obj16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[0]"+ "'", str19.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet24.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet24.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet24.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet31.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet31.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet31.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj43 + "' != '" + 0+ "'", obj43.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet53.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet53.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet53.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set54);

  }

  @Test
  public void test132() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test132"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.first();
    java2.util2.SortedSet sortedSet18 = treeSet4.tailSet((java.lang.Object)"");
    java.lang.String str19 = treeSet4.toString();
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      boolean b21 = treeSet4.remove((java.lang.Object)0.0f);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 0+ "'", obj16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[0]"+ "'", str19.equals("[0]"));

  }

  @Test
  public void test133() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test133"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.Set set6 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet4);
    java2.util2.List list7 = java2.util2.Collections.singletonList((java.lang.Object)set6);
    java2.util2.List list10 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set11 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set12 = java2.util2.Collections.unmodifiableSet(set11);
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet((java2.util2.Collection)set11);
    java.lang.Object[] obj_array15 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array16 = treeSet13.toArray(obj_array15);
    java2.util2.List list19 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list19);
    java2.util2.List list21 = java2.util2.Collections.unmodifiableList(list19);
    boolean b22 = treeSet13.addAll((java2.util2.Collection)list21);
    java2.util2.List list25 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set26 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set27 = java2.util2.Collections.unmodifiableSet(set26);
    java2.util2.TreeSet treeSet28 = new java2.util2.TreeSet((java2.util2.Collection)set26);
    java.lang.Object[] obj_array30 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array31 = treeSet28.toArray(obj_array30);
    java.lang.Object[] obj_array32 = treeSet28.toArray();
    java2.util2.List list36 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list39 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list39);
    java2.util2.List list41 = java2.util2.Collections.unmodifiableList(list39);
    int i42 = java2.util2.Collections.indexOfSubList(list36, list41);
    java2.util2.Map map43 = java2.util2.Collections.singletonMap((java.lang.Object)0L, (java.lang.Object)list41);
    java2.util2.Map map44 = java2.util2.Collections.synchronizedMap(map43);
    boolean b45 = java2.util2.Collections.replaceAll(list21, (java.lang.Object)treeSet28, (java.lang.Object)map43);
    java2.util2.List list48 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list51 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list51);
    java2.util2.List list53 = java2.util2.Collections.unmodifiableList(list51);
    java2.util2.Collections.copy(list48, list51);
    java2.util2.Collections.rotate(list48, 0);
    java2.util2.List list59 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list62 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list62);
    java2.util2.List list64 = java2.util2.Collections.unmodifiableList(list62);
    int i65 = java2.util2.Collections.indexOfSubList(list59, list64);
    java2.util2.List list68 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list71 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list71);
    java2.util2.List list73 = java2.util2.Collections.unmodifiableList(list71);
    java2.util2.Collections.copy(list68, list71);
    java2.util2.Collections.copy(list64, list68);
    java2.util2.List list78 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list81 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list81);
    java2.util2.List list83 = java2.util2.Collections.unmodifiableList(list81);
    java2.util2.Collections.copy(list78, list81);
    int i85 = java2.util2.Collections.indexOfSubList(list68, list81);
    java2.util2.Comparator comparator86 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list81, comparator86);
    java2.util2.Collections.sort(list48, comparator86);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      int i89 = java2.util2.Collections.binarySearch(list7, (java.lang.Object)b45, comparator86);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet28.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet28.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet28.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator86);

  }

  @Test
  public void test134() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test134"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.Set set16 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet4);
    java2.util2.Set set17 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet4);
    java2.util2.List list20 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set21 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set22 = java2.util2.Collections.unmodifiableSet(set21);
    java2.util2.TreeSet treeSet23 = new java2.util2.TreeSet((java2.util2.Collection)set21);
    java.lang.Object[] obj_array25 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array26 = treeSet23.toArray(obj_array25);
    java.lang.Object[] obj_array27 = treeSet23.toArray();
    java2.util2.Set set28 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet23);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet29 = treeSet4.headSet((java.lang.Object)set28);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet23.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet23.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet23.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set28);

  }

  @Test
  public void test135() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test135"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet7 = treeSet5.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj8 = java2.util2.Collections.max((java2.util2.Collection)treeSet5);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list14);
    java2.util2.List list16 = java2.util2.Collections.unmodifiableList(list14);
    int i17 = java2.util2.Collections.indexOfSubList(list11, list16);
    java2.util2.List list20 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list23 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list23);
    java2.util2.List list25 = java2.util2.Collections.unmodifiableList(list23);
    java2.util2.Collections.copy(list20, list23);
    java2.util2.Collections.copy(list16, list20);
    java2.util2.List list30 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list33 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list33);
    java2.util2.List list35 = java2.util2.Collections.unmodifiableList(list33);
    java2.util2.Collections.copy(list30, list33);
    int i37 = java2.util2.Collections.indexOfSubList(list20, list33);
    boolean b38 = treeSet5.equals((java.lang.Object)list20);
    java.lang.Object obj39 = treeSet5.first();
    java2.util2.List list42 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set43 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet44 = new java2.util2.TreeSet((java2.util2.Collection)set43);
    java.lang.Object[] obj_array45 = treeSet44.toArray();
    java2.util2.List list48 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list51 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list51);
    java2.util2.List list53 = java2.util2.Collections.unmodifiableList(list51);
    java2.util2.Collections.copy(list48, list51);
    boolean b55 = treeSet44.addAll((java2.util2.Collection)list48);
    java2.util2.List list58 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list59 = java2.util2.Collections.unmodifiableList(list58);
    java2.util2.Collections.fill(list48, (java.lang.Object)list59);
    java2.util2.List list61 = java2.util2.Collections.unmodifiableList(list59);
    java2.util2.List list62 = java2.util2.Collections.unmodifiableList(list59);
    java2.util2.Collection collection63 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list59);
    boolean b64 = treeSet5.addAll((java2.util2.Collection)list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 0+ "'", obj8.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj39 + "' != '" + 0+ "'", obj39.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet44.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet44.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet44.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);

  }

  @Test
  public void test136() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test136"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet5 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet4);
    boolean b6 = treeSet4.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);

  }

  @Test
  public void test137() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test137"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    int i8 = java2.util2.Collections.indexOfSubList(list2, list7);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list14);
    java2.util2.List list16 = java2.util2.Collections.unmodifiableList(list14);
    int i17 = java2.util2.Collections.indexOfSubList(list11, list16);
    java2.util2.List list20 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list23 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list23);
    java2.util2.List list25 = java2.util2.Collections.unmodifiableList(list23);
    java2.util2.Collections.copy(list20, list23);
    java2.util2.Collections.copy(list16, list20);
    java2.util2.List list30 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list33 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list33);
    java2.util2.List list35 = java2.util2.Collections.unmodifiableList(list33);
    java2.util2.Collections.copy(list30, list33);
    int i37 = java2.util2.Collections.indexOfSubList(list20, list33);
    java2.util2.List list40 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list43 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list43);
    java2.util2.List list45 = java2.util2.Collections.unmodifiableList(list43);
    int i46 = java2.util2.Collections.indexOfSubList(list40, list45);
    java2.util2.List list49 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list52 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list52);
    java2.util2.List list54 = java2.util2.Collections.unmodifiableList(list52);
    java2.util2.Collections.copy(list49, list52);
    java2.util2.Collections.copy(list45, list49);
    java2.util2.List list59 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list62 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list62);
    java2.util2.List list64 = java2.util2.Collections.unmodifiableList(list62);
    java2.util2.Collections.copy(list59, list62);
    int i66 = java2.util2.Collections.indexOfSubList(list49, list62);
    boolean b67 = java2.util2.Collections.replaceAll(list7, (java.lang.Object)list20, (java.lang.Object)list49);
    java2.util2.Collection collection68 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list20);
    java2.util2.List list71 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set72 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet73 = new java2.util2.TreeSet((java2.util2.Collection)set72);
    java.lang.Object[] obj_array74 = treeSet73.toArray();
    java2.util2.List list77 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list80 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list80);
    java2.util2.List list82 = java2.util2.Collections.unmodifiableList(list80);
    java2.util2.Collections.copy(list77, list80);
    boolean b84 = treeSet73.addAll((java2.util2.Collection)list77);
    java2.util2.List list87 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list88 = java2.util2.Collections.unmodifiableList(list87);
    java2.util2.Collections.fill(list77, (java.lang.Object)list88);
    java2.util2.List list90 = java2.util2.Collections.unmodifiableList(list88);
    java2.util2.Collections.copy(list20, list90);
    java2.util2.Collections.rotate(list90, 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet73.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet73.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet73.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list90);

  }

  @Test
  public void test138() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test138"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list19 = java2.util2.Collections.unmodifiableList(list18);
    java2.util2.Collections.fill(list8, (java.lang.Object)list19);
    java2.util2.List list23 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list23);
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list30 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list30);
    java2.util2.List list32 = java2.util2.Collections.unmodifiableList(list30);
    int i33 = java2.util2.Collections.indexOfSubList(list27, list32);
    java2.util2.List list36 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list39 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list39);
    java2.util2.List list41 = java2.util2.Collections.unmodifiableList(list39);
    java2.util2.Collections.copy(list36, list39);
    java2.util2.Collections.copy(list32, list36);
    java2.util2.List list46 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list49 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list49);
    java2.util2.List list51 = java2.util2.Collections.unmodifiableList(list49);
    java2.util2.Collections.copy(list46, list49);
    int i53 = java2.util2.Collections.indexOfSubList(list36, list49);
    java2.util2.Comparator comparator54 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list49, comparator54);
    int i56 = java2.util2.Collections.binarySearch(list19, (java.lang.Object)list23, comparator54);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java.lang.Object obj57 = java2.util2.Collections.max((java2.util2.Collection)list23);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == (-1));

  }

  @Test
  public void test139() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test139"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)"[]");
    java2.util2.List list3 = java2.util2.Collections.unmodifiableList(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);

  }

  @Test
  public void test140() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test140"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list19 = java2.util2.Collections.unmodifiableList(list18);
    java2.util2.Collections.fill(list8, (java.lang.Object)list19);
    java2.util2.Collection collection21 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list8);
    java2.util2.List list25 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set26 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet27 = new java2.util2.TreeSet((java2.util2.Collection)set26);
    java.lang.Object[] obj_array28 = treeSet27.toArray();
    java2.util2.List list31 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list34 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list34);
    java2.util2.List list36 = java2.util2.Collections.unmodifiableList(list34);
    java2.util2.Collections.copy(list31, list34);
    boolean b38 = treeSet27.addAll((java2.util2.Collection)list31);
    java.lang.Object obj39 = treeSet27.first();
    java2.util2.SortedSet sortedSet41 = treeSet27.tailSet((java.lang.Object)"");
    java2.util2.List list42 = java2.util2.Collections.nCopies(1, (java.lang.Object)treeSet27);
    java.lang.String str43 = treeSet27.toString();
    java2.util2.Map map44 = java2.util2.Collections.singletonMap((java.lang.Object)list8, (java.lang.Object)str43);
    java2.util2.TreeSet treeSet45 = new java2.util2.TreeSet((java2.util2.Collection)list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet27.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet27.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj39 + "' != '" + 0+ "'", obj39.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "[0]"+ "'", str43.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet45.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet45.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet45.toString(), "[]");

  }

  @Test
  public void test141() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test141"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list19 = java2.util2.Collections.unmodifiableList(list18);
    java2.util2.Collections.fill(list8, (java.lang.Object)list19);
    java2.util2.List list21 = java2.util2.Collections.unmodifiableList(list19);
    java2.util2.List list22 = java2.util2.Collections.unmodifiableList(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);

  }

  @Test
  public void test142() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test142"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list9);
    java2.util2.List list11 = java2.util2.Collections.unmodifiableList(list9);
    int i12 = java2.util2.Collections.indexOfSubList(list6, list11);
    java2.util2.List list13 = java2.util2.Collections.synchronizedList(list11);
    int i14 = java2.util2.Collections.lastIndexOfSubList(list2, list11);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet20 = new java2.util2.TreeSet((java2.util2.Collection)set19);
    java.lang.Object[] obj_array21 = treeSet20.toArray();
    java2.util2.List list24 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list27);
    java2.util2.List list29 = java2.util2.Collections.unmodifiableList(list27);
    java2.util2.Collections.copy(list24, list27);
    boolean b31 = treeSet20.addAll((java2.util2.Collection)list24);
    java.lang.Object obj32 = treeSet20.first();
    java2.util2.SortedSet sortedSet34 = treeSet20.tailSet((java.lang.Object)"");
    java2.util2.List list35 = java2.util2.Collections.nCopies(1, (java.lang.Object)treeSet20);
    java.lang.String str36 = treeSet20.toString();
    java2.util2.List list39 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set40 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set41 = java2.util2.Collections.unmodifiableSet(set40);
    java2.util2.TreeSet treeSet42 = new java2.util2.TreeSet((java2.util2.Collection)set40);
    java2.util2.SortedSet sortedSet44 = treeSet42.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj45 = java2.util2.Collections.max((java2.util2.Collection)treeSet42);
    java2.util2.List list48 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list51 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list51);
    java2.util2.List list53 = java2.util2.Collections.unmodifiableList(list51);
    int i54 = java2.util2.Collections.indexOfSubList(list48, list53);
    java2.util2.List list55 = java2.util2.Collections.synchronizedList(list53);
    boolean b56 = treeSet42.retainAll((java2.util2.Collection)list55);
    java.lang.Object[] obj_array57 = treeSet42.toArray();
    boolean b58 = treeSet20.equals((java.lang.Object)obj_array57);
    java2.util2.Collections.fill(list11, (java.lang.Object)treeSet20);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java2.util2.Collections.swap(list11, 1, 0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet20.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet20.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet20.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + 0+ "'", obj32.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "[0]"+ "'", str36.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet42.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet42.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet42.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj45 + "' != '" + 0+ "'", obj45.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);

  }

  @Test
  public void test143() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test143"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.Collection collection16 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection16);

  }

  @Test
  public void test144() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test144"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list6);
    java2.util2.List list8 = java2.util2.Collections.unmodifiableList(list6);
    int i9 = java2.util2.Collections.indexOfSubList(list3, list8);
    java2.util2.Map map10 = java2.util2.Collections.singletonMap((java.lang.Object)0L, (java.lang.Object)list8);
    java2.util2.Map map11 = java2.util2.Collections.synchronizedMap(map10);
    java2.util2.Map map12 = java2.util2.Collections.synchronizedMap(map11);
    java2.util2.Map map13 = java2.util2.Collections.synchronizedMap(map11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map13);

  }

  @Test
  public void test145() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test145"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet5);
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list9);
    java2.util2.List list13 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list16 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list16);
    java2.util2.List list18 = java2.util2.Collections.unmodifiableList(list16);
    int i19 = java2.util2.Collections.indexOfSubList(list13, list18);
    java2.util2.List list20 = java2.util2.Collections.synchronizedList(list18);
    int i21 = java2.util2.Collections.lastIndexOfSubList(list9, list18);
    java2.util2.Collection collection22 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list9);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet23 = treeSet5.tailSet((java.lang.Object)collection22);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection22);

  }

  @Test
  public void test146() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test146"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet((java2.util2.Collection)set12);
    java.lang.Object[] obj_array14 = treeSet13.toArray();
    java2.util2.List list17 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list20 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list20);
    java2.util2.List list22 = java2.util2.Collections.unmodifiableList(list20);
    java2.util2.Collections.copy(list17, list20);
    boolean b24 = treeSet13.addAll((java2.util2.Collection)list17);
    java.lang.Object obj25 = treeSet13.first();
    java2.util2.SortedSet sortedSet27 = treeSet13.tailSet((java.lang.Object)"");
    java2.util2.SortedSet sortedSet28 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet13);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet29 = treeSet5.tailSet((java.lang.Object)sortedSet28);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + 0+ "'", obj25.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet28);

  }

  @Test
  public void test147() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test147"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list9);
    java2.util2.List list11 = java2.util2.Collections.unmodifiableList(list9);
    int i12 = java2.util2.Collections.indexOfSubList(list6, list11);
    java2.util2.List list13 = java2.util2.Collections.synchronizedList(list11);
    int i14 = java2.util2.Collections.lastIndexOfSubList(list2, list11);
    java2.util2.Collections.reverse(list2);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list21);
    java2.util2.List list23 = java2.util2.Collections.unmodifiableList(list21);
    java2.util2.Collections.copy(list18, list21);
    java2.util2.Collections.rotate(list18, 0);
    java2.util2.Collections.copy(list2, list18);
    java2.util2.List list30 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list33 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list33);
    java2.util2.List list35 = java2.util2.Collections.unmodifiableList(list33);
    int i36 = java2.util2.Collections.indexOfSubList(list30, list35);
    java2.util2.Enumeration enumeration37 = java2.util2.Collections.enumeration((java2.util2.Collection)list30);
    java2.util2.ArrayList arrayList38 = java2.util2.Collections.list(enumeration37);
    java2.util2.ArrayList arrayList39 = java2.util2.Collections.list(enumeration37);
    java2.util2.List list40 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList39);
    int i41 = java2.util2.Collections.lastIndexOfSubList(list2, (java2.util2.List)arrayList39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);

  }

  @Test
  public void test148() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test148"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list19 = java2.util2.Collections.unmodifiableList(list18);
    java2.util2.Collections.fill(list8, (java.lang.Object)list19);
    java2.util2.TreeSet treeSet21 = new java2.util2.TreeSet();
    java.lang.String str22 = treeSet21.toString();
    java2.util2.List list23 = java2.util2.Collections.singletonList((java.lang.Object)str22);
    int i24 = java2.util2.Collections.lastIndexOfSubList(list19, list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet21.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "[]"+ "'", str22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == (-1));

  }

  @Test
  public void test149() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test149"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java.lang.Object[] obj_array9 = treeSet5.toArray();
    java2.util2.TreeSet treeSet10 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet5);
    java2.util2.List list13 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list16 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list16);
    java2.util2.List list18 = java2.util2.Collections.unmodifiableList(list16);
    java2.util2.Collections.copy(list13, list16);
    java2.util2.Collections.fill(list13, (java.lang.Object)0.0f);
    java2.util2.List list25 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set26 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet27 = new java2.util2.TreeSet((java2.util2.Collection)set26);
    java.lang.Object[] obj_array28 = treeSet27.toArray();
    java2.util2.List list31 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list34 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list34);
    java2.util2.List list36 = java2.util2.Collections.unmodifiableList(list34);
    java2.util2.Collections.copy(list31, list34);
    boolean b38 = treeSet27.addAll((java2.util2.Collection)list31);
    java.lang.Object obj39 = treeSet27.first();
    java2.util2.SortedSet sortedSet41 = treeSet27.tailSet((java.lang.Object)"");
    java2.util2.List list42 = java2.util2.Collections.nCopies(1, (java.lang.Object)treeSet27);
    java.lang.String str43 = treeSet27.toString();
    java2.util2.List list46 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list49 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list49);
    java2.util2.List list51 = java2.util2.Collections.unmodifiableList(list49);
    java2.util2.Collections.copy(list46, list49);
    java2.util2.Collections.rotate(list46, 0);
    java2.util2.List list57 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list60 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list60);
    java2.util2.List list62 = java2.util2.Collections.unmodifiableList(list60);
    int i63 = java2.util2.Collections.indexOfSubList(list57, list62);
    java2.util2.List list66 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list69 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list69);
    java2.util2.List list71 = java2.util2.Collections.unmodifiableList(list69);
    java2.util2.Collections.copy(list66, list69);
    java2.util2.Collections.copy(list62, list66);
    java2.util2.List list76 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list79 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list79);
    java2.util2.List list81 = java2.util2.Collections.unmodifiableList(list79);
    java2.util2.Collections.copy(list76, list79);
    int i83 = java2.util2.Collections.indexOfSubList(list66, list79);
    java2.util2.Comparator comparator84 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list79, comparator84);
    java2.util2.Collections.sort(list46, comparator84);
    int i87 = java2.util2.Collections.binarySearch(list13, (java.lang.Object)str43, comparator84);
    java.lang.Object obj88 = java2.util2.Collections.min((java2.util2.Collection)treeSet10, comparator84);
    java2.util2.TreeSet treeSet89 = new java2.util2.TreeSet(comparator84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet10.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet27.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet27.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj39 + "' != '" + 0+ "'", obj39.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "[0]"+ "'", str43.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj88 + "' != '" + 0+ "'", obj88.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet89.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet89.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet89.toString(), "[]");

  }

  @Test
  public void test150() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test150"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java.lang.Object[] obj_array9 = treeSet5.toArray();
    java2.util2.Set set10 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet5);
    java2.util2.Comparator comparator11 = treeSet5.comparator();
    java.lang.Object obj12 = treeSet5.last();
    int i13 = treeSet5.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 0+ "'", obj12.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);

  }

  @Test
  public void test151() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test151"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    treeSet4.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);

  }

  @Test
  public void test152() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test152"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet5);
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set10 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set11 = java2.util2.Collections.unmodifiableSet(set10);
    java2.util2.TreeSet treeSet12 = new java2.util2.TreeSet((java2.util2.Collection)set10);
    java.lang.Object[] obj_array14 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array15 = treeSet12.toArray(obj_array14);
    java.lang.Object[] obj_array16 = treeSet12.toArray();
    boolean b17 = treeSet5.removeAll((java2.util2.Collection)treeSet12);
    java2.util2.Comparator comparator18 = treeSet12.comparator();
    boolean b19 = treeSet12.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet12.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet12.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);

  }

  @Test
  public void test153() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test153"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list14);
    java2.util2.List list16 = java2.util2.Collections.unmodifiableList(list14);
    int i17 = java2.util2.Collections.indexOfSubList(list11, list16);
    java2.util2.List list20 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list23 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list23);
    java2.util2.List list25 = java2.util2.Collections.unmodifiableList(list23);
    java2.util2.Collections.copy(list20, list23);
    java2.util2.Collections.copy(list16, list20);
    java2.util2.List list30 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list33 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list33);
    java2.util2.List list35 = java2.util2.Collections.unmodifiableList(list33);
    java2.util2.Collections.copy(list30, list33);
    int i37 = java2.util2.Collections.indexOfSubList(list20, list33);
    boolean b38 = treeSet5.removeAll((java2.util2.Collection)list33);
    java2.util2.List list41 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set42 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set43 = java2.util2.Collections.unmodifiableSet(set42);
    java2.util2.TreeSet treeSet44 = new java2.util2.TreeSet((java2.util2.Collection)set42);
    java2.util2.SortedSet sortedSet46 = treeSet44.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj47 = java2.util2.Collections.max((java2.util2.Collection)treeSet44);
    java2.util2.List list50 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list53 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list53);
    java2.util2.List list55 = java2.util2.Collections.unmodifiableList(list53);
    int i56 = java2.util2.Collections.indexOfSubList(list50, list55);
    java2.util2.List list57 = java2.util2.Collections.synchronizedList(list55);
    boolean b58 = treeSet44.retainAll((java2.util2.Collection)list57);
    java2.util2.Collections.copy(list33, list57);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java.lang.Object obj60 = java2.util2.Collections.max((java2.util2.Collection)list33);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet44.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet44.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet44.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj47 + "' != '" + 0+ "'", obj47.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);

  }

  @Test
  public void test154() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test154"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    int i8 = java2.util2.Collections.indexOfSubList(list2, list7);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list14);
    java2.util2.List list16 = java2.util2.Collections.unmodifiableList(list14);
    java2.util2.Collections.copy(list11, list14);
    java2.util2.Collections.copy(list7, list11);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java.lang.Object obj19 = java2.util2.Collections.max((java2.util2.Collection)list11);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);

  }

  @Test
  public void test155() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test155"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.first();
    java2.util2.SortedSet sortedSet18 = treeSet4.tailSet((java.lang.Object)"");
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set22 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet23 = new java2.util2.TreeSet((java2.util2.Collection)set22);
    java.lang.Object[] obj_array24 = treeSet23.toArray();
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list30 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list30);
    java2.util2.List list32 = java2.util2.Collections.unmodifiableList(list30);
    java2.util2.Collections.copy(list27, list30);
    boolean b34 = treeSet23.addAll((java2.util2.Collection)list27);
    java.lang.Object obj35 = treeSet23.first();
    java2.util2.SortedSet sortedSet37 = treeSet23.tailSet((java.lang.Object)"");
    java2.util2.SortedSet sortedSet38 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet23);
    boolean b39 = treeSet4.addAll((java2.util2.Collection)treeSet23);
    java.lang.Object obj40 = treeSet23.first();
    java2.util2.Enumeration enumeration41 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 0+ "'", obj16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet23.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet23.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet23.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + 0+ "'", obj35.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj40 + "' != '" + 0+ "'", obj40.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration41);

  }

  @Test
  public void test156() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test156"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list6);
    java2.util2.List list8 = java2.util2.Collections.unmodifiableList(list6);
    int i9 = java2.util2.Collections.indexOfSubList(list3, list8);
    java2.util2.List list10 = java2.util2.Collections.nCopies(100, (java.lang.Object)list8);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java2.util2.Collections.shuffle(list10);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);

  }

  @Test
  public void test157() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test157"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java.lang.Object[] obj_array9 = treeSet5.toArray();
    java.lang.Object obj10 = treeSet5.first();
    java2.util2.List list13 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set14 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set15 = java2.util2.Collections.unmodifiableSet(set14);
    java2.util2.TreeSet treeSet16 = new java2.util2.TreeSet((java2.util2.Collection)set14);
    java2.util2.SortedSet sortedSet18 = treeSet16.tailSet((java.lang.Object)(short)0);
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set22 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet23 = new java2.util2.TreeSet((java2.util2.Collection)set22);
    java.lang.Object[] obj_array24 = treeSet23.toArray();
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list30 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list30);
    java2.util2.List list32 = java2.util2.Collections.unmodifiableList(list30);
    java2.util2.Collections.copy(list27, list30);
    boolean b34 = treeSet23.addAll((java2.util2.Collection)list27);
    java.lang.Object obj35 = treeSet23.first();
    java2.util2.SortedSet sortedSet37 = treeSet23.tailSet((java.lang.Object)"");
    java.lang.String str38 = treeSet23.toString();
    java2.util2.List list41 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set42 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet43 = new java2.util2.TreeSet((java2.util2.Collection)set42);
    java.lang.Object[] obj_array44 = treeSet43.toArray();
    java.lang.Object[] obj_array45 = treeSet23.toArray(obj_array44);
    java.lang.Object[] obj_array46 = treeSet16.toArray(obj_array44);
    java.lang.Object[] obj_array47 = treeSet5.toArray(obj_array44);
    java2.util2.List list50 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list53 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list53);
    java2.util2.List list55 = java2.util2.Collections.unmodifiableList(list53);
    java2.util2.Collections.copy(list50, list53);
    java2.util2.Collections.rotate(list50, 0);
    java2.util2.List list61 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list64 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list64);
    java2.util2.List list66 = java2.util2.Collections.unmodifiableList(list64);
    int i67 = java2.util2.Collections.indexOfSubList(list61, list66);
    java2.util2.List list70 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list73 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list73);
    java2.util2.List list75 = java2.util2.Collections.unmodifiableList(list73);
    java2.util2.Collections.copy(list70, list73);
    java2.util2.Collections.copy(list66, list70);
    java2.util2.List list80 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list83 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list83);
    java2.util2.List list85 = java2.util2.Collections.unmodifiableList(list83);
    java2.util2.Collections.copy(list80, list83);
    int i87 = java2.util2.Collections.indexOfSubList(list70, list83);
    java2.util2.Comparator comparator88 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list83, comparator88);
    java2.util2.Collections.sort(list50, comparator88);
    java.lang.Object obj91 = java2.util2.Collections.min((java2.util2.Collection)treeSet5, comparator88);
    java2.util2.TreeSet treeSet92 = new java2.util2.TreeSet(comparator88);
    java2.util2.TreeSet treeSet93 = new java2.util2.TreeSet(comparator88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 0+ "'", obj10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet16.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet16.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet23.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet23.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet23.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + 0+ "'", obj35.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "[0]"+ "'", str38.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet43.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet43.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet43.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj91 + "' != '" + 0+ "'", obj91.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet92.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet92.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet92.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet93.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet93.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet93.toString(), "[]");

  }

  @Test
  public void test158() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test158"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet7 = treeSet5.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj8 = java2.util2.Collections.max((java2.util2.Collection)treeSet5);
    java2.util2.Set set9 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet5);
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list15 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list15);
    java2.util2.List list17 = java2.util2.Collections.unmodifiableList(list15);
    int i18 = java2.util2.Collections.indexOfSubList(list12, list17);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      boolean b19 = treeSet5.add((java.lang.Object)list17);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 0+ "'", obj8.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);

  }

  @Test
  public void test159() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test159"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet7 = treeSet5.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj8 = java2.util2.Collections.max((java2.util2.Collection)treeSet5);
    java2.util2.Set set9 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet5);
    java2.util2.Set set10 = java2.util2.Collections.synchronizedSet(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 0+ "'", obj8.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);

  }

  @Test
  public void test160() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test160"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java.lang.Object[] obj_array9 = treeSet5.toArray();
    java2.util2.Set set10 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet5);
    java2.util2.Comparator comparator11 = treeSet5.comparator();
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list14);
    int i17 = java2.util2.Collections.binarySearch(list14, (java.lang.Object)(short)100);
    java2.util2.List list20 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list23 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list23);
    java2.util2.List list25 = java2.util2.Collections.unmodifiableList(list23);
    java2.util2.Collections.copy(list20, list23);
    java2.util2.Collections.rotate(list20, 0);
    java2.util2.List list31 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list34 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list34);
    java2.util2.List list36 = java2.util2.Collections.unmodifiableList(list34);
    int i37 = java2.util2.Collections.indexOfSubList(list31, list36);
    java2.util2.List list40 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list43 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list43);
    java2.util2.List list45 = java2.util2.Collections.unmodifiableList(list43);
    java2.util2.Collections.copy(list40, list43);
    java2.util2.Collections.copy(list36, list40);
    java2.util2.List list50 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list53 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list53);
    java2.util2.List list55 = java2.util2.Collections.unmodifiableList(list53);
    java2.util2.Collections.copy(list50, list53);
    int i57 = java2.util2.Collections.indexOfSubList(list40, list53);
    java2.util2.Comparator comparator58 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list53, comparator58);
    java2.util2.Collections.sort(list20, comparator58);
    java2.util2.Map map61 = java2.util2.Collections.singletonMap((java.lang.Object)list14, (java.lang.Object)list20);
    boolean b62 = treeSet5.retainAll((java2.util2.Collection)list14);
    java2.util2.Iterator iterator63 = treeSet5.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator63);

  }

  @Test
  public void test161() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test161"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.Set set6 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet5);
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set10 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet11 = new java2.util2.TreeSet((java2.util2.Collection)set10);
    java.lang.Object[] obj_array12 = treeSet11.toArray();
    java2.util2.List list15 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list18);
    java2.util2.List list20 = java2.util2.Collections.unmodifiableList(list18);
    java2.util2.Collections.copy(list15, list18);
    boolean b22 = treeSet11.addAll((java2.util2.Collection)list15);
    java.lang.Object obj23 = treeSet11.first();
    treeSet11.clear();
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list30 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list30);
    java2.util2.List list32 = java2.util2.Collections.unmodifiableList(list30);
    java2.util2.Collections.copy(list27, list30);
    int i35 = java2.util2.Collections.binarySearch(list30, (java.lang.Object)10.0f);
    java2.util2.List list36 = java2.util2.Collections.singletonList((java.lang.Object)10.0f);
    java2.util2.List list37 = java2.util2.Collections.unmodifiableList(list36);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet38 = treeSet5.subSet((java.lang.Object)treeSet11, (java.lang.Object)list36);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet11.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet11.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet11.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 0+ "'", obj23.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);

  }

  @Test
  public void test162() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test162"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.List list7 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set8 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.Collection)set8);
    java.lang.Object[] obj_array10 = treeSet9.toArray();
    java2.util2.List list13 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list16 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list16);
    java2.util2.List list18 = java2.util2.Collections.unmodifiableList(list16);
    java2.util2.Collections.copy(list13, list16);
    boolean b20 = treeSet9.addAll((java2.util2.Collection)list13);
    java2.util2.List list23 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list23);
    java2.util2.Collections.fill(list13, (java.lang.Object)list24);
    java2.util2.List list28 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list28);
    java2.util2.List list32 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.fill(list28, (java.lang.Object)(-1.0d));
    java2.util2.Collections.copy(list24, list28);
    java2.util2.List list37 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list40 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list40);
    java2.util2.List list42 = java2.util2.Collections.unmodifiableList(list40);
    int i43 = java2.util2.Collections.indexOfSubList(list37, list42);
    java2.util2.List list44 = java2.util2.Collections.synchronizedList(list42);
    int i45 = java2.util2.Collections.lastIndexOfSubList(list24, list44);
    java2.util2.SortedSet sortedSet46 = treeSet4.headSet((java.lang.Object)i45);
    int i47 = treeSet4.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 1);

  }

  @Test
  public void test163() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test163"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    java2.util2.Collections.copy(list2, list5);
    java2.util2.Collections.fill(list2, (java.lang.Object)0.0f);
    java2.util2.List list13 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set14 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet15 = new java2.util2.TreeSet((java2.util2.Collection)set14);
    java.lang.Object[] obj_array16 = treeSet15.toArray();
    java2.util2.List list19 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list22 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list22);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list22);
    java2.util2.Collections.copy(list19, list22);
    boolean b26 = treeSet15.addAll((java2.util2.Collection)list19);
    java2.util2.List list29 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list30 = java2.util2.Collections.unmodifiableList(list29);
    java2.util2.Collections.fill(list19, (java.lang.Object)list30);
    java2.util2.Collection collection32 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list19);
    java2.util2.List list33 = java2.util2.Collections.unmodifiableList(list19);
    java2.util2.List list36 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list37 = java2.util2.Collections.unmodifiableList(list36);
    java2.util2.List list40 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set41 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set42 = java2.util2.Collections.unmodifiableSet(set41);
    java2.util2.TreeSet treeSet43 = new java2.util2.TreeSet((java2.util2.Collection)set41);
    java2.util2.SortedSet sortedSet45 = treeSet43.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj46 = java2.util2.Collections.max((java2.util2.Collection)treeSet43);
    java2.util2.List list49 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list52 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list52);
    java2.util2.List list54 = java2.util2.Collections.unmodifiableList(list52);
    int i55 = java2.util2.Collections.indexOfSubList(list49, list54);
    java2.util2.List list56 = java2.util2.Collections.synchronizedList(list54);
    boolean b57 = treeSet43.retainAll((java2.util2.Collection)list56);
    int i58 = java2.util2.Collections.lastIndexOfSubList(list37, list56);
    java2.util2.Collections.reverse(list56);
    java2.util2.Collections.copy(list19, list56);
    java2.util2.List list63 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list66 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list66);
    java2.util2.List list68 = java2.util2.Collections.unmodifiableList(list66);
    int i69 = java2.util2.Collections.indexOfSubList(list63, list68);
    java2.util2.List list72 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list75 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list75);
    java2.util2.List list77 = java2.util2.Collections.unmodifiableList(list75);
    java2.util2.Collections.copy(list72, list75);
    java2.util2.Collections.copy(list68, list72);
    java2.util2.Collection collection80 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list72);
    java2.util2.List list83 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list86 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list86);
    java2.util2.List list88 = java2.util2.Collections.unmodifiableList(list86);
    java2.util2.Collections.copy(list83, list86);
    java2.util2.Collections.sort(list83);
    boolean b91 = java2.util2.Collections.replaceAll(list19, (java.lang.Object)list72, (java.lang.Object)list83);
    java2.util2.Collections.copy(list2, list72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet15.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet15.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet43.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet43.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet43.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj46 + "' != '" + 0+ "'", obj46.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);

  }

  @Test
  public void test164() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test164"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    boolean b14 = treeSet5.addAll((java2.util2.Collection)list13);
    java2.util2.List list17 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set18 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set19 = java2.util2.Collections.unmodifiableSet(set18);
    java2.util2.TreeSet treeSet20 = new java2.util2.TreeSet((java2.util2.Collection)set18);
    java.lang.Object[] obj_array22 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array23 = treeSet20.toArray(obj_array22);
    java.lang.Object[] obj_array24 = treeSet20.toArray();
    java2.util2.List list28 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list31 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list31);
    java2.util2.List list33 = java2.util2.Collections.unmodifiableList(list31);
    int i34 = java2.util2.Collections.indexOfSubList(list28, list33);
    java2.util2.Map map35 = java2.util2.Collections.singletonMap((java.lang.Object)0L, (java.lang.Object)list33);
    java2.util2.Map map36 = java2.util2.Collections.synchronizedMap(map35);
    boolean b37 = java2.util2.Collections.replaceAll(list13, (java.lang.Object)treeSet20, (java.lang.Object)map35);
    java2.util2.List list40 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set41 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet42 = new java2.util2.TreeSet((java2.util2.Collection)set41);
    java.lang.Object[] obj_array43 = treeSet42.toArray();
    java2.util2.List list46 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list49 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list49);
    java2.util2.List list51 = java2.util2.Collections.unmodifiableList(list49);
    java2.util2.Collections.copy(list46, list49);
    boolean b53 = treeSet42.addAll((java2.util2.Collection)list46);
    java.lang.Object obj54 = treeSet42.first();
    java2.util2.SortedSet sortedSet56 = treeSet42.tailSet((java.lang.Object)"");
    java.lang.String str57 = treeSet42.toString();
    java2.util2.List list60 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set61 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet62 = new java2.util2.TreeSet((java2.util2.Collection)set61);
    java.lang.Object[] obj_array63 = treeSet62.toArray();
    java.lang.Object[] obj_array64 = treeSet42.toArray(obj_array63);
    java.lang.Object[] obj_array65 = treeSet20.toArray(obj_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet20.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet20.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet20.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet42.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet42.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet42.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj54 + "' != '" + 0+ "'", obj54.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "[0]"+ "'", str57.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet62.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet62.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet62.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array65);

  }

  @Test
  public void test165() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test165"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)1);
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list6 = java2.util2.Collections.unmodifiableList(list5);
    int i7 = java2.util2.Collections.lastIndexOfSubList(list2, list5);
    java2.util2.Collections.rotate(list5, 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);

  }

  @Test
  public void test166() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test166"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java.lang.Object[] obj_array9 = treeSet5.toArray();
    java.lang.Object obj10 = treeSet5.first();
    java2.util2.List list13 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set14 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set15 = java2.util2.Collections.unmodifiableSet(set14);
    java2.util2.TreeSet treeSet16 = new java2.util2.TreeSet((java2.util2.Collection)set14);
    java2.util2.SortedSet sortedSet18 = treeSet16.tailSet((java.lang.Object)(short)0);
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set22 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet23 = new java2.util2.TreeSet((java2.util2.Collection)set22);
    java.lang.Object[] obj_array24 = treeSet23.toArray();
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list30 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list30);
    java2.util2.List list32 = java2.util2.Collections.unmodifiableList(list30);
    java2.util2.Collections.copy(list27, list30);
    boolean b34 = treeSet23.addAll((java2.util2.Collection)list27);
    java.lang.Object obj35 = treeSet23.first();
    java2.util2.SortedSet sortedSet37 = treeSet23.tailSet((java.lang.Object)"");
    java.lang.String str38 = treeSet23.toString();
    java2.util2.List list41 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set42 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet43 = new java2.util2.TreeSet((java2.util2.Collection)set42);
    java.lang.Object[] obj_array44 = treeSet43.toArray();
    java.lang.Object[] obj_array45 = treeSet23.toArray(obj_array44);
    java.lang.Object[] obj_array46 = treeSet16.toArray(obj_array44);
    java.lang.Object[] obj_array47 = treeSet5.toArray(obj_array44);
    java2.util2.TreeSet treeSet48 = new java2.util2.TreeSet();
    java.lang.String str49 = treeSet48.toString();
    boolean b50 = treeSet5.containsAll((java2.util2.Collection)treeSet48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 0+ "'", obj10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet16.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet16.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet23.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet23.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet23.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + 0+ "'", obj35.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "[0]"+ "'", str38.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet43.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet43.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet43.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet48.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet48.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet48.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "[]"+ "'", str49.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);

  }

  @Test
  public void test167() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test167"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list6);
    java2.util2.List list8 = java2.util2.Collections.unmodifiableList(list6);
    int i9 = java2.util2.Collections.indexOfSubList(list3, list8);
    java2.util2.List list10 = java2.util2.Collections.nCopies(100, (java.lang.Object)list8);
    java2.util2.List list13 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list16 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list16);
    java2.util2.List list18 = java2.util2.Collections.unmodifiableList(list16);
    int i19 = java2.util2.Collections.indexOfSubList(list13, list18);
    java2.util2.List list22 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list25 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list25);
    java2.util2.List list27 = java2.util2.Collections.unmodifiableList(list25);
    int i28 = java2.util2.Collections.indexOfSubList(list22, list27);
    java2.util2.List list31 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list34 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list34);
    java2.util2.List list36 = java2.util2.Collections.unmodifiableList(list34);
    java2.util2.Collections.copy(list31, list34);
    java2.util2.Collections.copy(list27, list31);
    java2.util2.List list41 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list44 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list44);
    java2.util2.List list46 = java2.util2.Collections.unmodifiableList(list44);
    java2.util2.Collections.copy(list41, list44);
    int i48 = java2.util2.Collections.indexOfSubList(list31, list44);
    java2.util2.List list51 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list54 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list54);
    java2.util2.List list56 = java2.util2.Collections.unmodifiableList(list54);
    int i57 = java2.util2.Collections.indexOfSubList(list51, list56);
    java2.util2.List list60 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list63 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list63);
    java2.util2.List list65 = java2.util2.Collections.unmodifiableList(list63);
    java2.util2.Collections.copy(list60, list63);
    java2.util2.Collections.copy(list56, list60);
    java2.util2.List list70 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list73 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list73);
    java2.util2.List list75 = java2.util2.Collections.unmodifiableList(list73);
    java2.util2.Collections.copy(list70, list73);
    int i77 = java2.util2.Collections.indexOfSubList(list60, list73);
    boolean b78 = java2.util2.Collections.replaceAll(list18, (java.lang.Object)list31, (java.lang.Object)list60);
    java2.util2.Collections.fill(list8, (java.lang.Object)list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);

  }

  @Test
  public void test168() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test168"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.first();
    java2.util2.SortedSet sortedSet18 = treeSet4.tailSet((java.lang.Object)"");
    java.lang.String str19 = treeSet4.toString();
    java2.util2.List list22 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set23 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet24 = new java2.util2.TreeSet((java2.util2.Collection)set23);
    java.lang.Object[] obj_array25 = treeSet24.toArray();
    java.lang.Object[] obj_array26 = treeSet4.toArray(obj_array25);
    java2.util2.List list29 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set30 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet31 = new java2.util2.TreeSet((java2.util2.Collection)set30);
    java.lang.Object[] obj_array32 = treeSet31.toArray();
    java2.util2.List list35 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list38 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list38);
    java2.util2.List list40 = java2.util2.Collections.unmodifiableList(list38);
    java2.util2.Collections.copy(list35, list38);
    boolean b42 = treeSet31.addAll((java2.util2.Collection)list35);
    java.lang.Object obj43 = treeSet31.first();
    java2.util2.SortedSet sortedSet45 = treeSet31.tailSet((java.lang.Object)"");
    java2.util2.SortedSet sortedSet46 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet31);
    boolean b47 = treeSet4.equals((java.lang.Object)treeSet31);
    java2.util2.TreeSet treeSet48 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet31);
    java2.util2.SortedSet sortedSet49 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet48);
    java2.util2.List list52 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set53 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set54 = java2.util2.Collections.unmodifiableSet(set53);
    java2.util2.TreeSet treeSet55 = new java2.util2.TreeSet((java2.util2.Collection)set53);
    java2.util2.SortedSet sortedSet56 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet55);
    java2.util2.Set set57 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet55);
    java2.util2.Set set58 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet55);
    java2.util2.List list61 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set62 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set63 = java2.util2.Collections.unmodifiableSet(set62);
    java2.util2.TreeSet treeSet64 = new java2.util2.TreeSet((java2.util2.Collection)set62);
    java.lang.Object[] obj_array66 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array67 = treeSet64.toArray(obj_array66);
    java.lang.Object[] obj_array68 = treeSet64.toArray();
    java2.util2.Set set69 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet64);
    java2.util2.Collection collection70 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet64);
    boolean b71 = treeSet55.equals((java.lang.Object)treeSet64);
    java2.util2.SortedSet sortedSet72 = treeSet48.tailSet((java.lang.Object)b71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 0+ "'", obj16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[0]"+ "'", str19.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet24.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet24.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet24.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet31.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet31.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet31.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj43 + "' != '" + 0+ "'", obj43.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet48.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet48.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet48.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet55.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet55.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet55.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet64.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet64.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet64.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet72);

  }

  @Test
  public void test169() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test169"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.Comparator comparator16 = treeSet4.comparator();
    java.lang.Object obj17 = treeSet4.first();
    java2.util2.List list20 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list23 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list23);
    java2.util2.List list25 = java2.util2.Collections.unmodifiableList(list23);
    int i26 = java2.util2.Collections.indexOfSubList(list20, list25);
    java2.util2.List list29 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list32 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list32);
    java2.util2.List list34 = java2.util2.Collections.unmodifiableList(list32);
    java2.util2.Collections.copy(list29, list32);
    java2.util2.Collections.copy(list25, list29);
    java2.util2.List list39 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list42 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list42);
    java2.util2.List list44 = java2.util2.Collections.unmodifiableList(list42);
    java2.util2.Collections.copy(list39, list42);
    int i46 = java2.util2.Collections.indexOfSubList(list29, list42);
    java2.util2.Comparator comparator47 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list42, comparator47);
    java.lang.Object obj49 = java2.util2.Collections.min((java2.util2.Collection)treeSet4, comparator47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + 0+ "'", obj17.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj49 + "' != '" + 0+ "'", obj49.equals(0));

  }

  @Test
  public void test170() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test170"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list6);
    java2.util2.List list8 = java2.util2.Collections.unmodifiableList(list6);
    int i9 = java2.util2.Collections.indexOfSubList(list3, list8);
    java2.util2.Map map10 = java2.util2.Collections.singletonMap((java.lang.Object)0L, (java.lang.Object)list8);
    java2.util2.Map map11 = java2.util2.Collections.synchronizedMap(map10);
    java2.util2.Map map12 = java2.util2.Collections.unmodifiableMap(map10);
    java2.util2.Map map13 = java2.util2.Collections.synchronizedMap(map10);
    java2.util2.Map map14 = java2.util2.Collections.synchronizedMap(map13);
    java2.util2.Map map15 = java2.util2.Collections.synchronizedMap(map14);
    java2.util2.Map map16 = java2.util2.Collections.synchronizedMap(map15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map16);

  }

  @Test
  public void test171() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test171"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    int i8 = java2.util2.Collections.indexOfSubList(list2, list7);
    java2.util2.Enumeration enumeration9 = java2.util2.Collections.enumeration((java2.util2.Collection)list2);
    java2.util2.ArrayList arrayList10 = java2.util2.Collections.list(enumeration9);
    java2.util2.ArrayList arrayList11 = java2.util2.Collections.list(enumeration9);
    java2.util2.List list12 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList11);
    java2.util2.List list15 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list15);
    int i18 = java2.util2.Collections.binarySearch(list15, (java.lang.Object)(short)100);
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list24 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list24);
    java2.util2.List list26 = java2.util2.Collections.unmodifiableList(list24);
    java2.util2.Collections.copy(list21, list24);
    java2.util2.Collections.rotate(list21, 0);
    java2.util2.List list32 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list35 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list35);
    java2.util2.List list37 = java2.util2.Collections.unmodifiableList(list35);
    int i38 = java2.util2.Collections.indexOfSubList(list32, list37);
    java2.util2.List list41 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list44 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list44);
    java2.util2.List list46 = java2.util2.Collections.unmodifiableList(list44);
    java2.util2.Collections.copy(list41, list44);
    java2.util2.Collections.copy(list37, list41);
    java2.util2.List list51 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list54 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list54);
    java2.util2.List list56 = java2.util2.Collections.unmodifiableList(list54);
    java2.util2.Collections.copy(list51, list54);
    int i58 = java2.util2.Collections.indexOfSubList(list41, list54);
    java2.util2.Comparator comparator59 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list54, comparator59);
    java2.util2.Collections.sort(list21, comparator59);
    java2.util2.Map map62 = java2.util2.Collections.singletonMap((java.lang.Object)list15, (java.lang.Object)list21);
    java2.util2.Collections.fill((java2.util2.List)arrayList11, (java.lang.Object)map62);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java2.util2.Collections.swap((java2.util2.List)arrayList11, 1, 0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map62);

  }

  @Test
  public void test172() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test172"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set4 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set5 = java2.util2.Collections.unmodifiableSet(set4);
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet((java2.util2.Collection)set4);
    java2.util2.SortedSet sortedSet8 = treeSet6.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj9 = java2.util2.Collections.max((java2.util2.Collection)treeSet6);
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set13 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet14 = new java2.util2.TreeSet((java2.util2.Collection)set13);
    java.lang.Object[] obj_array15 = treeSet14.toArray();
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list21);
    java2.util2.List list23 = java2.util2.Collections.unmodifiableList(list21);
    java2.util2.Collections.copy(list18, list21);
    boolean b25 = treeSet14.addAll((java2.util2.Collection)list18);
    java2.util2.List list28 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list29 = java2.util2.Collections.unmodifiableList(list28);
    java2.util2.Collections.fill(list18, (java.lang.Object)list29);
    boolean b31 = treeSet6.removeAll((java2.util2.Collection)list18);
    java2.util2.List list32 = java2.util2.Collections.nCopies(1, (java.lang.Object)list18);
    java2.util2.Set set34 = java2.util2.Collections.singleton((java.lang.Object)(-1.0d));
    java2.util2.List list37 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set38 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set39 = java2.util2.Collections.unmodifiableSet(set38);
    java2.util2.TreeSet treeSet40 = new java2.util2.TreeSet((java2.util2.Collection)set38);
    java.lang.Object[] obj_array42 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array43 = treeSet40.toArray(obj_array42);
    boolean b44 = java2.util2.Collections.replaceAll(list18, (java.lang.Object)set34, (java.lang.Object)treeSet40);
    java2.util2.SortedSet sortedSet45 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 0+ "'", obj9.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet14.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet40.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet40.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet40.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet45);

  }

  @Test
  public void test173() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test173"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    java2.util2.Collections.copy(list2, list5);
    java2.util2.Collections.fill(list2, (java.lang.Object)0.0f);
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set15 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet16 = new java2.util2.TreeSet((java2.util2.Collection)set15);
    java.lang.Object[] obj_array17 = treeSet16.toArray();
    java2.util2.List list20 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list23 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list23);
    java2.util2.List list25 = java2.util2.Collections.unmodifiableList(list23);
    java2.util2.Collections.copy(list20, list23);
    boolean b27 = treeSet16.addAll((java2.util2.Collection)list20);
    java.lang.Object obj28 = treeSet16.first();
    java2.util2.SortedSet sortedSet30 = treeSet16.tailSet((java.lang.Object)"");
    java2.util2.List list31 = java2.util2.Collections.nCopies(1, (java.lang.Object)treeSet16);
    java.lang.String str32 = treeSet16.toString();
    java2.util2.List list35 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list38 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list38);
    java2.util2.List list40 = java2.util2.Collections.unmodifiableList(list38);
    java2.util2.Collections.copy(list35, list38);
    java2.util2.Collections.rotate(list35, 0);
    java2.util2.List list46 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list49 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list49);
    java2.util2.List list51 = java2.util2.Collections.unmodifiableList(list49);
    int i52 = java2.util2.Collections.indexOfSubList(list46, list51);
    java2.util2.List list55 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list58 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list58);
    java2.util2.List list60 = java2.util2.Collections.unmodifiableList(list58);
    java2.util2.Collections.copy(list55, list58);
    java2.util2.Collections.copy(list51, list55);
    java2.util2.List list65 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list68 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list68);
    java2.util2.List list70 = java2.util2.Collections.unmodifiableList(list68);
    java2.util2.Collections.copy(list65, list68);
    int i72 = java2.util2.Collections.indexOfSubList(list55, list68);
    java2.util2.Comparator comparator73 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list68, comparator73);
    java2.util2.Collections.sort(list35, comparator73);
    int i76 = java2.util2.Collections.binarySearch(list2, (java.lang.Object)str32, comparator73);
    java2.util2.TreeSet treeSet77 = new java2.util2.TreeSet(comparator73);
    java2.util2.SortedSet sortedSet78 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet77);
    java.lang.Object obj79 = treeSet77.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet16.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet16.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + 0+ "'", obj28.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "[0]"+ "'", str32.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet77.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet77.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet77.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj79);

  }

  @Test
  public void test174() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test174"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set4 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set4);
    java.lang.Object[] obj_array6 = treeSet5.toArray();
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list12);
    java2.util2.List list14 = java2.util2.Collections.unmodifiableList(list12);
    java2.util2.Collections.copy(list9, list12);
    boolean b16 = treeSet5.addAll((java2.util2.Collection)list9);
    java2.util2.List list19 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list20 = java2.util2.Collections.unmodifiableList(list19);
    java2.util2.Collections.fill(list9, (java.lang.Object)list20);
    java2.util2.List list24 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list24);
    java2.util2.List list28 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.fill(list24, (java.lang.Object)(-1.0d));
    java2.util2.Collections.copy(list20, list24);
    java2.util2.List list31 = java2.util2.Collections.nCopies(1, (java.lang.Object)list24);
    java2.util2.Collections.reverse(list31);
    java2.util2.Collections.rotate(list31, (-1));
    java2.util2.Comparator comparator35 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java2.util2.Collections.sort(list31, comparator35);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator35);

  }

  @Test
  public void test175() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test175"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.first();
    java2.util2.SortedSet sortedSet18 = treeSet4.tailSet((java.lang.Object)"");
    java.lang.String str19 = treeSet4.toString();
    java2.util2.List list22 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set23 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet24 = new java2.util2.TreeSet((java2.util2.Collection)set23);
    java.lang.Object[] obj_array25 = treeSet24.toArray();
    java.lang.Object[] obj_array26 = treeSet4.toArray(obj_array25);
    java2.util2.Comparator comparator27 = treeSet4.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 0+ "'", obj16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[0]"+ "'", str19.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet24.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet24.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet24.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator27);

  }

  @Test
  public void test176() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test176"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list3 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list9);
    java2.util2.List list11 = java2.util2.Collections.unmodifiableList(list9);
    java2.util2.Collections.copy(list6, list9);
    java2.util2.Collections.rotate(list6, 0);
    java2.util2.List list17 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set18 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet19 = new java2.util2.TreeSet((java2.util2.Collection)set18);
    java.lang.Object[] obj_array20 = treeSet19.toArray();
    java2.util2.List list23 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list26 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list26);
    java2.util2.List list28 = java2.util2.Collections.unmodifiableList(list26);
    java2.util2.Collections.copy(list23, list26);
    boolean b30 = treeSet19.addAll((java2.util2.Collection)list23);
    java2.util2.List list33 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list34 = java2.util2.Collections.unmodifiableList(list33);
    java2.util2.Collections.fill(list23, (java.lang.Object)list34);
    java2.util2.Collection collection36 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list23);
    int i37 = java2.util2.Collections.lastIndexOfSubList(list6, list23);
    int i38 = java2.util2.Collections.indexOfSubList(list2, list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet19.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet19.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);

  }

  @Test
  public void test177() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test177"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet7 = treeSet5.headSet((java.lang.Object)(short)(-1));
    java2.util2.Collection collection8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)sortedSet7);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.Collection)sortedSet7);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);

  }

  @Test
  public void test178() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test178"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java.lang.Object[] obj_array9 = treeSet5.toArray();
    java2.util2.TreeSet treeSet10 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet5);
    java.lang.String str11 = treeSet5.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet10.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[0]"+ "'", str11.equals("[0]"));

  }

  @Test
  public void test179() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test179"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list6);
    java2.util2.List list8 = java2.util2.Collections.unmodifiableList(list6);
    int i9 = java2.util2.Collections.indexOfSubList(list3, list8);
    java2.util2.Map map10 = java2.util2.Collections.singletonMap((java.lang.Object)0L, (java.lang.Object)list8);
    java2.util2.Map map11 = java2.util2.Collections.synchronizedMap(map10);
    java2.util2.Map map12 = java2.util2.Collections.unmodifiableMap(map10);
    java2.util2.Map map13 = java2.util2.Collections.synchronizedMap(map10);
    java2.util2.Map map14 = java2.util2.Collections.synchronizedMap(map10);
    java2.util2.Map map15 = java2.util2.Collections.synchronizedMap(map10);
    java2.util2.Map map16 = java2.util2.Collections.unmodifiableMap(map10);
    java2.util2.Map map17 = java2.util2.Collections.synchronizedMap(map10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map17);

  }

  @Test
  public void test180() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test180"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list6 = java2.util2.Collections.unmodifiableList(list5);
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set10 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set11 = java2.util2.Collections.unmodifiableSet(set10);
    java2.util2.TreeSet treeSet12 = new java2.util2.TreeSet((java2.util2.Collection)set10);
    java2.util2.SortedSet sortedSet14 = treeSet12.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj15 = java2.util2.Collections.max((java2.util2.Collection)treeSet12);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list21);
    java2.util2.List list23 = java2.util2.Collections.unmodifiableList(list21);
    int i24 = java2.util2.Collections.indexOfSubList(list18, list23);
    java2.util2.List list25 = java2.util2.Collections.synchronizedList(list23);
    boolean b26 = treeSet12.retainAll((java2.util2.Collection)list25);
    int i27 = java2.util2.Collections.lastIndexOfSubList(list6, list25);
    java2.util2.Collection collection28 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list25);
    java2.util2.Collections.copy(list2, list25);
    java2.util2.List list30 = java2.util2.Collections.synchronizedList(list2);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java2.util2.Collections.swap(list2, 0, (-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet12.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + 0+ "'", obj15.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);

  }

  @Test
  public void test181() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test181"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    int i8 = java2.util2.Collections.indexOfSubList(list2, list7);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list14);
    java2.util2.List list16 = java2.util2.Collections.unmodifiableList(list14);
    int i17 = java2.util2.Collections.indexOfSubList(list11, list16);
    java2.util2.List list20 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list23 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list23);
    java2.util2.List list25 = java2.util2.Collections.unmodifiableList(list23);
    java2.util2.Collections.copy(list20, list23);
    java2.util2.Collections.copy(list16, list20);
    java2.util2.List list30 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list33 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list33);
    java2.util2.List list35 = java2.util2.Collections.unmodifiableList(list33);
    java2.util2.Collections.copy(list30, list33);
    int i37 = java2.util2.Collections.indexOfSubList(list20, list33);
    java2.util2.List list40 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list43 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list43);
    java2.util2.List list45 = java2.util2.Collections.unmodifiableList(list43);
    int i46 = java2.util2.Collections.indexOfSubList(list40, list45);
    java2.util2.List list49 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list52 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list52);
    java2.util2.List list54 = java2.util2.Collections.unmodifiableList(list52);
    java2.util2.Collections.copy(list49, list52);
    java2.util2.Collections.copy(list45, list49);
    java2.util2.List list59 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list62 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list62);
    java2.util2.List list64 = java2.util2.Collections.unmodifiableList(list62);
    java2.util2.Collections.copy(list59, list62);
    int i66 = java2.util2.Collections.indexOfSubList(list49, list62);
    boolean b67 = java2.util2.Collections.replaceAll(list7, (java.lang.Object)list20, (java.lang.Object)list49);
    java2.util2.Collection collection68 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list20);
    java2.util2.List list71 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set72 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet73 = new java2.util2.TreeSet((java2.util2.Collection)set72);
    java.lang.Object[] obj_array74 = treeSet73.toArray();
    java2.util2.List list77 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list80 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list80);
    java2.util2.List list82 = java2.util2.Collections.unmodifiableList(list80);
    java2.util2.Collections.copy(list77, list80);
    boolean b84 = treeSet73.addAll((java2.util2.Collection)list77);
    java2.util2.List list87 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list88 = java2.util2.Collections.unmodifiableList(list87);
    java2.util2.Collections.fill(list77, (java.lang.Object)list88);
    java2.util2.List list90 = java2.util2.Collections.unmodifiableList(list88);
    java2.util2.Collections.copy(list20, list90);
    java2.util2.Comparator comparator92 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list20, comparator92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet73.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet73.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet73.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator92);

  }

  @Test
  public void test182() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test182"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java.lang.Object[] obj_array9 = treeSet5.toArray();
    java.lang.Object obj10 = treeSet5.first();
    java2.util2.List list13 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set14 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set15 = java2.util2.Collections.unmodifiableSet(set14);
    java2.util2.TreeSet treeSet16 = new java2.util2.TreeSet((java2.util2.Collection)set14);
    java2.util2.SortedSet sortedSet18 = treeSet16.tailSet((java.lang.Object)(short)0);
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set22 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet23 = new java2.util2.TreeSet((java2.util2.Collection)set22);
    java.lang.Object[] obj_array24 = treeSet23.toArray();
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list30 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list30);
    java2.util2.List list32 = java2.util2.Collections.unmodifiableList(list30);
    java2.util2.Collections.copy(list27, list30);
    boolean b34 = treeSet23.addAll((java2.util2.Collection)list27);
    java.lang.Object obj35 = treeSet23.first();
    java2.util2.SortedSet sortedSet37 = treeSet23.tailSet((java.lang.Object)"");
    java.lang.String str38 = treeSet23.toString();
    java2.util2.List list41 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set42 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet43 = new java2.util2.TreeSet((java2.util2.Collection)set42);
    java.lang.Object[] obj_array44 = treeSet43.toArray();
    java.lang.Object[] obj_array45 = treeSet23.toArray(obj_array44);
    java.lang.Object[] obj_array46 = treeSet16.toArray(obj_array44);
    java.lang.Object[] obj_array47 = treeSet5.toArray(obj_array44);
    java2.util2.List list50 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list53 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list53);
    java2.util2.List list55 = java2.util2.Collections.unmodifiableList(list53);
    java2.util2.Collections.copy(list50, list53);
    java2.util2.Collections.rotate(list50, 0);
    java2.util2.List list61 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list64 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list64);
    java2.util2.List list66 = java2.util2.Collections.unmodifiableList(list64);
    int i67 = java2.util2.Collections.indexOfSubList(list61, list66);
    java2.util2.List list70 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list73 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list73);
    java2.util2.List list75 = java2.util2.Collections.unmodifiableList(list73);
    java2.util2.Collections.copy(list70, list73);
    java2.util2.Collections.copy(list66, list70);
    java2.util2.List list80 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list83 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list83);
    java2.util2.List list85 = java2.util2.Collections.unmodifiableList(list83);
    java2.util2.Collections.copy(list80, list83);
    int i87 = java2.util2.Collections.indexOfSubList(list70, list83);
    java2.util2.Comparator comparator88 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list83, comparator88);
    java2.util2.Collections.sort(list50, comparator88);
    java.lang.Object obj91 = java2.util2.Collections.min((java2.util2.Collection)treeSet5, comparator88);
    java2.util2.TreeSet treeSet92 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet5);
    java2.util2.Collection collection93 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 0+ "'", obj10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet16.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet16.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet23.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet23.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet23.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + 0+ "'", obj35.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "[0]"+ "'", str38.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet43.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet43.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet43.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj91 + "' != '" + 0+ "'", obj91.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet92.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet92.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet92.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection93);

  }

  @Test
  public void test183() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test183"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    java.lang.String str1 = treeSet0.toString();
    java2.util2.List list2 = java2.util2.Collections.singletonList((java.lang.Object)str1);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java2.util2.Collections.sort(list2);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[]"+ "'", str1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);

  }

  @Test
  public void test184() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test184"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list9);
    java2.util2.List list11 = java2.util2.Collections.unmodifiableList(list9);
    int i12 = java2.util2.Collections.indexOfSubList(list6, list11);
    java2.util2.List list13 = java2.util2.Collections.synchronizedList(list11);
    int i14 = java2.util2.Collections.lastIndexOfSubList(list2, list11);
    java2.util2.Collection collection15 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list2);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list21);
    java2.util2.List list23 = java2.util2.Collections.unmodifiableList(list21);
    int i24 = java2.util2.Collections.indexOfSubList(list18, list23);
    java2.util2.Collections.copy(list2, list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);

  }

  @Test
  public void test185() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test185"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list3 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.List list4 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.Collections.fill(list4, (java.lang.Object)(byte)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list4);

  }

  @Test
  public void test186() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test186"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.Set set6 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet5);
    treeSet5.clear();
    java2.util2.List list9 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    boolean b10 = treeSet5.addAll((java2.util2.Collection)list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test187() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test187"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.first();
    java2.util2.SortedSet sortedSet18 = treeSet4.tailSet((java.lang.Object)"");
    java.lang.String str19 = treeSet4.toString();
    java2.util2.List list22 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set23 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet24 = new java2.util2.TreeSet((java2.util2.Collection)set23);
    java.lang.Object[] obj_array25 = treeSet24.toArray();
    java.lang.Object[] obj_array26 = treeSet4.toArray(obj_array25);
    java2.util2.List list29 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set30 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet31 = new java2.util2.TreeSet((java2.util2.Collection)set30);
    java.lang.Object[] obj_array32 = treeSet31.toArray();
    java2.util2.List list35 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list38 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list38);
    java2.util2.List list40 = java2.util2.Collections.unmodifiableList(list38);
    java2.util2.Collections.copy(list35, list38);
    boolean b42 = treeSet31.addAll((java2.util2.Collection)list35);
    java.lang.Object obj43 = treeSet31.first();
    java2.util2.SortedSet sortedSet45 = treeSet31.tailSet((java.lang.Object)"");
    java2.util2.SortedSet sortedSet46 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet31);
    boolean b47 = treeSet4.equals((java.lang.Object)treeSet31);
    java2.util2.TreeSet treeSet48 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet31);
    java2.util2.SortedSet sortedSet49 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet48);
    java2.util2.List list52 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list53 = java2.util2.Collections.unmodifiableList(list52);
    java2.util2.List list54 = java2.util2.Collections.unmodifiableList(list52);
    java2.util2.List list57 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set58 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set59 = java2.util2.Collections.unmodifiableSet(set58);
    java2.util2.TreeSet treeSet60 = new java2.util2.TreeSet((java2.util2.Collection)set58);
    java2.util2.SortedSet sortedSet62 = treeSet60.headSet((java.lang.Object)(short)(-1));
    java2.util2.Collections.fill(list54, (java.lang.Object)sortedSet62);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      boolean b64 = treeSet48.retainAll((java2.util2.Collection)sortedSet62);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 0+ "'", obj16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[0]"+ "'", str19.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet24.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet24.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet24.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet31.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet31.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet31.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj43 + "' != '" + 0+ "'", obj43.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet48.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet48.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet48.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet60.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet60.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet60.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet62);

  }

  @Test
  public void test188() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test188"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    int i8 = java2.util2.Collections.indexOfSubList(list2, list7);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list14);
    java2.util2.List list16 = java2.util2.Collections.unmodifiableList(list14);
    java2.util2.Collections.copy(list11, list14);
    java2.util2.Collections.copy(list7, list11);
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list22 = java2.util2.Collections.unmodifiableList(list21);
    java2.util2.List list23 = java2.util2.Collections.unmodifiableList(list21);
    java2.util2.Collections.copy(list11, list23);
    java2.util2.Collections.rotate(list23, 1);
    java2.util2.List list27 = java2.util2.Collections.synchronizedList(list23);
    java2.util2.List list31 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list34 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list34);
    java2.util2.List list36 = java2.util2.Collections.unmodifiableList(list34);
    int i37 = java2.util2.Collections.indexOfSubList(list31, list36);
    java2.util2.Map map38 = java2.util2.Collections.singletonMap((java.lang.Object)0L, (java.lang.Object)list36);
    java2.util2.Map map39 = java2.util2.Collections.synchronizedMap(map38);
    java2.util2.Map map40 = java2.util2.Collections.synchronizedMap(map39);
    int i41 = java2.util2.Collections.binarySearch(list23, (java.lang.Object)map40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == (-1));

  }

  @Test
  public void test189() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test189"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list19 = java2.util2.Collections.unmodifiableList(list18);
    java2.util2.Collections.fill(list8, (java.lang.Object)list19);
    java2.util2.Collection collection21 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list8);
    java2.util2.List list24 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set25 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set26 = java2.util2.Collections.unmodifiableSet(set25);
    java2.util2.TreeSet treeSet27 = new java2.util2.TreeSet((java2.util2.Collection)set25);
    java2.util2.SortedSet sortedSet29 = treeSet27.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj30 = treeSet27.clone();
    java2.util2.List list33 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list36 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list36);
    java2.util2.List list38 = java2.util2.Collections.unmodifiableList(list36);
    java2.util2.Collections.copy(list33, list36);
    java2.util2.Collections.rotate(list33, 0);
    java2.util2.List list44 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list47 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list47);
    java2.util2.List list49 = java2.util2.Collections.unmodifiableList(list47);
    int i50 = java2.util2.Collections.indexOfSubList(list44, list49);
    java2.util2.List list53 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list56 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list56);
    java2.util2.List list58 = java2.util2.Collections.unmodifiableList(list56);
    java2.util2.Collections.copy(list53, list56);
    java2.util2.Collections.copy(list49, list53);
    java2.util2.List list63 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list66 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list66);
    java2.util2.List list68 = java2.util2.Collections.unmodifiableList(list66);
    java2.util2.Collections.copy(list63, list66);
    int i70 = java2.util2.Collections.indexOfSubList(list53, list66);
    java2.util2.Comparator comparator71 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list66, comparator71);
    java2.util2.Collections.sort(list33, comparator71);
    int i74 = java2.util2.Collections.binarySearch(list8, (java.lang.Object)treeSet27, comparator71);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java.lang.Object obj75 = java2.util2.Collections.max((java2.util2.Collection)list8);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet27.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet27.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == (-1));

  }

  @Test
  public void test190() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test190"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.first();
    java2.util2.SortedSet sortedSet18 = treeSet4.tailSet((java.lang.Object)"");
    java.lang.String str19 = treeSet4.toString();
    java2.util2.List list22 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set23 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet24 = new java2.util2.TreeSet((java2.util2.Collection)set23);
    java.lang.Object[] obj_array25 = treeSet24.toArray();
    java.lang.Object[] obj_array26 = treeSet4.toArray(obj_array25);
    java2.util2.List list29 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set30 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet31 = new java2.util2.TreeSet((java2.util2.Collection)set30);
    java.lang.Object[] obj_array32 = treeSet31.toArray();
    java2.util2.List list35 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list38 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list38);
    java2.util2.List list40 = java2.util2.Collections.unmodifiableList(list38);
    java2.util2.Collections.copy(list35, list38);
    boolean b42 = treeSet31.addAll((java2.util2.Collection)list35);
    java.lang.Object obj43 = treeSet31.first();
    java2.util2.SortedSet sortedSet45 = treeSet31.tailSet((java.lang.Object)"");
    java2.util2.SortedSet sortedSet46 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet31);
    boolean b47 = treeSet4.equals((java.lang.Object)treeSet31);
    java.lang.Object obj48 = treeSet31.first();
    java.lang.Object[] obj_array49 = treeSet31.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 0+ "'", obj16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[0]"+ "'", str19.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet24.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet24.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet24.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet31.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet31.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet31.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj43 + "' != '" + 0+ "'", obj43.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj48 + "' != '" + 0+ "'", obj48.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array49);

  }

  @Test
  public void test191() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test191"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list6 = java2.util2.Collections.unmodifiableList(list5);
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set10 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set11 = java2.util2.Collections.unmodifiableSet(set10);
    java2.util2.TreeSet treeSet12 = new java2.util2.TreeSet((java2.util2.Collection)set10);
    java2.util2.SortedSet sortedSet14 = treeSet12.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj15 = java2.util2.Collections.max((java2.util2.Collection)treeSet12);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list21);
    java2.util2.List list23 = java2.util2.Collections.unmodifiableList(list21);
    int i24 = java2.util2.Collections.indexOfSubList(list18, list23);
    java2.util2.List list25 = java2.util2.Collections.synchronizedList(list23);
    boolean b26 = treeSet12.retainAll((java2.util2.Collection)list25);
    int i27 = java2.util2.Collections.lastIndexOfSubList(list6, list25);
    java2.util2.Collection collection28 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list25);
    java2.util2.Collections.copy(list2, list25);
    java2.util2.List list30 = java2.util2.Collections.synchronizedList(list2);
    java2.util2.Collections.shuffle(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet12.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + 0+ "'", obj15.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);

  }

  @Test
  public void test192() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test192"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list3 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list9);
    java2.util2.List list11 = java2.util2.Collections.unmodifiableList(list9);
    int i12 = java2.util2.Collections.indexOfSubList(list6, list11);
    java2.util2.List list15 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list18);
    java2.util2.List list20 = java2.util2.Collections.unmodifiableList(list18);
    int i21 = java2.util2.Collections.indexOfSubList(list15, list20);
    java2.util2.List list24 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list27);
    java2.util2.List list29 = java2.util2.Collections.unmodifiableList(list27);
    java2.util2.Collections.copy(list24, list27);
    java2.util2.Collections.copy(list20, list24);
    java2.util2.List list34 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list37 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list37);
    java2.util2.List list39 = java2.util2.Collections.unmodifiableList(list37);
    java2.util2.Collections.copy(list34, list37);
    int i41 = java2.util2.Collections.indexOfSubList(list24, list37);
    java2.util2.List list44 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list47 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list47);
    java2.util2.List list49 = java2.util2.Collections.unmodifiableList(list47);
    int i50 = java2.util2.Collections.indexOfSubList(list44, list49);
    java2.util2.List list53 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list56 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list56);
    java2.util2.List list58 = java2.util2.Collections.unmodifiableList(list56);
    java2.util2.Collections.copy(list53, list56);
    java2.util2.Collections.copy(list49, list53);
    java2.util2.List list63 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list66 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list66);
    java2.util2.List list68 = java2.util2.Collections.unmodifiableList(list66);
    java2.util2.Collections.copy(list63, list66);
    int i70 = java2.util2.Collections.indexOfSubList(list53, list66);
    boolean b71 = java2.util2.Collections.replaceAll(list11, (java.lang.Object)list24, (java.lang.Object)list53);
    java2.util2.Collection collection72 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list24);
    java2.util2.List list75 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set76 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet77 = new java2.util2.TreeSet((java2.util2.Collection)set76);
    java.lang.Object[] obj_array78 = treeSet77.toArray();
    java2.util2.List list81 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list84 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list84);
    java2.util2.List list86 = java2.util2.Collections.unmodifiableList(list84);
    java2.util2.Collections.copy(list81, list84);
    boolean b88 = treeSet77.addAll((java2.util2.Collection)list81);
    java2.util2.List list91 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list92 = java2.util2.Collections.unmodifiableList(list91);
    java2.util2.Collections.fill(list81, (java.lang.Object)list92);
    java2.util2.List list94 = java2.util2.Collections.unmodifiableList(list92);
    java2.util2.Collections.copy(list24, list94);
    java2.util2.Collections.copy(list3, list94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet77.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet77.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet77.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list94);

  }

  @Test
  public void test193() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test193"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    java2.util2.Collections.copy(list2, list5);
    int i10 = java2.util2.Collections.binarySearch(list5, (java.lang.Object)10.0f);
    java2.util2.Collections.reverse(list5);
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list17 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list17);
    java2.util2.List list19 = java2.util2.Collections.unmodifiableList(list17);
    int i20 = java2.util2.Collections.indexOfSubList(list14, list19);
    java2.util2.Enumeration enumeration21 = java2.util2.Collections.enumeration((java2.util2.Collection)list14);
    java2.util2.ArrayList arrayList22 = java2.util2.Collections.list(enumeration21);
    java2.util2.ArrayList arrayList23 = java2.util2.Collections.list(enumeration21);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList23);
    java2.util2.Collections.copy(list5, (java2.util2.List)arrayList23);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java.lang.Object obj26 = java2.util2.Collections.min((java2.util2.Collection)arrayList23);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);

  }

  @Test
  public void test194() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test194"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list3 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.List list4 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.List list7 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list10 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list10);
    java2.util2.List list12 = java2.util2.Collections.unmodifiableList(list10);
    int i13 = java2.util2.Collections.indexOfSubList(list7, list12);
    java2.util2.List list16 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list19 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list19);
    java2.util2.List list21 = java2.util2.Collections.unmodifiableList(list19);
    java2.util2.Collections.copy(list16, list19);
    java2.util2.Collections.copy(list12, list16);
    java2.util2.Collections.copy(list4, list12);
    java2.util2.List list25 = java2.util2.Collections.unmodifiableList(list4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);

  }

  @Test
  public void test195() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test195"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java.lang.Object[] obj_array9 = treeSet5.toArray();
    java.lang.Object obj10 = treeSet5.first();
    java2.util2.List list13 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set14 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set15 = java2.util2.Collections.unmodifiableSet(set14);
    java2.util2.TreeSet treeSet16 = new java2.util2.TreeSet((java2.util2.Collection)set14);
    java2.util2.SortedSet sortedSet18 = treeSet16.tailSet((java.lang.Object)(short)0);
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set22 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet23 = new java2.util2.TreeSet((java2.util2.Collection)set22);
    java.lang.Object[] obj_array24 = treeSet23.toArray();
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list30 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list30);
    java2.util2.List list32 = java2.util2.Collections.unmodifiableList(list30);
    java2.util2.Collections.copy(list27, list30);
    boolean b34 = treeSet23.addAll((java2.util2.Collection)list27);
    java.lang.Object obj35 = treeSet23.first();
    java2.util2.SortedSet sortedSet37 = treeSet23.tailSet((java.lang.Object)"");
    java.lang.String str38 = treeSet23.toString();
    java2.util2.List list41 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set42 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet43 = new java2.util2.TreeSet((java2.util2.Collection)set42);
    java.lang.Object[] obj_array44 = treeSet43.toArray();
    java.lang.Object[] obj_array45 = treeSet23.toArray(obj_array44);
    java.lang.Object[] obj_array46 = treeSet16.toArray(obj_array44);
    java.lang.Object[] obj_array47 = treeSet5.toArray(obj_array44);
    java2.util2.List list50 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list53 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list53);
    java2.util2.List list55 = java2.util2.Collections.unmodifiableList(list53);
    java2.util2.Collections.copy(list50, list53);
    java2.util2.Collections.rotate(list50, 0);
    java2.util2.List list61 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list64 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list64);
    java2.util2.List list66 = java2.util2.Collections.unmodifiableList(list64);
    int i67 = java2.util2.Collections.indexOfSubList(list61, list66);
    java2.util2.List list70 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list73 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list73);
    java2.util2.List list75 = java2.util2.Collections.unmodifiableList(list73);
    java2.util2.Collections.copy(list70, list73);
    java2.util2.Collections.copy(list66, list70);
    java2.util2.List list80 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list83 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list83);
    java2.util2.List list85 = java2.util2.Collections.unmodifiableList(list83);
    java2.util2.Collections.copy(list80, list83);
    int i87 = java2.util2.Collections.indexOfSubList(list70, list83);
    java2.util2.Comparator comparator88 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list83, comparator88);
    java2.util2.Collections.sort(list50, comparator88);
    java.lang.Object obj91 = java2.util2.Collections.min((java2.util2.Collection)treeSet5, comparator88);
    java2.util2.TreeSet treeSet92 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet5);
    java2.util2.Set set93 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet92);
    java.lang.Object obj94 = java2.util2.Collections.max((java2.util2.Collection)set93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 0+ "'", obj10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet16.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet16.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet23.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet23.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet23.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + 0+ "'", obj35.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "[0]"+ "'", str38.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet43.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet43.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet43.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj91 + "' != '" + 0+ "'", obj91.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet92.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet92.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet92.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj94 + "' != '" + 0+ "'", obj94.equals(0));

  }

  @Test
  public void test196() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test196"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java.lang.Object[] obj_array9 = treeSet5.toArray();
    java2.util2.TreeSet treeSet10 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet5);
    java.lang.Object obj11 = treeSet5.last();
    java2.util2.Set set12 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet5);
    java2.util2.List list15 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set16 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet17 = new java2.util2.TreeSet((java2.util2.Collection)set16);
    java.lang.Object[] obj_array18 = treeSet17.toArray();
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list24 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list24);
    java2.util2.List list26 = java2.util2.Collections.unmodifiableList(list24);
    java2.util2.Collections.copy(list21, list24);
    boolean b28 = treeSet17.addAll((java2.util2.Collection)list21);
    java2.util2.List list31 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list32 = java2.util2.Collections.unmodifiableList(list31);
    java2.util2.Collections.fill(list21, (java.lang.Object)list32);
    java2.util2.Collection collection34 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list21);
    java2.util2.List list35 = java2.util2.Collections.unmodifiableList(list21);
    boolean b36 = treeSet5.containsAll((java2.util2.Collection)list21);
    java2.util2.List list39 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list42 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list42);
    java2.util2.List list44 = java2.util2.Collections.unmodifiableList(list42);
    java2.util2.Collections.copy(list39, list42);
    java2.util2.Collections.rotate(list39, 0);
    java2.util2.List list50 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list53 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list53);
    java2.util2.List list55 = java2.util2.Collections.unmodifiableList(list53);
    int i56 = java2.util2.Collections.indexOfSubList(list50, list55);
    java2.util2.List list59 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list62 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list62);
    java2.util2.List list64 = java2.util2.Collections.unmodifiableList(list62);
    java2.util2.Collections.copy(list59, list62);
    java2.util2.Collections.copy(list55, list59);
    java2.util2.List list69 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list72 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list72);
    java2.util2.List list74 = java2.util2.Collections.unmodifiableList(list72);
    java2.util2.Collections.copy(list69, list72);
    int i76 = java2.util2.Collections.indexOfSubList(list59, list72);
    java2.util2.Comparator comparator77 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list72, comparator77);
    java2.util2.Collections.sort(list39, comparator77);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java.lang.Object obj80 = java2.util2.Collections.max((java2.util2.Collection)list21, comparator77);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet10.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + 0+ "'", obj11.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet17.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet17.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet17.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator77);

  }

  @Test
  public void test197() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test197"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet7 = treeSet5.tailSet((java.lang.Object)(short)0);
    java2.util2.SortedSet sortedSet8 = java2.util2.Collections.synchronizedSortedSet(sortedSet7);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java.lang.Object obj9 = java2.util2.Collections.min((java2.util2.Collection)sortedSet8);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet8);

  }

  @Test
  public void test198() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test198"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.Set set16 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet4);
    java2.util2.List list19 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list20 = java2.util2.Collections.unmodifiableList(list19);
    java2.util2.List list23 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set24 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set25 = java2.util2.Collections.unmodifiableSet(set24);
    java2.util2.TreeSet treeSet26 = new java2.util2.TreeSet((java2.util2.Collection)set24);
    java2.util2.SortedSet sortedSet28 = treeSet26.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj29 = java2.util2.Collections.max((java2.util2.Collection)treeSet26);
    java2.util2.List list32 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list35 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list35);
    java2.util2.List list37 = java2.util2.Collections.unmodifiableList(list35);
    int i38 = java2.util2.Collections.indexOfSubList(list32, list37);
    java2.util2.List list39 = java2.util2.Collections.synchronizedList(list37);
    boolean b40 = treeSet26.retainAll((java2.util2.Collection)list39);
    int i41 = java2.util2.Collections.lastIndexOfSubList(list20, list39);
    boolean b42 = treeSet4.addAll((java2.util2.Collection)list20);
    boolean b43 = treeSet4.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet26.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet26.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet26.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 0+ "'", obj29.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);

  }

  @Test
  public void test199() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test199"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    int i8 = java2.util2.Collections.indexOfSubList(list2, list7);
    java2.util2.Enumeration enumeration9 = java2.util2.Collections.enumeration((java2.util2.Collection)list2);
    java2.util2.ArrayList arrayList10 = java2.util2.Collections.list(enumeration9);
    java2.util2.ArrayList arrayList11 = java2.util2.Collections.list(enumeration9);
    java2.util2.ArrayList arrayList12 = java2.util2.Collections.list(enumeration9);
    java2.util2.List list13 = java2.util2.Collections.singletonList((java.lang.Object)enumeration9);
    java2.util2.List list17 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list20 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list20);
    java2.util2.List list22 = java2.util2.Collections.unmodifiableList(list20);
    int i23 = java2.util2.Collections.indexOfSubList(list17, list22);
    java2.util2.Map map24 = java2.util2.Collections.singletonMap((java.lang.Object)0L, (java.lang.Object)list22);
    java2.util2.Map map25 = java2.util2.Collections.synchronizedMap(map24);
    java2.util2.Map map26 = java2.util2.Collections.unmodifiableMap(map24);
    java2.util2.Map map27 = java2.util2.Collections.synchronizedMap(map24);
    java2.util2.Map map28 = java2.util2.Collections.synchronizedMap(map27);
    java2.util2.List list31 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list34 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list34);
    java2.util2.List list36 = java2.util2.Collections.unmodifiableList(list34);
    java2.util2.Collections.copy(list31, list34);
    java2.util2.Collections.rotate(list31, 0);
    java2.util2.List list42 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list45 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list45);
    java2.util2.List list47 = java2.util2.Collections.unmodifiableList(list45);
    int i48 = java2.util2.Collections.indexOfSubList(list42, list47);
    java2.util2.List list51 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list54 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list54);
    java2.util2.List list56 = java2.util2.Collections.unmodifiableList(list54);
    java2.util2.Collections.copy(list51, list54);
    java2.util2.Collections.copy(list47, list51);
    java2.util2.List list61 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list64 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list64);
    java2.util2.List list66 = java2.util2.Collections.unmodifiableList(list64);
    java2.util2.Collections.copy(list61, list64);
    int i68 = java2.util2.Collections.indexOfSubList(list51, list64);
    java2.util2.Comparator comparator69 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list64, comparator69);
    java2.util2.Collections.sort(list31, comparator69);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      int i72 = java2.util2.Collections.binarySearch(list13, (java.lang.Object)map28, comparator69);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator69);

  }

  @Test
  public void test200() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test200"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java.lang.Object[] obj_array9 = treeSet5.toArray();
    java2.util2.TreeSet treeSet10 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet5);
    java2.util2.Collection collection11 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet5);
    java2.util2.TreeSet treeSet12 = new java2.util2.TreeSet((java2.util2.Collection)treeSet5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet10.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet12.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet12.toString(), "[0]");

  }

  @Test
  public void test201() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test201"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list9);
    java2.util2.List list11 = java2.util2.Collections.unmodifiableList(list9);
    int i12 = java2.util2.Collections.indexOfSubList(list6, list11);
    java2.util2.List list13 = java2.util2.Collections.synchronizedList(list11);
    int i14 = java2.util2.Collections.lastIndexOfSubList(list2, list11);
    java2.util2.Collections.reverse(list2);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list21);
    java2.util2.List list23 = java2.util2.Collections.unmodifiableList(list21);
    java2.util2.Collections.copy(list18, list21);
    java2.util2.Collections.rotate(list18, 0);
    java2.util2.Collections.copy(list2, list18);
    java2.util2.List list31 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set32 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set33 = java2.util2.Collections.unmodifiableSet(set32);
    java2.util2.TreeSet treeSet34 = new java2.util2.TreeSet((java2.util2.Collection)set32);
    java2.util2.SortedSet sortedSet36 = treeSet34.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj37 = java2.util2.Collections.max((java2.util2.Collection)treeSet34);
    java2.util2.List list40 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set41 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet42 = new java2.util2.TreeSet((java2.util2.Collection)set41);
    java.lang.Object[] obj_array43 = treeSet42.toArray();
    java2.util2.List list46 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list49 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list49);
    java2.util2.List list51 = java2.util2.Collections.unmodifiableList(list49);
    java2.util2.Collections.copy(list46, list49);
    boolean b53 = treeSet42.addAll((java2.util2.Collection)list46);
    java2.util2.List list56 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list57 = java2.util2.Collections.unmodifiableList(list56);
    java2.util2.Collections.fill(list46, (java.lang.Object)list57);
    boolean b59 = treeSet34.removeAll((java2.util2.Collection)list46);
    java2.util2.List list60 = java2.util2.Collections.nCopies(1, (java.lang.Object)list46);
    java2.util2.Set set62 = java2.util2.Collections.singleton((java.lang.Object)(-1.0d));
    java2.util2.List list65 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set66 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set67 = java2.util2.Collections.unmodifiableSet(set66);
    java2.util2.TreeSet treeSet68 = new java2.util2.TreeSet((java2.util2.Collection)set66);
    java.lang.Object[] obj_array70 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array71 = treeSet68.toArray(obj_array70);
    boolean b72 = java2.util2.Collections.replaceAll(list46, (java.lang.Object)set62, (java.lang.Object)treeSet68);
    int i73 = java2.util2.Collections.binarySearch(list2, (java.lang.Object)treeSet68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet34.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet34.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet34.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj37 + "' != '" + 0+ "'", obj37.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet42.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet42.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet42.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet68.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet68.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet68.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == (-1));

  }

  @Test
  public void test202() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test202"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet5);
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set10 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set11 = java2.util2.Collections.unmodifiableSet(set10);
    java2.util2.TreeSet treeSet12 = new java2.util2.TreeSet((java2.util2.Collection)set10);
    java.lang.Object[] obj_array14 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array15 = treeSet12.toArray(obj_array14);
    java.lang.Object[] obj_array16 = treeSet12.toArray();
    boolean b17 = treeSet5.removeAll((java2.util2.Collection)treeSet12);
    java.lang.String str18 = treeSet12.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet12.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet12.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[0]"+ "'", str18.equals("[0]"));

  }

  @Test
  public void test203() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test203"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.first();
    java2.util2.Set set17 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 0+ "'", obj16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set17);

  }

  @Test
  public void test204() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test204"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)treeSet5);
    java2.util2.Iterator iterator7 = treeSet5.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);

  }

  @Test
  public void test205() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test205"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list14);
    java2.util2.List list16 = java2.util2.Collections.unmodifiableList(list14);
    int i17 = java2.util2.Collections.indexOfSubList(list11, list16);
    java2.util2.List list20 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list23 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list23);
    java2.util2.List list25 = java2.util2.Collections.unmodifiableList(list23);
    java2.util2.Collections.copy(list20, list23);
    java2.util2.Collections.copy(list16, list20);
    java2.util2.List list30 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list33 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list33);
    java2.util2.List list35 = java2.util2.Collections.unmodifiableList(list33);
    java2.util2.Collections.copy(list30, list33);
    int i37 = java2.util2.Collections.indexOfSubList(list20, list33);
    boolean b38 = treeSet5.removeAll((java2.util2.Collection)list33);
    java2.util2.List list41 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set42 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set43 = java2.util2.Collections.unmodifiableSet(set42);
    java2.util2.TreeSet treeSet44 = new java2.util2.TreeSet((java2.util2.Collection)set42);
    java2.util2.SortedSet sortedSet46 = treeSet44.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj47 = java2.util2.Collections.max((java2.util2.Collection)treeSet44);
    java2.util2.List list50 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list53 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list53);
    java2.util2.List list55 = java2.util2.Collections.unmodifiableList(list53);
    int i56 = java2.util2.Collections.indexOfSubList(list50, list55);
    java2.util2.List list57 = java2.util2.Collections.synchronizedList(list55);
    boolean b58 = treeSet44.retainAll((java2.util2.Collection)list57);
    java2.util2.Collections.copy(list33, list57);
    java2.util2.List list60 = java2.util2.Collections.singletonList((java.lang.Object)list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet44.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet44.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet44.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj47 + "' != '" + 0+ "'", obj47.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);

  }

  @Test
  public void test206() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test206"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list14);
    java2.util2.List list16 = java2.util2.Collections.unmodifiableList(list14);
    int i17 = java2.util2.Collections.indexOfSubList(list11, list16);
    java2.util2.List list20 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list23 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list23);
    java2.util2.List list25 = java2.util2.Collections.unmodifiableList(list23);
    java2.util2.Collections.copy(list20, list23);
    java2.util2.Collections.copy(list16, list20);
    java2.util2.List list30 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list33 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list33);
    java2.util2.List list35 = java2.util2.Collections.unmodifiableList(list33);
    java2.util2.Collections.copy(list30, list33);
    int i37 = java2.util2.Collections.indexOfSubList(list20, list33);
    boolean b38 = treeSet5.removeAll((java2.util2.Collection)list33);
    java2.util2.List list41 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set42 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set43 = java2.util2.Collections.unmodifiableSet(set42);
    java2.util2.TreeSet treeSet44 = new java2.util2.TreeSet((java2.util2.Collection)set42);
    java2.util2.SortedSet sortedSet46 = treeSet44.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj47 = java2.util2.Collections.max((java2.util2.Collection)treeSet44);
    java2.util2.List list50 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list53 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list53);
    java2.util2.List list55 = java2.util2.Collections.unmodifiableList(list53);
    int i56 = java2.util2.Collections.indexOfSubList(list50, list55);
    java2.util2.List list57 = java2.util2.Collections.synchronizedList(list55);
    boolean b58 = treeSet44.retainAll((java2.util2.Collection)list57);
    java2.util2.Collections.copy(list33, list57);
    java2.util2.Collections.reverse(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet44.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet44.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet44.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj47 + "' != '" + 0+ "'", obj47.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);

  }

  @Test
  public void test207() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test207"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list19 = java2.util2.Collections.unmodifiableList(list18);
    java2.util2.Collections.fill(list8, (java.lang.Object)list19);
    java2.util2.Collection collection21 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list8);
    java2.util2.List list24 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set25 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set26 = java2.util2.Collections.unmodifiableSet(set25);
    java2.util2.TreeSet treeSet27 = new java2.util2.TreeSet((java2.util2.Collection)set25);
    java2.util2.SortedSet sortedSet29 = treeSet27.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj30 = treeSet27.clone();
    java2.util2.List list33 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list36 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list36);
    java2.util2.List list38 = java2.util2.Collections.unmodifiableList(list36);
    java2.util2.Collections.copy(list33, list36);
    java2.util2.Collections.rotate(list33, 0);
    java2.util2.List list44 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list47 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list47);
    java2.util2.List list49 = java2.util2.Collections.unmodifiableList(list47);
    int i50 = java2.util2.Collections.indexOfSubList(list44, list49);
    java2.util2.List list53 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list56 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list56);
    java2.util2.List list58 = java2.util2.Collections.unmodifiableList(list56);
    java2.util2.Collections.copy(list53, list56);
    java2.util2.Collections.copy(list49, list53);
    java2.util2.List list63 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list66 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list66);
    java2.util2.List list68 = java2.util2.Collections.unmodifiableList(list66);
    java2.util2.Collections.copy(list63, list66);
    int i70 = java2.util2.Collections.indexOfSubList(list53, list66);
    java2.util2.Comparator comparator71 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list66, comparator71);
    java2.util2.Collections.sort(list33, comparator71);
    int i74 = java2.util2.Collections.binarySearch(list8, (java.lang.Object)treeSet27, comparator71);
    java2.util2.TreeSet treeSet75 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet27);
    java.lang.Object obj76 = treeSet27.last();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet27.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet27.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet75.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet75.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet75.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj76 + "' != '" + 0+ "'", obj76.equals(0));

  }

  @Test
  public void test208() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test208"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set19 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet20 = new java2.util2.TreeSet((java2.util2.Collection)set19);
    java.lang.Object[] obj_array21 = treeSet20.toArray();
    java2.util2.List list24 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list27);
    java2.util2.List list29 = java2.util2.Collections.unmodifiableList(list27);
    java2.util2.Collections.copy(list24, list27);
    boolean b31 = treeSet20.addAll((java2.util2.Collection)list24);
    java.lang.Object obj32 = treeSet20.first();
    java2.util2.SortedSet sortedSet34 = treeSet20.tailSet((java.lang.Object)"");
    java.lang.String str35 = treeSet20.toString();
    java2.util2.List list38 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set39 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet40 = new java2.util2.TreeSet((java2.util2.Collection)set39);
    java.lang.Object[] obj_array41 = treeSet40.toArray();
    java.lang.Object[] obj_array42 = treeSet20.toArray(obj_array41);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      boolean b43 = treeSet4.contains((java.lang.Object)treeSet20);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet20.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet20.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet20.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + 0+ "'", obj32.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "[0]"+ "'", str35.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet40.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet40.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet40.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array42);

  }

  @Test
  public void test209() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test209"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    java2.util2.Collections.copy(list2, list5);
    int i10 = java2.util2.Collections.binarySearch(list5, (java.lang.Object)10.0f);
    java2.util2.List list11 = java2.util2.Collections.singletonList((java.lang.Object)10.0f);
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set15 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet16 = new java2.util2.TreeSet((java2.util2.Collection)set15);
    java.lang.Object[] obj_array17 = treeSet16.toArray();
    java2.util2.List list20 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list23 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list23);
    java2.util2.List list25 = java2.util2.Collections.unmodifiableList(list23);
    java2.util2.Collections.copy(list20, list23);
    boolean b27 = treeSet16.addAll((java2.util2.Collection)list20);
    java2.util2.Set set28 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet16);
    java2.util2.TreeSet treeSet29 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet16);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java2.util2.Collections.fill(list11, (java.lang.Object)treeSet16);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet16.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet16.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet29.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet29.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet29.toString(), "[0]");

  }

  @Test
  public void test210() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test210"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list9);
    java2.util2.List list11 = java2.util2.Collections.unmodifiableList(list9);
    int i12 = java2.util2.Collections.indexOfSubList(list6, list11);
    java2.util2.List list13 = java2.util2.Collections.synchronizedList(list11);
    int i14 = java2.util2.Collections.lastIndexOfSubList(list2, list11);
    java2.util2.Collections.reverse(list2);
    java2.util2.Set set16 = java2.util2.Collections.singleton((java.lang.Object)list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);

  }

  @Test
  public void test211() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test211"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.Set set16 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet4);
    java2.util2.TreeSet treeSet17 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet4);
    java2.util2.TreeSet treeSet18 = new java2.util2.TreeSet((java2.util2.Collection)treeSet4);
    java2.util2.Comparator comparator19 = treeSet4.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet17.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet17.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet17.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet18.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet18.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator19);

  }

  @Test
  public void test212() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test212"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    int i8 = java2.util2.Collections.indexOfSubList(list2, list7);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list14);
    java2.util2.List list16 = java2.util2.Collections.unmodifiableList(list14);
    java2.util2.Collections.copy(list11, list14);
    java2.util2.Collections.copy(list7, list11);
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list24 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list24);
    java2.util2.List list26 = java2.util2.Collections.unmodifiableList(list24);
    java2.util2.Collections.copy(list21, list24);
    int i28 = java2.util2.Collections.indexOfSubList(list11, list24);
    java2.util2.Collections.rotate(list24, 10);
    java2.util2.List list33 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set34 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set35 = java2.util2.Collections.unmodifiableSet(set34);
    java2.util2.TreeSet treeSet36 = new java2.util2.TreeSet((java2.util2.Collection)set34);
    java2.util2.SortedSet sortedSet38 = treeSet36.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj39 = java2.util2.Collections.max((java2.util2.Collection)treeSet36);
    java2.util2.List list42 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list45 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list45);
    java2.util2.List list47 = java2.util2.Collections.unmodifiableList(list45);
    int i48 = java2.util2.Collections.indexOfSubList(list42, list47);
    java2.util2.List list49 = java2.util2.Collections.synchronizedList(list47);
    boolean b50 = treeSet36.retainAll((java2.util2.Collection)list49);
    int i51 = java2.util2.Collections.binarySearch(list24, (java.lang.Object)list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet36.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet36.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet36.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj39 + "' != '" + 0+ "'", obj39.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == (-1));

  }

  @Test
  public void test213() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test213"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list9);
    java2.util2.List list11 = java2.util2.Collections.unmodifiableList(list9);
    int i12 = java2.util2.Collections.indexOfSubList(list6, list11);
    java2.util2.List list13 = java2.util2.Collections.synchronizedList(list11);
    int i14 = java2.util2.Collections.lastIndexOfSubList(list2, list11);
    java2.util2.Collection collection15 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection15);

  }

  @Test
  public void test214() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test214"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.first();
    java2.util2.SortedSet sortedSet18 = treeSet4.tailSet((java.lang.Object)"");
    java2.util2.SortedSet sortedSet19 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet4);
    java2.util2.Set set20 = java2.util2.Collections.singleton((java.lang.Object)sortedSet19);
    java2.util2.TreeSet treeSet21 = new java2.util2.TreeSet((java2.util2.Collection)sortedSet19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 0+ "'", obj16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet21.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet21.toString(), "[0]");

  }

  @Test
  public void test215() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test215"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.Set set16 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet4);
    java2.util2.Set set17 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet4);
    java2.util2.List list20 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set21 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet22 = new java2.util2.TreeSet((java2.util2.Collection)set21);
    java.lang.Object[] obj_array23 = treeSet22.toArray();
    java2.util2.List list26 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list29 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list29);
    java2.util2.List list31 = java2.util2.Collections.unmodifiableList(list29);
    java2.util2.Collections.copy(list26, list29);
    boolean b33 = treeSet22.addAll((java2.util2.Collection)list26);
    java.lang.Object obj34 = treeSet22.first();
    java2.util2.SortedSet sortedSet36 = treeSet22.tailSet((java.lang.Object)"");
    java2.util2.SortedSet sortedSet37 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet22);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet38 = treeSet4.headSet((java.lang.Object)sortedSet37);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet22.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet22.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet22.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj34 + "' != '" + 0+ "'", obj34.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet37);

  }

  @Test
  public void test216() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test216"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.first();
    treeSet4.clear();
    java2.util2.SortedSet sortedSet18 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet4);
    boolean b19 = treeSet4.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 0+ "'", obj16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);

  }

  @Test
  public void test217() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test217"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet5);
    java2.util2.Set set7 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet5);
    java2.util2.List list10 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set11 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set12 = java2.util2.Collections.unmodifiableSet(set11);
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet((java2.util2.Collection)set11);
    java.lang.Object[] obj_array15 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array16 = treeSet13.toArray(obj_array15);
    java.lang.Object[] obj_array17 = treeSet13.toArray();
    java2.util2.TreeSet treeSet18 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet13);
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set22 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set23 = java2.util2.Collections.unmodifiableSet(set22);
    java2.util2.TreeSet treeSet24 = new java2.util2.TreeSet((java2.util2.Collection)set22);
    java.lang.Object[] obj_array26 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array27 = treeSet24.toArray(obj_array26);
    java.lang.Object[] obj_array28 = treeSet24.toArray();
    java.lang.Object[] obj_array29 = treeSet18.toArray(obj_array28);
    java.lang.Object[] obj_array30 = treeSet5.toArray(obj_array28);
    java2.util2.Collection collection31 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet18.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet18.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet24.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet24.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet24.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection31);

  }

  @Test
  public void test218() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test218"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.Collections.shuffle(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test219() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test219"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    int i8 = java2.util2.Collections.indexOfSubList(list2, list7);
    java2.util2.Enumeration enumeration9 = java2.util2.Collections.enumeration((java2.util2.Collection)list2);
    java2.util2.ArrayList arrayList10 = java2.util2.Collections.list(enumeration9);
    java2.util2.ArrayList arrayList11 = java2.util2.Collections.list(enumeration9);
    java2.util2.ArrayList arrayList12 = java2.util2.Collections.list(enumeration9);
    java2.util2.List list15 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set16 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set17 = java2.util2.Collections.unmodifiableSet(set16);
    java2.util2.TreeSet treeSet18 = new java2.util2.TreeSet((java2.util2.Collection)set16);
    java.lang.Object[] obj_array20 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array21 = treeSet18.toArray(obj_array20);
    java.lang.Object[] obj_array22 = treeSet18.toArray();
    java.lang.Object obj23 = treeSet18.first();
    java2.util2.List list24 = java2.util2.Collections.singletonList(obj23);
    int i25 = java2.util2.Collections.indexOfSubList((java2.util2.List)arrayList12, list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet18.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet18.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 0+ "'", obj23.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-1));

  }

  @Test
  public void test220() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test220"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list6);
    java2.util2.List list8 = java2.util2.Collections.unmodifiableList(list6);
    int i9 = java2.util2.Collections.indexOfSubList(list3, list8);
    java2.util2.Map map10 = java2.util2.Collections.singletonMap((java.lang.Object)0L, (java.lang.Object)list8);
    java2.util2.Map map11 = java2.util2.Collections.synchronizedMap(map10);
    java2.util2.Map map12 = java2.util2.Collections.unmodifiableMap(map11);
    java2.util2.Map map13 = java2.util2.Collections.synchronizedMap(map11);
    java2.util2.Map map14 = java2.util2.Collections.unmodifiableMap(map13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map14);

  }

  @Test
  public void test221() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test221"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.first();
    java2.util2.SortedSet sortedSet18 = treeSet4.tailSet((java.lang.Object)"");
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set22 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet23 = new java2.util2.TreeSet((java2.util2.Collection)set22);
    java.lang.Object[] obj_array24 = treeSet23.toArray();
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list30 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list30);
    java2.util2.List list32 = java2.util2.Collections.unmodifiableList(list30);
    java2.util2.Collections.copy(list27, list30);
    boolean b34 = treeSet23.addAll((java2.util2.Collection)list27);
    java.lang.Object obj35 = treeSet23.first();
    java2.util2.SortedSet sortedSet37 = treeSet23.tailSet((java.lang.Object)"");
    java2.util2.SortedSet sortedSet38 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet23);
    boolean b39 = treeSet4.addAll((java2.util2.Collection)treeSet23);
    java.lang.Object obj40 = treeSet23.first();
    java2.util2.List list41 = java2.util2.Collections.singletonList((java.lang.Object)treeSet23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 0+ "'", obj16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet23.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet23.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet23.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + 0+ "'", obj35.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj40 + "' != '" + 0+ "'", obj40.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);

  }

  @Test
  public void test222() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test222"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet7 = treeSet5.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj8 = java2.util2.Collections.max((java2.util2.Collection)treeSet5);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list14);
    java2.util2.List list16 = java2.util2.Collections.unmodifiableList(list14);
    int i17 = java2.util2.Collections.indexOfSubList(list11, list16);
    java2.util2.List list18 = java2.util2.Collections.synchronizedList(list16);
    boolean b19 = treeSet5.retainAll((java2.util2.Collection)list18);
    java2.util2.Enumeration enumeration20 = java2.util2.Collections.enumeration((java2.util2.Collection)list18);
    java2.util2.Collections.sort(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 0+ "'", obj8.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration20);

  }

  @Test
  public void test223() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test223"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list3 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.Collection collection4 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list3);
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    java2.util2.Collections.rotate(list8, 0);
    java2.util2.List list19 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list22 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list22);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list22);
    int i25 = java2.util2.Collections.indexOfSubList(list19, list24);
    java2.util2.List list28 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list31 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list31);
    java2.util2.List list33 = java2.util2.Collections.unmodifiableList(list31);
    java2.util2.Collections.copy(list28, list31);
    java2.util2.Collections.copy(list24, list28);
    java2.util2.List list38 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list41 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list41);
    java2.util2.List list43 = java2.util2.Collections.unmodifiableList(list41);
    java2.util2.Collections.copy(list38, list41);
    int i45 = java2.util2.Collections.indexOfSubList(list28, list41);
    java2.util2.Comparator comparator46 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list41, comparator46);
    java2.util2.Collections.sort(list8, comparator46);
    java2.util2.List list49 = java2.util2.Collections.nCopies(10, (java.lang.Object)comparator46);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java2.util2.Collections.copy(list3, list49);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);

  }

  @Test
  public void test224() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test224"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.Set set6 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet5);
    treeSet5.clear();
    java2.util2.List list10 = java2.util2.Collections.nCopies(1, (java.lang.Object)"[]");
    boolean b11 = treeSet5.remove((java.lang.Object)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test225() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test225"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet7 = treeSet5.headSet((java.lang.Object)0);
    java2.util2.List list8 = java2.util2.Collections.singletonList((java.lang.Object)0);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set12 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet((java2.util2.Collection)set12);
    java2.util2.List list16 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set17 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet18 = new java2.util2.TreeSet((java2.util2.Collection)set17);
    java.lang.Object[] obj_array19 = treeSet18.toArray();
    java2.util2.List list22 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list25 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list25);
    java2.util2.List list27 = java2.util2.Collections.unmodifiableList(list25);
    java2.util2.Collections.copy(list22, list25);
    boolean b29 = treeSet18.addAll((java2.util2.Collection)list22);
    java2.util2.List list32 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list33 = java2.util2.Collections.unmodifiableList(list32);
    java2.util2.Collections.fill(list22, (java.lang.Object)list33);
    java2.util2.List list37 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list37);
    java2.util2.List list41 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.fill(list37, (java.lang.Object)(-1.0d));
    java2.util2.Collections.copy(list33, list37);
    java2.util2.List list46 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list49 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list49);
    java2.util2.List list51 = java2.util2.Collections.unmodifiableList(list49);
    int i52 = java2.util2.Collections.indexOfSubList(list46, list51);
    java2.util2.List list53 = java2.util2.Collections.synchronizedList(list51);
    int i54 = java2.util2.Collections.lastIndexOfSubList(list33, list53);
    java2.util2.SortedSet sortedSet55 = treeSet13.headSet((java.lang.Object)i54);
    int i56 = java2.util2.Collections.binarySearch(list8, (java.lang.Object)i54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet18.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet18.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);

  }

  @Test
  public void test226() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test226"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    int i8 = java2.util2.Collections.indexOfSubList(list2, list7);
    java2.util2.Enumeration enumeration9 = java2.util2.Collections.enumeration((java2.util2.Collection)list2);
    java2.util2.ArrayList arrayList10 = java2.util2.Collections.list(enumeration9);
    java2.util2.Collections.rotate((java2.util2.List)arrayList10, 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList10);

  }

  @Test
  public void test227() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test227"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    int i8 = java2.util2.Collections.indexOfSubList(list2, list7);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list14);
    java2.util2.List list16 = java2.util2.Collections.unmodifiableList(list14);
    java2.util2.Collections.copy(list11, list14);
    java2.util2.Collections.copy(list7, list11);
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list22 = java2.util2.Collections.unmodifiableList(list21);
    java2.util2.List list23 = java2.util2.Collections.unmodifiableList(list21);
    java2.util2.Collections.copy(list11, list23);
    java2.util2.List list28 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list31 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list31);
    java2.util2.List list33 = java2.util2.Collections.unmodifiableList(list31);
    int i34 = java2.util2.Collections.indexOfSubList(list28, list33);
    java2.util2.Map map35 = java2.util2.Collections.singletonMap((java.lang.Object)0L, (java.lang.Object)list33);
    java2.util2.Map map36 = java2.util2.Collections.synchronizedMap(map35);
    java2.util2.Map map37 = java2.util2.Collections.unmodifiableMap(map35);
    int i38 = java2.util2.Collections.binarySearch(list23, (java.lang.Object)map37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == (-1));

  }

  @Test
  public void test228() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test228"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java.lang.Object[] obj_array9 = treeSet5.toArray();
    java.lang.Object obj10 = treeSet5.first();
    java2.util2.List list13 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set14 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set15 = java2.util2.Collections.unmodifiableSet(set14);
    java2.util2.TreeSet treeSet16 = new java2.util2.TreeSet((java2.util2.Collection)set14);
    java2.util2.SortedSet sortedSet18 = treeSet16.tailSet((java.lang.Object)(short)0);
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set22 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet23 = new java2.util2.TreeSet((java2.util2.Collection)set22);
    java.lang.Object[] obj_array24 = treeSet23.toArray();
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list30 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list30);
    java2.util2.List list32 = java2.util2.Collections.unmodifiableList(list30);
    java2.util2.Collections.copy(list27, list30);
    boolean b34 = treeSet23.addAll((java2.util2.Collection)list27);
    java.lang.Object obj35 = treeSet23.first();
    java2.util2.SortedSet sortedSet37 = treeSet23.tailSet((java.lang.Object)"");
    java.lang.String str38 = treeSet23.toString();
    java2.util2.List list41 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set42 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet43 = new java2.util2.TreeSet((java2.util2.Collection)set42);
    java.lang.Object[] obj_array44 = treeSet43.toArray();
    java.lang.Object[] obj_array45 = treeSet23.toArray(obj_array44);
    java.lang.Object[] obj_array46 = treeSet16.toArray(obj_array44);
    java.lang.Object[] obj_array47 = treeSet5.toArray(obj_array44);
    java2.util2.List list50 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list53 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list53);
    java2.util2.List list55 = java2.util2.Collections.unmodifiableList(list53);
    java2.util2.Collections.copy(list50, list53);
    java2.util2.Collections.rotate(list50, 0);
    java2.util2.List list61 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list64 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list64);
    java2.util2.List list66 = java2.util2.Collections.unmodifiableList(list64);
    int i67 = java2.util2.Collections.indexOfSubList(list61, list66);
    java2.util2.List list70 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list73 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list73);
    java2.util2.List list75 = java2.util2.Collections.unmodifiableList(list73);
    java2.util2.Collections.copy(list70, list73);
    java2.util2.Collections.copy(list66, list70);
    java2.util2.List list80 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list83 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list83);
    java2.util2.List list85 = java2.util2.Collections.unmodifiableList(list83);
    java2.util2.Collections.copy(list80, list83);
    int i87 = java2.util2.Collections.indexOfSubList(list70, list83);
    java2.util2.Comparator comparator88 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list83, comparator88);
    java2.util2.Collections.sort(list50, comparator88);
    java.lang.Object obj91 = java2.util2.Collections.min((java2.util2.Collection)treeSet5, comparator88);
    int i92 = treeSet5.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 0+ "'", obj10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet16.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet16.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet23.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet23.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet23.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + 0+ "'", obj35.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "[0]"+ "'", str38.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet43.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet43.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet43.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj91 + "' != '" + 0+ "'", obj91.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 1);

  }

  @Test
  public void test229() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test229"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    java2.util2.Collections.copy(list2, list5);
    int i10 = java2.util2.Collections.binarySearch(list5, (java.lang.Object)10.0f);
    java2.util2.List list11 = java2.util2.Collections.singletonList((java.lang.Object)10.0f);
    java2.util2.List list12 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.List list15 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set16 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set17 = java2.util2.Collections.unmodifiableSet(set16);
    java2.util2.TreeSet treeSet18 = new java2.util2.TreeSet((java2.util2.Collection)set16);
    java.lang.Object[] obj_array20 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array21 = treeSet18.toArray(obj_array20);
    java.lang.Object[] obj_array22 = treeSet18.toArray();
    java2.util2.TreeSet treeSet23 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet18);
    java.lang.Object obj24 = treeSet18.last();
    java2.util2.Set set25 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet18);
    java2.util2.List list28 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set29 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet30 = new java2.util2.TreeSet((java2.util2.Collection)set29);
    java.lang.Object[] obj_array31 = treeSet30.toArray();
    java2.util2.List list34 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list37 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list37);
    java2.util2.List list39 = java2.util2.Collections.unmodifiableList(list37);
    java2.util2.Collections.copy(list34, list37);
    boolean b41 = treeSet30.addAll((java2.util2.Collection)list34);
    java2.util2.List list44 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list45 = java2.util2.Collections.unmodifiableList(list44);
    java2.util2.Collections.fill(list34, (java.lang.Object)list45);
    java2.util2.Collection collection47 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list34);
    java2.util2.List list48 = java2.util2.Collections.unmodifiableList(list34);
    boolean b49 = treeSet18.containsAll((java2.util2.Collection)list34);
    java2.util2.List list52 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set53 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set54 = java2.util2.Collections.unmodifiableSet(set53);
    java2.util2.TreeSet treeSet55 = new java2.util2.TreeSet((java2.util2.Collection)set53);
    java2.util2.SortedSet sortedSet56 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet55);
    java2.util2.List list59 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set60 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set61 = java2.util2.Collections.unmodifiableSet(set60);
    java2.util2.TreeSet treeSet62 = new java2.util2.TreeSet((java2.util2.Collection)set60);
    java.lang.Object[] obj_array64 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array65 = treeSet62.toArray(obj_array64);
    java.lang.Object[] obj_array66 = treeSet62.toArray();
    boolean b67 = treeSet55.removeAll((java2.util2.Collection)treeSet62);
    java2.util2.Iterator iterator68 = treeSet62.iterator();
    java.lang.Object[] obj_array69 = treeSet62.toArray();
    java.lang.Object[] obj_array70 = treeSet18.toArray(obj_array69);
    java2.util2.List list73 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set74 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet75 = new java2.util2.TreeSet((java2.util2.Collection)set74);
    java.lang.Object[] obj_array76 = treeSet75.toArray();
    java2.util2.List list79 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list82 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list82);
    java2.util2.List list84 = java2.util2.Collections.unmodifiableList(list82);
    java2.util2.Collections.copy(list79, list82);
    boolean b86 = treeSet75.addAll((java2.util2.Collection)list79);
    java.lang.Object obj87 = treeSet75.clone();
    java2.util2.List list90 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set91 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set92 = java2.util2.Collections.unmodifiableSet(set91);
    java2.util2.TreeSet treeSet93 = new java2.util2.TreeSet((java2.util2.Collection)set91);
    java2.util2.SortedSet sortedSet94 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet93);
    boolean b95 = treeSet75.removeAll((java2.util2.Collection)treeSet93);
    boolean b96 = java2.util2.Collections.replaceAll(list12, (java.lang.Object)obj_array70, (java.lang.Object)b95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet18.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet18.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet23.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet23.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet23.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 0+ "'", obj24.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet30.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet30.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet30.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet55.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet55.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet55.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet62.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet62.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet62.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet75.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet75.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet75.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet93.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet93.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet93.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == false);

  }

  @Test
  public void test230() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test230"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    int i8 = java2.util2.Collections.indexOfSubList(list2, list7);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list14);
    java2.util2.List list16 = java2.util2.Collections.unmodifiableList(list14);
    int i17 = java2.util2.Collections.indexOfSubList(list11, list16);
    java2.util2.List list20 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list23 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list23);
    java2.util2.List list25 = java2.util2.Collections.unmodifiableList(list23);
    java2.util2.Collections.copy(list20, list23);
    java2.util2.Collections.copy(list16, list20);
    java2.util2.List list30 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list33 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list33);
    java2.util2.List list35 = java2.util2.Collections.unmodifiableList(list33);
    java2.util2.Collections.copy(list30, list33);
    int i37 = java2.util2.Collections.indexOfSubList(list20, list33);
    java2.util2.List list40 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list43 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list43);
    java2.util2.List list45 = java2.util2.Collections.unmodifiableList(list43);
    int i46 = java2.util2.Collections.indexOfSubList(list40, list45);
    java2.util2.List list49 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list52 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list52);
    java2.util2.List list54 = java2.util2.Collections.unmodifiableList(list52);
    java2.util2.Collections.copy(list49, list52);
    java2.util2.Collections.copy(list45, list49);
    java2.util2.List list59 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list62 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list62);
    java2.util2.List list64 = java2.util2.Collections.unmodifiableList(list62);
    java2.util2.Collections.copy(list59, list62);
    int i66 = java2.util2.Collections.indexOfSubList(list49, list62);
    boolean b67 = java2.util2.Collections.replaceAll(list7, (java.lang.Object)list20, (java.lang.Object)list49);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java.lang.Object obj68 = java2.util2.Collections.max((java2.util2.Collection)list20);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);

  }

  @Test
  public void test231() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test231"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.Set set16 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet4);
    java2.util2.Set set17 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet4);
    java2.util2.Set set18 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet4);
    java2.util2.SortedSet sortedSet19 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet19);

  }

  @Test
  public void test232() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test232"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    int i8 = java2.util2.Collections.indexOfSubList(list2, list7);
    java2.util2.Enumeration enumeration9 = java2.util2.Collections.enumeration((java2.util2.Collection)list2);
    java2.util2.ArrayList arrayList10 = java2.util2.Collections.list(enumeration9);
    java2.util2.ArrayList arrayList11 = java2.util2.Collections.list(enumeration9);
    java2.util2.List list12 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList11);
    java.lang.Object[] obj_array13 = arrayList11.toArray();
    java2.util2.List list16 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set17 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet18 = new java2.util2.TreeSet((java2.util2.Collection)set17);
    java.lang.Object[] obj_array19 = treeSet18.toArray();
    java2.util2.List list22 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list25 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list25);
    java2.util2.List list27 = java2.util2.Collections.unmodifiableList(list25);
    java2.util2.Collections.copy(list22, list25);
    boolean b29 = treeSet18.addAll((java2.util2.Collection)list22);
    java.lang.Object obj30 = treeSet18.first();
    java2.util2.SortedSet sortedSet32 = treeSet18.tailSet((java.lang.Object)"");
    java.lang.String str33 = treeSet18.toString();
    java2.util2.List list36 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set37 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet38 = new java2.util2.TreeSet((java2.util2.Collection)set37);
    java.lang.Object[] obj_array39 = treeSet38.toArray();
    java.lang.Object[] obj_array40 = treeSet18.toArray(obj_array39);
    java.lang.Object[] obj_array41 = arrayList11.toArray(obj_array39);
    java2.util2.List list42 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet18.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet18.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj30 + "' != '" + 0+ "'", obj30.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "[0]"+ "'", str33.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet38.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet38.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet38.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);

  }

  @Test
  public void test233() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test233"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.Set set16 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet4);
    java2.util2.SortedSet sortedSet17 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet17);

  }

  @Test
  public void test234() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test234"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.clone();
    java2.util2.List list19 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set20 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set21 = java2.util2.Collections.unmodifiableSet(set20);
    java2.util2.TreeSet treeSet22 = new java2.util2.TreeSet((java2.util2.Collection)set20);
    java2.util2.SortedSet sortedSet23 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet22);
    boolean b24 = treeSet4.removeAll((java2.util2.Collection)treeSet22);
    java2.util2.Collection collection25 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet22.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet22.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet22.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection25);

  }

  @Test
  public void test235() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test235"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.first();
    java2.util2.SortedSet sortedSet18 = treeSet4.tailSet((java.lang.Object)"");
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set22 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet23 = new java2.util2.TreeSet((java2.util2.Collection)set22);
    java.lang.Object[] obj_array24 = treeSet23.toArray();
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list30 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list30);
    java2.util2.List list32 = java2.util2.Collections.unmodifiableList(list30);
    java2.util2.Collections.copy(list27, list30);
    boolean b34 = treeSet23.addAll((java2.util2.Collection)list27);
    java.lang.Object obj35 = treeSet23.first();
    java2.util2.SortedSet sortedSet37 = treeSet23.tailSet((java.lang.Object)"");
    java2.util2.SortedSet sortedSet38 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet23);
    boolean b39 = treeSet4.addAll((java2.util2.Collection)treeSet23);
    java2.util2.List list42 = java2.util2.Collections.nCopies(0, (java.lang.Object)1);
    boolean b43 = treeSet4.add((java.lang.Object)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0, 1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 0+ "'", obj16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet23.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet23.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet23.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + 0+ "'", obj35.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);

  }

  @Test
  public void test236() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test236"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list19 = java2.util2.Collections.unmodifiableList(list18);
    java2.util2.Collections.fill(list8, (java.lang.Object)list19);
    java2.util2.Collection collection21 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list8);
    java2.util2.List list24 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set25 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set26 = java2.util2.Collections.unmodifiableSet(set25);
    java2.util2.TreeSet treeSet27 = new java2.util2.TreeSet((java2.util2.Collection)set25);
    java2.util2.SortedSet sortedSet29 = treeSet27.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj30 = treeSet27.clone();
    java2.util2.List list33 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list36 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list36);
    java2.util2.List list38 = java2.util2.Collections.unmodifiableList(list36);
    java2.util2.Collections.copy(list33, list36);
    java2.util2.Collections.rotate(list33, 0);
    java2.util2.List list44 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list47 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list47);
    java2.util2.List list49 = java2.util2.Collections.unmodifiableList(list47);
    int i50 = java2.util2.Collections.indexOfSubList(list44, list49);
    java2.util2.List list53 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list56 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list56);
    java2.util2.List list58 = java2.util2.Collections.unmodifiableList(list56);
    java2.util2.Collections.copy(list53, list56);
    java2.util2.Collections.copy(list49, list53);
    java2.util2.List list63 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list66 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list66);
    java2.util2.List list68 = java2.util2.Collections.unmodifiableList(list66);
    java2.util2.Collections.copy(list63, list66);
    int i70 = java2.util2.Collections.indexOfSubList(list53, list66);
    java2.util2.Comparator comparator71 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list66, comparator71);
    java2.util2.Collections.sort(list33, comparator71);
    int i74 = java2.util2.Collections.binarySearch(list8, (java.lang.Object)treeSet27, comparator71);
    java2.util2.Comparator comparator75 = treeSet27.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet27.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet27.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator75);

  }

  @Test
  public void test237() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test237"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.first();
    java2.util2.SortedSet sortedSet18 = treeSet4.tailSet((java.lang.Object)"");
    java.lang.String str19 = treeSet4.toString();
    java2.util2.List list22 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set23 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet24 = new java2.util2.TreeSet((java2.util2.Collection)set23);
    java.lang.Object[] obj_array25 = treeSet24.toArray();
    java.lang.Object[] obj_array26 = treeSet4.toArray(obj_array25);
    java.lang.Object obj27 = treeSet4.clone();
    java2.util2.TreeSet treeSet28 = new java2.util2.TreeSet((java2.util2.Collection)treeSet4);
    java.lang.Object[] obj_array29 = treeSet4.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 0+ "'", obj16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[0]"+ "'", str19.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet24.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet24.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet24.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet28.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet28.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet28.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array29);

  }

  @Test
  public void test238() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test238"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java.lang.Object[] obj_array9 = treeSet5.toArray();
    java.lang.Object obj10 = treeSet5.first();
    java2.util2.List list13 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set14 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set15 = java2.util2.Collections.unmodifiableSet(set14);
    java2.util2.TreeSet treeSet16 = new java2.util2.TreeSet((java2.util2.Collection)set14);
    java2.util2.SortedSet sortedSet18 = treeSet16.tailSet((java.lang.Object)(short)0);
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set22 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet23 = new java2.util2.TreeSet((java2.util2.Collection)set22);
    java.lang.Object[] obj_array24 = treeSet23.toArray();
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list30 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list30);
    java2.util2.List list32 = java2.util2.Collections.unmodifiableList(list30);
    java2.util2.Collections.copy(list27, list30);
    boolean b34 = treeSet23.addAll((java2.util2.Collection)list27);
    java.lang.Object obj35 = treeSet23.first();
    java2.util2.SortedSet sortedSet37 = treeSet23.tailSet((java.lang.Object)"");
    java.lang.String str38 = treeSet23.toString();
    java2.util2.List list41 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set42 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet43 = new java2.util2.TreeSet((java2.util2.Collection)set42);
    java.lang.Object[] obj_array44 = treeSet43.toArray();
    java.lang.Object[] obj_array45 = treeSet23.toArray(obj_array44);
    java.lang.Object[] obj_array46 = treeSet16.toArray(obj_array44);
    java.lang.Object[] obj_array47 = treeSet5.toArray(obj_array44);
    java2.util2.List list50 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list53 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list53);
    java2.util2.List list55 = java2.util2.Collections.unmodifiableList(list53);
    java2.util2.Collections.copy(list50, list53);
    java2.util2.Collections.rotate(list50, 0);
    java2.util2.List list61 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list64 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list64);
    java2.util2.List list66 = java2.util2.Collections.unmodifiableList(list64);
    int i67 = java2.util2.Collections.indexOfSubList(list61, list66);
    java2.util2.List list70 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list73 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list73);
    java2.util2.List list75 = java2.util2.Collections.unmodifiableList(list73);
    java2.util2.Collections.copy(list70, list73);
    java2.util2.Collections.copy(list66, list70);
    java2.util2.List list80 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list83 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list83);
    java2.util2.List list85 = java2.util2.Collections.unmodifiableList(list83);
    java2.util2.Collections.copy(list80, list83);
    int i87 = java2.util2.Collections.indexOfSubList(list70, list83);
    java2.util2.Comparator comparator88 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list83, comparator88);
    java2.util2.Collections.sort(list50, comparator88);
    java.lang.Object obj91 = java2.util2.Collections.min((java2.util2.Collection)treeSet5, comparator88);
    java2.util2.TreeSet treeSet92 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet5);
    java2.util2.Set set93 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet92);
    java2.util2.TreeSet treeSet94 = new java2.util2.TreeSet((java2.util2.Collection)set93);
    java2.util2.Iterator iterator95 = treeSet94.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 0+ "'", obj10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet16.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet16.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet23.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet23.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet23.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + 0+ "'", obj35.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "[0]"+ "'", str38.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet43.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet43.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet43.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj91 + "' != '" + 0+ "'", obj91.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet92.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet92.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet92.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet94.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet94.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet94.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator95);

  }

  @Test
  public void test239() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test239"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet7 = treeSet5.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj8 = java2.util2.Collections.max((java2.util2.Collection)treeSet5);
    java2.util2.Set set9 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet5);
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list12);
    int i15 = java2.util2.Collections.binarySearch(list12, (java.lang.Object)(short)100);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list21);
    java2.util2.List list23 = java2.util2.Collections.unmodifiableList(list21);
    java2.util2.Collections.copy(list18, list21);
    java2.util2.Collections.rotate(list18, 0);
    java2.util2.List list29 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list32 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list32);
    java2.util2.List list34 = java2.util2.Collections.unmodifiableList(list32);
    int i35 = java2.util2.Collections.indexOfSubList(list29, list34);
    java2.util2.List list38 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list41 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list41);
    java2.util2.List list43 = java2.util2.Collections.unmodifiableList(list41);
    java2.util2.Collections.copy(list38, list41);
    java2.util2.Collections.copy(list34, list38);
    java2.util2.List list48 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list51 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list51);
    java2.util2.List list53 = java2.util2.Collections.unmodifiableList(list51);
    java2.util2.Collections.copy(list48, list51);
    int i55 = java2.util2.Collections.indexOfSubList(list38, list51);
    java2.util2.Comparator comparator56 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list51, comparator56);
    java2.util2.Collections.sort(list18, comparator56);
    java2.util2.Map map59 = java2.util2.Collections.singletonMap((java.lang.Object)list12, (java.lang.Object)list18);
    java2.util2.List list62 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list63 = java2.util2.Collections.unmodifiableList(list62);
    java2.util2.List list66 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set67 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set68 = java2.util2.Collections.unmodifiableSet(set67);
    java2.util2.TreeSet treeSet69 = new java2.util2.TreeSet((java2.util2.Collection)set67);
    java2.util2.SortedSet sortedSet71 = treeSet69.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj72 = java2.util2.Collections.max((java2.util2.Collection)treeSet69);
    java2.util2.List list75 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list78 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list78);
    java2.util2.List list80 = java2.util2.Collections.unmodifiableList(list78);
    int i81 = java2.util2.Collections.indexOfSubList(list75, list80);
    java2.util2.List list82 = java2.util2.Collections.synchronizedList(list80);
    boolean b83 = treeSet69.retainAll((java2.util2.Collection)list82);
    int i84 = java2.util2.Collections.lastIndexOfSubList(list63, list82);
    java2.util2.Collections.fill(list12, (java.lang.Object)i84);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      boolean b86 = treeSet5.remove((java.lang.Object)list12);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 0+ "'", obj8.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet69.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet69.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet69.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj72 + "' != '" + 0+ "'", obj72.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 0);

  }

  @Test
  public void test240() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test240"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    java2.util2.Collections.copy(list2, list5);
    java2.util2.Collections.sort(list2);
    java2.util2.List list10 = java2.util2.Collections.synchronizedList(list2);
    java2.util2.Collection collection11 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list2);
    java2.util2.Collections.sort(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection11);

  }

  @Test
  public void test241() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test241"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java.lang.Object[] obj_array9 = treeSet5.toArray();
    java2.util2.TreeSet treeSet10 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet5);
    java2.util2.Iterator iterator11 = treeSet5.iterator();
    int i12 = treeSet5.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet10.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);

  }

  @Test
  public void test242() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test242"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list19 = java2.util2.Collections.unmodifiableList(list18);
    java2.util2.Collections.fill(list8, (java.lang.Object)list19);
    java2.util2.Collection collection21 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list8);
    java2.util2.List list24 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set25 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set26 = java2.util2.Collections.unmodifiableSet(set25);
    java2.util2.TreeSet treeSet27 = new java2.util2.TreeSet((java2.util2.Collection)set25);
    java2.util2.SortedSet sortedSet29 = treeSet27.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj30 = treeSet27.clone();
    java2.util2.List list33 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list36 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list36);
    java2.util2.List list38 = java2.util2.Collections.unmodifiableList(list36);
    java2.util2.Collections.copy(list33, list36);
    java2.util2.Collections.rotate(list33, 0);
    java2.util2.List list44 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list47 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list47);
    java2.util2.List list49 = java2.util2.Collections.unmodifiableList(list47);
    int i50 = java2.util2.Collections.indexOfSubList(list44, list49);
    java2.util2.List list53 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list56 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list56);
    java2.util2.List list58 = java2.util2.Collections.unmodifiableList(list56);
    java2.util2.Collections.copy(list53, list56);
    java2.util2.Collections.copy(list49, list53);
    java2.util2.List list63 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list66 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list66);
    java2.util2.List list68 = java2.util2.Collections.unmodifiableList(list66);
    java2.util2.Collections.copy(list63, list66);
    int i70 = java2.util2.Collections.indexOfSubList(list53, list66);
    java2.util2.Comparator comparator71 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list66, comparator71);
    java2.util2.Collections.sort(list33, comparator71);
    int i74 = java2.util2.Collections.binarySearch(list8, (java.lang.Object)treeSet27, comparator71);
    java2.util2.TreeSet treeSet75 = new java2.util2.TreeSet(comparator71);
    java2.util2.Collection collection76 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet27.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet27.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet75.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet75.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet75.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection76);

  }

  @Test
  public void test243() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test243"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java.lang.Object obj16 = treeSet4.first();
    java2.util2.SortedSet sortedSet18 = treeSet4.tailSet((java.lang.Object)"");
    java.lang.String str19 = treeSet4.toString();
    java2.util2.List list22 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set23 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet24 = new java2.util2.TreeSet((java2.util2.Collection)set23);
    java.lang.Object[] obj_array25 = treeSet24.toArray();
    java.lang.Object[] obj_array26 = treeSet4.toArray(obj_array25);
    java.lang.Object obj27 = treeSet4.first();
    java2.util2.TreeSet treeSet28 = new java2.util2.TreeSet((java2.util2.Collection)treeSet4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 0+ "'", obj16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[0]"+ "'", str19.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet24.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet24.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet24.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + 0+ "'", obj27.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet28.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet28.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet28.toString(), "[0]");

  }

  @Test
  public void test244() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test244"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[0]");

  }

  @Test
  public void test245() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test245"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.Set set16 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet4);
    java2.util2.Set set17 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet4);
    java2.util2.Set set18 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet4);
    java2.util2.List list22 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list25 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list25);
    java2.util2.List list27 = java2.util2.Collections.unmodifiableList(list25);
    int i28 = java2.util2.Collections.indexOfSubList(list22, list27);
    java2.util2.List list29 = java2.util2.Collections.nCopies(100, (java.lang.Object)list27);
    java2.util2.List list30 = java2.util2.Collections.synchronizedList(list27);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      boolean b31 = treeSet4.contains((java.lang.Object)list27);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);

  }

  @Test
  public void test246() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test246"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list6 = java2.util2.Collections.unmodifiableList(list5);
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set10 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set11 = java2.util2.Collections.unmodifiableSet(set10);
    java2.util2.TreeSet treeSet12 = new java2.util2.TreeSet((java2.util2.Collection)set10);
    java2.util2.SortedSet sortedSet14 = treeSet12.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj15 = java2.util2.Collections.max((java2.util2.Collection)treeSet12);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list21);
    java2.util2.List list23 = java2.util2.Collections.unmodifiableList(list21);
    int i24 = java2.util2.Collections.indexOfSubList(list18, list23);
    java2.util2.List list25 = java2.util2.Collections.synchronizedList(list23);
    boolean b26 = treeSet12.retainAll((java2.util2.Collection)list25);
    int i27 = java2.util2.Collections.lastIndexOfSubList(list6, list25);
    java2.util2.Collection collection28 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list25);
    java2.util2.Collections.copy(list2, list25);
    java2.util2.Enumeration enumeration30 = java2.util2.Collections.enumeration((java2.util2.Collection)list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet12.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + 0+ "'", obj15.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration30);

  }

  @Test
  public void test247() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test247"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list3 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.List list4 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.List list7 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list7);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list14);
    java2.util2.List list16 = java2.util2.Collections.unmodifiableList(list14);
    int i17 = java2.util2.Collections.indexOfSubList(list11, list16);
    java2.util2.List list18 = java2.util2.Collections.synchronizedList(list16);
    int i19 = java2.util2.Collections.lastIndexOfSubList(list7, list16);
    java2.util2.Collection collection20 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list7);
    java2.util2.List list23 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list26 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list26);
    java2.util2.List list28 = java2.util2.Collections.unmodifiableList(list26);
    int i29 = java2.util2.Collections.indexOfSubList(list23, list28);
    java2.util2.List list32 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list35 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list35);
    java2.util2.List list37 = java2.util2.Collections.unmodifiableList(list35);
    int i38 = java2.util2.Collections.indexOfSubList(list32, list37);
    java2.util2.List list41 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list44 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list44);
    java2.util2.List list46 = java2.util2.Collections.unmodifiableList(list44);
    java2.util2.Collections.copy(list41, list44);
    java2.util2.Collections.copy(list37, list41);
    java2.util2.List list51 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list54 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list54);
    java2.util2.List list56 = java2.util2.Collections.unmodifiableList(list54);
    java2.util2.Collections.copy(list51, list54);
    int i58 = java2.util2.Collections.indexOfSubList(list41, list54);
    java2.util2.List list61 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list64 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list64);
    java2.util2.List list66 = java2.util2.Collections.unmodifiableList(list64);
    int i67 = java2.util2.Collections.indexOfSubList(list61, list66);
    java2.util2.List list70 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list73 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list73);
    java2.util2.List list75 = java2.util2.Collections.unmodifiableList(list73);
    java2.util2.Collections.copy(list70, list73);
    java2.util2.Collections.copy(list66, list70);
    java2.util2.List list80 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list83 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list83);
    java2.util2.List list85 = java2.util2.Collections.unmodifiableList(list83);
    java2.util2.Collections.copy(list80, list83);
    int i87 = java2.util2.Collections.indexOfSubList(list70, list83);
    boolean b88 = java2.util2.Collections.replaceAll(list28, (java.lang.Object)list41, (java.lang.Object)list70);
    java2.util2.List list91 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set92 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet93 = new java2.util2.TreeSet((java2.util2.Collection)set92);
    java.lang.Object[] obj_array94 = treeSet93.toArray();
    int i95 = java2.util2.Collections.binarySearch(list28, (java.lang.Object)treeSet93);
    int i96 = java2.util2.Collections.lastIndexOfSubList(list7, list28);
    int i97 = java2.util2.Collections.indexOfSubList(list2, list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet93.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet93.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet93.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i95 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i96 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i97 == 0);

  }

  @Test
  public void test248() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test248"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set4 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set5 = java2.util2.Collections.unmodifiableSet(set4);
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet((java2.util2.Collection)set4);
    java2.util2.SortedSet sortedSet8 = treeSet6.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj9 = java2.util2.Collections.max((java2.util2.Collection)treeSet6);
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set13 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet14 = new java2.util2.TreeSet((java2.util2.Collection)set13);
    java.lang.Object[] obj_array15 = treeSet14.toArray();
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list21);
    java2.util2.List list23 = java2.util2.Collections.unmodifiableList(list21);
    java2.util2.Collections.copy(list18, list21);
    boolean b25 = treeSet14.addAll((java2.util2.Collection)list18);
    java2.util2.List list28 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list29 = java2.util2.Collections.unmodifiableList(list28);
    java2.util2.Collections.fill(list18, (java.lang.Object)list29);
    boolean b31 = treeSet6.removeAll((java2.util2.Collection)list18);
    java2.util2.List list32 = java2.util2.Collections.nCopies(1, (java.lang.Object)list18);
    java2.util2.Set set34 = java2.util2.Collections.singleton((java.lang.Object)(-1.0d));
    java2.util2.List list37 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set38 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set39 = java2.util2.Collections.unmodifiableSet(set38);
    java2.util2.TreeSet treeSet40 = new java2.util2.TreeSet((java2.util2.Collection)set38);
    java.lang.Object[] obj_array42 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array43 = treeSet40.toArray(obj_array42);
    boolean b44 = java2.util2.Collections.replaceAll(list18, (java.lang.Object)set34, (java.lang.Object)treeSet40);
    java2.util2.List list47 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set48 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set49 = java2.util2.Collections.unmodifiableSet(set48);
    java2.util2.TreeSet treeSet50 = new java2.util2.TreeSet((java2.util2.Collection)set48);
    java.lang.Object[] obj_array52 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array53 = treeSet50.toArray(obj_array52);
    java.lang.Object[] obj_array54 = treeSet50.toArray();
    java2.util2.Set set55 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet50);
    java.lang.Object obj56 = treeSet50.last();
    boolean b57 = treeSet40.retainAll((java2.util2.Collection)treeSet50);
    treeSet50.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 0+ "'", obj9.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet14.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet40.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet40.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet40.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet50.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet50.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet50.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj56 + "' != '" + 0+ "'", obj56.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);

  }

  @Test
  public void test249() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test249"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.Collections.copy(list8, list11);
    boolean b15 = treeSet4.addAll((java2.util2.Collection)list8);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list19 = java2.util2.Collections.unmodifiableList(list18);
    java2.util2.Collections.fill(list8, (java.lang.Object)list19);
    java2.util2.List list21 = java2.util2.Collections.unmodifiableList(list19);
    java2.util2.List list22 = java2.util2.Collections.unmodifiableList(list19);
    java2.util2.List list25 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list25);
    java2.util2.List list27 = java2.util2.Collections.unmodifiableList(list25);
    java2.util2.Collection collection28 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list27);
    java2.util2.List list31 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set32 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet33 = new java2.util2.TreeSet((java2.util2.Collection)set32);
    java.lang.Object[] obj_array34 = treeSet33.toArray();
    java2.util2.List list37 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list40 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list40);
    java2.util2.List list42 = java2.util2.Collections.unmodifiableList(list40);
    java2.util2.Collections.copy(list37, list40);
    boolean b44 = treeSet33.addAll((java2.util2.Collection)list37);
    java2.util2.List list47 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list48 = java2.util2.Collections.unmodifiableList(list47);
    java2.util2.Collections.fill(list37, (java.lang.Object)list48);
    java2.util2.List list52 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list52);
    java2.util2.List list56 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.fill(list52, (java.lang.Object)(-1.0d));
    java2.util2.Collections.copy(list48, list52);
    java2.util2.List list61 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list64 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list64);
    java2.util2.List list66 = java2.util2.Collections.unmodifiableList(list64);
    int i67 = java2.util2.Collections.indexOfSubList(list61, list66);
    java2.util2.List list68 = java2.util2.Collections.synchronizedList(list66);
    int i69 = java2.util2.Collections.lastIndexOfSubList(list48, list68);
    int i70 = java2.util2.Collections.indexOfSubList(list27, list68);
    java2.util2.Collections.fill(list22, (java.lang.Object)list68);
    java2.util2.Collections.rotate(list68, 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet33.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet33.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet33.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);

  }

  @Test
  public void test250() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test250"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list5);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list5);
    int i8 = java2.util2.Collections.indexOfSubList(list2, list7);
    java2.util2.Enumeration enumeration9 = java2.util2.Collections.enumeration((java2.util2.Collection)list2);
    java2.util2.ArrayList arrayList10 = java2.util2.Collections.list(enumeration9);
    java2.util2.List list11 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList10);
    java2.util2.Collections.sort((java2.util2.List)arrayList10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);

  }

  @Test
  public void test251() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test251"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)1);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list9);
    java2.util2.List list11 = java2.util2.Collections.unmodifiableList(list9);
    int i12 = java2.util2.Collections.indexOfSubList(list6, list11);
    java2.util2.List list15 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list18);
    java2.util2.List list20 = java2.util2.Collections.unmodifiableList(list18);
    java2.util2.Collections.copy(list15, list18);
    java2.util2.Collections.copy(list11, list15);
    java2.util2.List list25 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list26 = java2.util2.Collections.unmodifiableList(list25);
    java2.util2.List list27 = java2.util2.Collections.unmodifiableList(list25);
    java2.util2.Collections.copy(list15, list27);
    java2.util2.Collections.reverse(list15);
    int i30 = java2.util2.Collections.lastIndexOfSubList(list2, list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);

  }

  @Test
  public void test252() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test252"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java2.util2.SortedSet sortedSet7 = treeSet5.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj8 = java2.util2.Collections.max((java2.util2.Collection)treeSet5);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list14);
    java2.util2.List list16 = java2.util2.Collections.unmodifiableList(list14);
    int i17 = java2.util2.Collections.indexOfSubList(list11, list16);
    java2.util2.List list20 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list23 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list23);
    java2.util2.List list25 = java2.util2.Collections.unmodifiableList(list23);
    java2.util2.Collections.copy(list20, list23);
    java2.util2.Collections.copy(list16, list20);
    java2.util2.List list30 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list33 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list33);
    java2.util2.List list35 = java2.util2.Collections.unmodifiableList(list33);
    java2.util2.Collections.copy(list30, list33);
    int i37 = java2.util2.Collections.indexOfSubList(list20, list33);
    boolean b38 = treeSet5.equals((java.lang.Object)list20);
    treeSet5.clear();
    java2.util2.List list42 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set43 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set44 = java2.util2.Collections.unmodifiableSet(set43);
    java2.util2.TreeSet treeSet45 = new java2.util2.TreeSet((java2.util2.Collection)set43);
    java.lang.Object[] obj_array47 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array48 = treeSet45.toArray(obj_array47);
    java.lang.Object[] obj_array49 = treeSet5.toArray(obj_array48);
    java.lang.Object obj50 = treeSet5.clone();
    java2.util2.SortedSet sortedSet51 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 0+ "'", obj8.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet45.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet45.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet45.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet51);

  }

  @Test
  public void test253() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test253"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list6);
    java2.util2.List list8 = java2.util2.Collections.unmodifiableList(list6);
    int i9 = java2.util2.Collections.indexOfSubList(list3, list8);
    java2.util2.Map map10 = java2.util2.Collections.singletonMap((java.lang.Object)0L, (java.lang.Object)list8);
    java2.util2.List list13 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set14 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet15 = new java2.util2.TreeSet((java2.util2.Collection)set14);
    java.lang.Object[] obj_array16 = treeSet15.toArray();
    java2.util2.List list19 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list22 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list22);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList(list22);
    java2.util2.Collections.copy(list19, list22);
    boolean b26 = treeSet15.addAll((java2.util2.Collection)list19);
    java2.util2.List list29 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list30 = java2.util2.Collections.unmodifiableList(list29);
    java2.util2.Collections.fill(list19, (java.lang.Object)list30);
    java2.util2.List list34 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list35 = java2.util2.Collections.unmodifiableList(list34);
    java2.util2.List list38 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list41 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list41);
    java2.util2.List list43 = java2.util2.Collections.unmodifiableList(list41);
    int i44 = java2.util2.Collections.indexOfSubList(list38, list43);
    java2.util2.List list47 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list50 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list50);
    java2.util2.List list52 = java2.util2.Collections.unmodifiableList(list50);
    java2.util2.Collections.copy(list47, list50);
    java2.util2.Collections.copy(list43, list47);
    java2.util2.List list57 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list60 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list60);
    java2.util2.List list62 = java2.util2.Collections.unmodifiableList(list60);
    java2.util2.Collections.copy(list57, list60);
    int i64 = java2.util2.Collections.indexOfSubList(list47, list60);
    java2.util2.Comparator comparator65 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list60, comparator65);
    int i67 = java2.util2.Collections.binarySearch(list30, (java.lang.Object)list34, comparator65);
    java2.util2.TreeSet treeSet68 = new java2.util2.TreeSet(comparator65);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java.lang.Object obj69 = java2.util2.Collections.max((java2.util2.Collection)list8, comparator65);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet15.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet15.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet68.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet68.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet68.toString(), "[]");

  }

  @Test
  public void test254() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test254"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list9);
    java2.util2.List list11 = java2.util2.Collections.unmodifiableList(list9);
    int i12 = java2.util2.Collections.indexOfSubList(list6, list11);
    java2.util2.List list13 = java2.util2.Collections.synchronizedList(list11);
    int i14 = java2.util2.Collections.lastIndexOfSubList(list2, list11);
    java2.util2.Collection collection15 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list2);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list21);
    java2.util2.List list23 = java2.util2.Collections.unmodifiableList(list21);
    int i24 = java2.util2.Collections.indexOfSubList(list18, list23);
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list30 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list30);
    java2.util2.List list32 = java2.util2.Collections.unmodifiableList(list30);
    int i33 = java2.util2.Collections.indexOfSubList(list27, list32);
    java2.util2.List list36 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list39 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list39);
    java2.util2.List list41 = java2.util2.Collections.unmodifiableList(list39);
    java2.util2.Collections.copy(list36, list39);
    java2.util2.Collections.copy(list32, list36);
    java2.util2.List list46 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list49 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list49);
    java2.util2.List list51 = java2.util2.Collections.unmodifiableList(list49);
    java2.util2.Collections.copy(list46, list49);
    int i53 = java2.util2.Collections.indexOfSubList(list36, list49);
    java2.util2.List list56 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list59 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list59);
    java2.util2.List list61 = java2.util2.Collections.unmodifiableList(list59);
    int i62 = java2.util2.Collections.indexOfSubList(list56, list61);
    java2.util2.List list65 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list68 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list68);
    java2.util2.List list70 = java2.util2.Collections.unmodifiableList(list68);
    java2.util2.Collections.copy(list65, list68);
    java2.util2.Collections.copy(list61, list65);
    java2.util2.List list75 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list78 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list78);
    java2.util2.List list80 = java2.util2.Collections.unmodifiableList(list78);
    java2.util2.Collections.copy(list75, list78);
    int i82 = java2.util2.Collections.indexOfSubList(list65, list78);
    boolean b83 = java2.util2.Collections.replaceAll(list23, (java.lang.Object)list36, (java.lang.Object)list65);
    java2.util2.List list86 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set87 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet88 = new java2.util2.TreeSet((java2.util2.Collection)set87);
    java.lang.Object[] obj_array89 = treeSet88.toArray();
    int i90 = java2.util2.Collections.binarySearch(list23, (java.lang.Object)treeSet88);
    int i91 = java2.util2.Collections.lastIndexOfSubList(list2, list23);
    // The following exception was thrown during execution.
    // This behavior will be recorded for regression testing.
    try {
      java2.util2.Collections.swap(list2, 10, 1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet88.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet88.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet88.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 0);

  }

  @Test
  public void test255() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test255"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet(set3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    java.lang.Object[] obj_array7 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array8 = treeSet5.toArray(obj_array7);
    java.lang.Object[] obj_array9 = treeSet5.toArray();
    java2.util2.TreeSet treeSet10 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet5);
    java2.util2.List list13 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set14 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set15 = java2.util2.Collections.unmodifiableSet(set14);
    java2.util2.TreeSet treeSet16 = new java2.util2.TreeSet((java2.util2.Collection)set14);
    java.lang.Object[] obj_array18 = new java.lang.Object[] { 1.0d };
    java.lang.Object[] obj_array19 = treeSet16.toArray(obj_array18);
    java.lang.Object[] obj_array20 = treeSet16.toArray();
    java.lang.Object[] obj_array21 = treeSet10.toArray(obj_array20);
    java2.util2.List list24 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set25 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set26 = java2.util2.Collections.unmodifiableSet(set25);
    java2.util2.TreeSet treeSet27 = new java2.util2.TreeSet((java2.util2.Collection)set25);
    java2.util2.SortedSet sortedSet29 = treeSet27.tailSet((java.lang.Object)(short)0);
    java.lang.Object obj30 = java2.util2.Collections.max((java2.util2.Collection)treeSet27);
    java2.util2.List list33 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list36 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list36);
    java2.util2.List list38 = java2.util2.Collections.unmodifiableList(list36);
    int i39 = java2.util2.Collections.indexOfSubList(list33, list38);
    java2.util2.List list40 = java2.util2.Collections.synchronizedList(list38);
    boolean b41 = treeSet27.retainAll((java2.util2.Collection)list40);
    java2.util2.Comparator comparator42 = treeSet27.comparator();
    java2.util2.List list45 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set46 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.TreeSet treeSet47 = new java2.util2.TreeSet((java2.util2.Collection)set46);
    java.lang.Object[] obj_array48 = treeSet47.toArray();
    java2.util2.List list51 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list54 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list54);
    java2.util2.List list56 = java2.util2.Collections.unmodifiableList(list54);
    java2.util2.Collections.copy(list51, list54);
    boolean b58 = treeSet47.addAll((java2.util2.Collection)list51);
    java2.util2.Set set59 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet47);
    java2.util2.TreeSet treeSet60 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet47);
    java2.util2.TreeSet treeSet61 = new java2.util2.TreeSet((java2.util2.Collection)treeSet47);
    boolean b62 = treeSet27.add((java.lang.Object)treeSet47);
    boolean b63 = treeSet10.addAll((java2.util2.Collection)treeSet47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet10.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet16.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet16.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet27.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet27.toString(), "[[0]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj30 + "' != '" + 0+ "'", obj30.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet47.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet47.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet47.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet60.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet60.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet60.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet61.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet61.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet61.toString(), "[0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);

  }

}
