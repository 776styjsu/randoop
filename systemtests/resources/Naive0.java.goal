package foo.bar;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class Naive0 {

  public static boolean debug = false;

  @Test
  public void test001() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test001"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();

  }

  @Test
  public void test002() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test002"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);

  }

  @Test
  public void test003() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test003"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    int i3 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList1, (java2.util2.List)linkedList2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);

  }

  @Test
  public void test004() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test004"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    int i3 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList1, (java2.util2.List)linkedList2);
    java.lang.Byte byte4 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)linkedList2, (java.lang.Object)byte4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);

  }

  @Test
  public void test005() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test005"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    int i3 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList1, (java2.util2.List)linkedList2);
    java2.util2.Collections.shuffle((java2.util2.List)linkedList2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);

  }

  @Test
  public void test006() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test006"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    int i2 = linkedList1.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);

  }

  @Test
  public void test007() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test007"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java.lang.Double d1 = new java.lang.Double(1.0d);
    int i2 = linkedList0.indexOf((java.lang.Object)d1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));

  }

  @Test
  public void test008() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test008"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    int i3 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList1, (java2.util2.List)linkedList2);
    java.lang.Byte byte4 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)linkedList2, (java.lang.Object)byte4);
    java2.util2.Iterator iterator6 = linkedList2.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);

  }

  @Test
  public void test009() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test009"); }


    java.lang.Byte byte0 = new java.lang.Byte((byte)(-1));
    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)byte0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);

  }

  @Test
  public void test010() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test010"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj1 = linkedList0.removeLast();
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }

  }

  @Test
  public void test011() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test011"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java.lang.String str2 = "";
    java.lang.Object[] obj_array3 = new java.lang.Object[] { str2};
    java.lang.Object[] obj_array4 = linkedList0.toArray(obj_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array4);

  }

  @Test
  public void test012() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test012"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    int i3 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList1, (java2.util2.List)linkedList2);
    java2.util2.Collections.shuffle((java2.util2.List)linkedList2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj5 = linkedList2.removeLast();
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);

  }

  @Test
  public void test013() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test013"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    int i3 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList1, (java2.util2.List)linkedList2);
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList5 = new java2.util2.LinkedList((java2.util2.Collection)linkedList4);
    java2.util2.LinkedList linkedList6 = new java2.util2.LinkedList();
    int i7 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList5, (java2.util2.List)linkedList6);
    java.lang.Byte byte8 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)linkedList6, (java.lang.Object)byte8);
    boolean b10 = linkedList1.removeAll((java2.util2.Collection)linkedList6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test014() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test014"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java2.util2.Iterator iterator2 = linkedList1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator2);

  }

  @Test
  public void test015() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test015"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    int i3 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList1, (java2.util2.List)linkedList2);
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList5 = new java2.util2.LinkedList((java2.util2.Collection)linkedList4);
    java2.util2.Collections.copy((java2.util2.List)linkedList1, (java2.util2.List)linkedList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);

  }

  @Test
  public void test016() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test016"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    int i3 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList1, (java2.util2.List)linkedList2);
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList5 = new java2.util2.LinkedList((java2.util2.Collection)linkedList4);
    java2.util2.LinkedList linkedList6 = new java2.util2.LinkedList();
    int i7 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList5, (java2.util2.List)linkedList6);
    java2.util2.LinkedList linkedList8 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList9 = new java2.util2.LinkedList((java2.util2.Collection)linkedList8);
    java2.util2.Collections.copy((java2.util2.List)linkedList5, (java2.util2.List)linkedList9);
    java2.util2.Collections.copy((java2.util2.List)linkedList1, (java2.util2.List)linkedList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);

  }

  @Test
  public void test017() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test017"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    int i3 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList1, (java2.util2.List)linkedList2);
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList5 = new java2.util2.LinkedList((java2.util2.Collection)linkedList4);
    java2.util2.LinkedList linkedList6 = new java2.util2.LinkedList();
    int i7 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList5, (java2.util2.List)linkedList6);
    java2.util2.LinkedList linkedList8 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList9 = new java2.util2.LinkedList((java2.util2.Collection)linkedList8);
    java2.util2.Collections.copy((java2.util2.List)linkedList5, (java2.util2.List)linkedList9);
    java2.util2.Collections.copy((java2.util2.List)linkedList1, (java2.util2.List)linkedList5);
    java2.util2.List list12 = java2.util2.Collections.singletonList((java.lang.Object)linkedList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);

  }

  @Test
  public void test018() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test018"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    int i3 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList1, (java2.util2.List)linkedList2);
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList5 = new java2.util2.LinkedList((java2.util2.Collection)linkedList4);
    java.lang.String str6 = "";
    java.lang.Object[] obj_array7 = new java.lang.Object[] { str6};
    java.lang.Object[] obj_array8 = linkedList4.toArray(obj_array7);
    int i9 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList2, (java2.util2.List)linkedList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);

  }

  @Test
  public void test019() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test019"); }


    java.lang.Short s0 = new java.lang.Short((short)1);
    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)s0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);

  }

  @Test
  public void test020() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test020"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java2.util2.Iterator iterator2 = linkedList1.iterator();
    java2.util2.Collections.sort((java2.util2.List)linkedList1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator2);

  }

  @Test
  public void test021() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test021"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    int i3 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList1, (java2.util2.List)linkedList2);
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList5 = new java2.util2.LinkedList((java2.util2.Collection)linkedList4);
    java2.util2.LinkedList linkedList6 = new java2.util2.LinkedList();
    int i7 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList5, (java2.util2.List)linkedList6);
    java.lang.Byte byte8 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)linkedList6, (java.lang.Object)byte8);
    boolean b10 = linkedList1.removeAll((java2.util2.Collection)linkedList6);
    java2.util2.LinkedList linkedList11 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList12 = new java2.util2.LinkedList((java2.util2.Collection)linkedList11);
    java2.util2.Iterator iterator13 = linkedList12.iterator();
    java2.util2.Collections.sort((java2.util2.List)linkedList12);
    boolean b15 = linkedList6.removeAll((java2.util2.Collection)linkedList12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test022() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test022"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    int i3 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList1, (java2.util2.List)linkedList2);
    java.lang.Byte byte4 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)linkedList2, (java.lang.Object)byte4);
    java.lang.Integer i6 = new java.lang.Integer(1);
    java2.util2.Collections.rotate((java2.util2.List)linkedList2, (int)i6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);

  }

  @Test
  public void test023() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test023"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    int i3 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList1, (java2.util2.List)linkedList2);
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList5 = new java2.util2.LinkedList((java2.util2.Collection)linkedList4);
    java2.util2.LinkedList linkedList6 = new java2.util2.LinkedList();
    int i7 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList5, (java2.util2.List)linkedList6);
    java.lang.Byte byte8 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)linkedList6, (java.lang.Object)byte8);
    boolean b10 = linkedList1.removeAll((java2.util2.Collection)linkedList6);
    java2.util2.LinkedList linkedList11 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList12 = new java2.util2.LinkedList((java2.util2.Collection)linkedList11);
    java2.util2.Iterator iterator13 = linkedList12.iterator();
    java2.util2.Collections.sort((java2.util2.List)linkedList12);
    boolean b15 = linkedList6.removeAll((java2.util2.Collection)linkedList12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj16 = linkedList6.getFirst();
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test024() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test024"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    int i3 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList1, (java2.util2.List)linkedList2);
    java.lang.Byte byte4 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)linkedList2, (java.lang.Object)byte4);
    java2.util2.Iterator iterator6 = linkedList2.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);

  }

  @Test
  public void test025() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test025"); }


    java.lang.Integer i0 = new java.lang.Integer(0);
    java2.util2.ArrayList arrayList1 = new java2.util2.ArrayList(i0);

  }

  @Test
  public void test026() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test026"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    int i3 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList1, (java2.util2.List)linkedList2);
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList5 = new java2.util2.LinkedList((java2.util2.Collection)linkedList4);
    java2.util2.Collections.copy((java2.util2.List)linkedList1, (java2.util2.List)linkedList5);
    java2.util2.LinkedList linkedList7 = new java2.util2.LinkedList();
    boolean b8 = linkedList1.removeAll((java2.util2.Collection)linkedList7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test027() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test027"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    int i3 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList1, (java2.util2.List)linkedList2);
    java2.util2.Collections.shuffle((java2.util2.List)linkedList2);
    java2.util2.LinkedList linkedList5 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList6 = new java2.util2.LinkedList((java2.util2.Collection)linkedList5);
    int i7 = java2.util2.Collections.binarySearch((java2.util2.List)linkedList2, (java.lang.Object)linkedList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test028() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test028"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    int i3 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList1, (java2.util2.List)linkedList2);
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList5 = new java2.util2.LinkedList((java2.util2.Collection)linkedList4);
    java2.util2.Collections.copy((java2.util2.List)linkedList1, (java2.util2.List)linkedList5);
    java2.util2.LinkedList linkedList7 = new java2.util2.LinkedList();
    boolean b8 = linkedList1.removeAll((java2.util2.Collection)linkedList7);
    java.lang.Integer i9 = new java.lang.Integer(1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.ListIterator listIterator10 = linkedList7.listIterator((int)i9);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test029() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test029"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    int i3 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList1, (java2.util2.List)linkedList2);
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList5 = new java2.util2.LinkedList((java2.util2.Collection)linkedList4);
    java2.util2.LinkedList linkedList6 = new java2.util2.LinkedList();
    int i7 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList5, (java2.util2.List)linkedList6);
    java.lang.Byte byte8 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)linkedList6, (java.lang.Object)byte8);
    boolean b10 = linkedList1.removeAll((java2.util2.Collection)linkedList6);
    java2.util2.LinkedList linkedList11 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList12 = new java2.util2.LinkedList((java2.util2.Collection)linkedList11);
    java2.util2.Iterator iterator13 = linkedList12.iterator();
    java2.util2.Collections.sort((java2.util2.List)linkedList12);
    boolean b15 = linkedList6.removeAll((java2.util2.Collection)linkedList12);
    java2.util2.LinkedList linkedList16 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList17 = new java2.util2.LinkedList((java2.util2.Collection)linkedList16);
    java2.util2.LinkedList linkedList18 = new java2.util2.LinkedList();
    int i19 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList17, (java2.util2.List)linkedList18);
    java2.util2.LinkedList linkedList20 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList21 = new java2.util2.LinkedList((java2.util2.Collection)linkedList20);
    java2.util2.LinkedList linkedList22 = new java2.util2.LinkedList();
    int i23 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList21, (java2.util2.List)linkedList22);
    java2.util2.LinkedList linkedList24 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList25 = new java2.util2.LinkedList((java2.util2.Collection)linkedList24);
    java2.util2.Collections.copy((java2.util2.List)linkedList21, (java2.util2.List)linkedList25);
    java2.util2.Collections.copy((java2.util2.List)linkedList17, (java2.util2.List)linkedList21);
    java2.util2.List list28 = java2.util2.Collections.singletonList((java.lang.Object)linkedList21);
    boolean b29 = linkedList12.containsAll((java2.util2.Collection)linkedList21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);

  }

  @Test
  public void test030() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test030"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java.lang.Double d1 = new java.lang.Double(1.0d);
    int i2 = linkedList0.indexOf((java.lang.Object)d1);
    java.lang.Integer i3 = new java.lang.Integer(100);
    java.lang.Integer i4 = new java.lang.Integer(1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.List list5 = linkedList0.subList((int)i3, (int)i4);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));

  }

  @Test
  public void test031() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test031"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    int i3 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList1, (java2.util2.List)linkedList2);
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList5 = new java2.util2.LinkedList((java2.util2.Collection)linkedList4);
    java2.util2.LinkedList linkedList6 = new java2.util2.LinkedList();
    int i7 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList5, (java2.util2.List)linkedList6);
    java.lang.Byte byte8 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)linkedList6, (java.lang.Object)byte8);
    boolean b10 = linkedList1.removeAll((java2.util2.Collection)linkedList6);
    java2.util2.LinkedList linkedList11 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList12 = new java2.util2.LinkedList((java2.util2.Collection)linkedList11);
    java2.util2.Iterator iterator13 = linkedList12.iterator();
    java2.util2.Collections.sort((java2.util2.List)linkedList12);
    boolean b15 = linkedList6.removeAll((java2.util2.Collection)linkedList12);
    java.lang.String str16 = linkedList6.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[]"+ "'", str16.equals("[]"));

  }

  @Test
  public void test032() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test032"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    int i3 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList1, (java2.util2.List)linkedList2);
    java.lang.Byte byte4 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)linkedList2, (java.lang.Object)byte4);
    java2.util2.Iterator iterator6 = linkedList2.iterator();
    java.lang.Integer i7 = new java.lang.Integer((-1));
    java.lang.Double d8 = new java.lang.Double((-1.0d));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj9 = linkedList2.set((int)i7, (java.lang.Object)d8);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);

  }

  @Test
  public void test033() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test033"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    int i3 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList1, (java2.util2.List)linkedList2);
    java2.util2.Collections.shuffle((java2.util2.List)linkedList2);
    java.lang.Object[] obj_array5 = linkedList2.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);

  }

  @Test
  public void test034() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test034"); }


    java.lang.Integer i0 = new java.lang.Integer(0);
    java2.util2.ArrayList arrayList1 = new java2.util2.ArrayList(i0);
    arrayList1.trimToSize();

  }

  @Test
  public void test035() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test035"); }


    java.lang.Integer i0 = new java.lang.Integer(0);
    java2.util2.ArrayList arrayList1 = new java2.util2.ArrayList(i0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList3 = new java2.util2.LinkedList((java2.util2.Collection)linkedList2);
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList();
    int i5 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList3, (java2.util2.List)linkedList4);
    java2.util2.Collections.shuffle((java2.util2.List)linkedList4);
    java.lang.Object[] obj_array7 = linkedList4.toArray();
    boolean b8 = arrayList1.add((java.lang.Object)linkedList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test036() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test036"); }


    java.lang.Integer i0 = new java.lang.Integer(0);
    java2.util2.ArrayList arrayList1 = new java2.util2.ArrayList(i0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList3 = new java2.util2.LinkedList((java2.util2.Collection)linkedList2);
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList();
    int i5 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList3, (java2.util2.List)linkedList4);
    java2.util2.Collections.shuffle((java2.util2.List)linkedList4);
    java.lang.Object[] obj_array7 = linkedList4.toArray();
    boolean b8 = arrayList1.add((java.lang.Object)linkedList4);
    java.lang.Integer i9 = new java.lang.Integer((-1));
    arrayList1.ensureCapacity((int)i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test037() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test037"); }


    java.lang.Integer i0 = new java.lang.Integer(0);
    java2.util2.ArrayList arrayList1 = new java2.util2.ArrayList(i0);
    java.lang.Integer i2 = new java.lang.Integer(10);
    java2.util2.LinkedList linkedList3 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList((java2.util2.Collection)linkedList3);
    java2.util2.LinkedList linkedList5 = new java2.util2.LinkedList();
    int i6 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList4, (java2.util2.List)linkedList5);
    java.lang.Byte byte7 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)linkedList5, (java.lang.Object)byte7);
    java2.util2.Iterator iterator9 = linkedList5.iterator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b10 = arrayList1.addAll((int)i2, (java2.util2.Collection)linkedList5);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator9);

  }

  @Test
  public void test038() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test038"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    int i3 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList1, (java2.util2.List)linkedList2);
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList5 = new java2.util2.LinkedList((java2.util2.Collection)linkedList4);
    java2.util2.LinkedList linkedList6 = new java2.util2.LinkedList();
    int i7 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList5, (java2.util2.List)linkedList6);
    java.lang.Byte byte8 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)linkedList6, (java.lang.Object)byte8);
    boolean b10 = linkedList1.removeAll((java2.util2.Collection)linkedList6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj11 = linkedList1.getFirst();
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test039() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test039"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    int i3 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList1, (java2.util2.List)linkedList2);
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList5 = new java2.util2.LinkedList((java2.util2.Collection)linkedList4);
    java2.util2.LinkedList linkedList6 = new java2.util2.LinkedList();
    int i7 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList5, (java2.util2.List)linkedList6);
    java2.util2.LinkedList linkedList8 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList9 = new java2.util2.LinkedList((java2.util2.Collection)linkedList8);
    java2.util2.Collections.copy((java2.util2.List)linkedList5, (java2.util2.List)linkedList9);
    java2.util2.Collections.copy((java2.util2.List)linkedList1, (java2.util2.List)linkedList5);
    java2.util2.LinkedList linkedList12 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList13 = new java2.util2.LinkedList((java2.util2.Collection)linkedList12);
    java2.util2.LinkedList linkedList14 = new java2.util2.LinkedList();
    int i15 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList13, (java2.util2.List)linkedList14);
    java2.util2.LinkedList linkedList16 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList17 = new java2.util2.LinkedList((java2.util2.Collection)linkedList16);
    java2.util2.LinkedList linkedList18 = new java2.util2.LinkedList();
    int i19 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList17, (java2.util2.List)linkedList18);
    java.lang.Byte byte20 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)linkedList18, (java.lang.Object)byte20);
    boolean b22 = linkedList13.removeAll((java2.util2.Collection)linkedList18);
    java2.util2.LinkedList linkedList23 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList24 = new java2.util2.LinkedList((java2.util2.Collection)linkedList23);
    java2.util2.Iterator iterator25 = linkedList24.iterator();
    java2.util2.Collections.sort((java2.util2.List)linkedList24);
    boolean b27 = linkedList18.removeAll((java2.util2.Collection)linkedList24);
    java.lang.String str28 = linkedList18.toString();
    int i29 = linkedList1.lastIndexOf((java.lang.Object)linkedList18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "[]"+ "'", str28.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == (-1));

  }

  @Test
  public void test040() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test040"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    int i3 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList1, (java2.util2.List)linkedList2);
    java2.util2.Collections.shuffle((java2.util2.List)linkedList2);
    java.lang.Object[] obj_array5 = linkedList2.toArray();
    java2.util2.Collection collection6 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)linkedList2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection6);

  }

  @Test
  public void test041() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test041"); }


    java.lang.Integer i0 = new java.lang.Integer(10);
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList((java2.util2.Collection)linkedList1);
    java2.util2.LinkedList linkedList3 = new java2.util2.LinkedList();
    int i4 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList2, (java2.util2.List)linkedList3);
    java2.util2.LinkedList linkedList5 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList6 = new java2.util2.LinkedList((java2.util2.Collection)linkedList5);
    java2.util2.Collections.copy((java2.util2.List)linkedList2, (java2.util2.List)linkedList6);
    java2.util2.List list8 = java2.util2.Collections.nCopies((int)i0, (java.lang.Object)linkedList6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);

  }

  @Test
  public void test042() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test042"); }


    java.lang.Integer i0 = new java.lang.Integer(10);
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList((java2.util2.Collection)linkedList1);
    java2.util2.LinkedList linkedList3 = new java2.util2.LinkedList();
    int i4 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList2, (java2.util2.List)linkedList3);
    java2.util2.LinkedList linkedList5 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList6 = new java2.util2.LinkedList((java2.util2.Collection)linkedList5);
    java2.util2.Collections.copy((java2.util2.List)linkedList2, (java2.util2.List)linkedList6);
    java2.util2.List list8 = java2.util2.Collections.nCopies((int)i0, (java.lang.Object)linkedList6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj9 = linkedList6.removeLast();
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);

  }

  @Test
  public void test043() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test043"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    int i2 = linkedList1.size();
    java.lang.Short s3 = new java.lang.Short((short)100);
    int i4 = linkedList1.indexOf((java.lang.Object)s3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test044() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test044"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java.lang.String str2 = "";
    java.lang.Object[] obj_array3 = new java.lang.Object[] { str2};
    java.lang.Object[] obj_array4 = linkedList0.toArray(obj_array3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj5 = linkedList0.getLast();
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array4);

  }

  @Test
  public void test045() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test045"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj2 = linkedList0.getFirst();
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }

  }

  @Test
  public void test046() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test046"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    int i3 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList1, (java2.util2.List)linkedList2);
    java2.util2.Collections.shuffle((java2.util2.List)linkedList2);
    java2.util2.LinkedList linkedList5 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList6 = new java2.util2.LinkedList((java2.util2.Collection)linkedList5);
    java.lang.String str7 = "";
    java.lang.Object[] obj_array8 = new java.lang.Object[] { str7};
    java.lang.Object[] obj_array9 = linkedList5.toArray(obj_array8);
    java.lang.Object[] obj_array10 = linkedList2.toArray(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array10);

  }

  @Test
  public void test047() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test047"); }


    java.lang.Integer i0 = new java.lang.Integer(0);
    java2.util2.ArrayList arrayList1 = new java2.util2.ArrayList(i0);
    java.lang.Integer i2 = new java.lang.Integer((-1));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj3 = arrayList1.remove((int)i2);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  @Test
  public void test048() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test048"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    int i3 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList1, (java2.util2.List)linkedList2);
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList5 = new java2.util2.LinkedList((java2.util2.Collection)linkedList4);
    java2.util2.LinkedList linkedList6 = new java2.util2.LinkedList();
    int i7 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList5, (java2.util2.List)linkedList6);
    java2.util2.LinkedList linkedList8 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList9 = new java2.util2.LinkedList((java2.util2.Collection)linkedList8);
    java2.util2.Collections.copy((java2.util2.List)linkedList5, (java2.util2.List)linkedList9);
    java2.util2.Collections.copy((java2.util2.List)linkedList1, (java2.util2.List)linkedList5);
    java2.util2.LinkedList linkedList12 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList13 = new java2.util2.LinkedList((java2.util2.Collection)linkedList12);
    java2.util2.Iterator iterator14 = linkedList13.iterator();
    java2.util2.Collections.sort((java2.util2.List)linkedList13);
    java2.util2.Map map16 = java2.util2.Collections.singletonMap((java.lang.Object)linkedList5, (java.lang.Object)linkedList13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map16);

  }

  @Test
  public void test049() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test049"); }


    java.lang.Integer i0 = new java.lang.Integer(0);
    java2.util2.ArrayList arrayList1 = new java2.util2.ArrayList(i0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList3 = new java2.util2.LinkedList((java2.util2.Collection)linkedList2);
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList();
    int i5 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList3, (java2.util2.List)linkedList4);
    java2.util2.Collections.shuffle((java2.util2.List)linkedList4);
    java.lang.Object[] obj_array7 = linkedList4.toArray();
    boolean b8 = arrayList1.add((java.lang.Object)linkedList4);
    java.lang.Integer i9 = new java.lang.Integer((-1));
    arrayList1.ensureCapacity((int)i9);
    java.lang.Integer i11 = new java.lang.Integer(0);
    java2.util2.LinkedList linkedList12 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList13 = new java2.util2.LinkedList((java2.util2.Collection)linkedList12);
    java2.util2.LinkedList linkedList14 = new java2.util2.LinkedList();
    int i15 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList13, (java2.util2.List)linkedList14);
    java2.util2.LinkedList linkedList16 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList17 = new java2.util2.LinkedList((java2.util2.Collection)linkedList16);
    java2.util2.LinkedList linkedList18 = new java2.util2.LinkedList();
    int i19 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList17, (java2.util2.List)linkedList18);
    java2.util2.LinkedList linkedList20 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList21 = new java2.util2.LinkedList((java2.util2.Collection)linkedList20);
    java2.util2.Collections.copy((java2.util2.List)linkedList17, (java2.util2.List)linkedList21);
    java2.util2.Collections.copy((java2.util2.List)linkedList13, (java2.util2.List)linkedList17);
    java2.util2.LinkedList linkedList24 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList25 = new java2.util2.LinkedList((java2.util2.Collection)linkedList24);
    java2.util2.Iterator iterator26 = linkedList25.iterator();
    java2.util2.Collections.sort((java2.util2.List)linkedList25);
    java2.util2.Map map28 = java2.util2.Collections.singletonMap((java.lang.Object)linkedList17, (java.lang.Object)linkedList25);
    boolean b29 = arrayList1.addAll((int)i11, (java2.util2.Collection)linkedList25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);

  }

  @Test
  public void test050() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test050"); }


    java.lang.Integer i0 = new java.lang.Integer(0);
    java2.util2.ArrayList arrayList1 = new java2.util2.ArrayList(i0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList3 = new java2.util2.LinkedList((java2.util2.Collection)linkedList2);
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList();
    int i5 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList3, (java2.util2.List)linkedList4);
    java2.util2.Collections.shuffle((java2.util2.List)linkedList4);
    java.lang.Object[] obj_array7 = linkedList4.toArray();
    boolean b8 = arrayList1.add((java.lang.Object)linkedList4);
    java.lang.Integer i9 = new java.lang.Integer((-1));
    arrayList1.ensureCapacity((int)i9);
    java.lang.Integer i11 = new java.lang.Integer(1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj12 = arrayList1.remove((int)i11);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test051() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test051"); }


    java.lang.Integer i0 = new java.lang.Integer(10);
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList((java2.util2.Collection)linkedList1);
    java2.util2.LinkedList linkedList3 = new java2.util2.LinkedList();
    int i4 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList2, (java2.util2.List)linkedList3);
    java2.util2.LinkedList linkedList5 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList6 = new java2.util2.LinkedList((java2.util2.Collection)linkedList5);
    java2.util2.Collections.copy((java2.util2.List)linkedList2, (java2.util2.List)linkedList6);
    java2.util2.List list8 = java2.util2.Collections.nCopies((int)i0, (java.lang.Object)linkedList6);
    java2.util2.LinkedList linkedList9 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList10 = new java2.util2.LinkedList((java2.util2.Collection)linkedList9);
    java2.util2.LinkedList linkedList11 = new java2.util2.LinkedList();
    int i12 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList10, (java2.util2.List)linkedList11);
    java2.util2.Collections.shuffle((java2.util2.List)linkedList11);
    java2.util2.LinkedList linkedList14 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList15 = new java2.util2.LinkedList((java2.util2.Collection)linkedList14);
    java.lang.String str16 = "";
    java.lang.Object[] obj_array17 = new java.lang.Object[] { str16};
    java.lang.Object[] obj_array18 = linkedList14.toArray(obj_array17);
    java.lang.Object[] obj_array19 = linkedList11.toArray(obj_array17);
    java.lang.Object[] obj_array20 = linkedList6.toArray(obj_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array20);

  }

  @Test
  public void test052() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test052"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();

  }

  @Test
  public void test053() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test053"); }


    java.lang.Integer i0 = new java.lang.Integer(0);
    java2.util2.ArrayList arrayList1 = new java2.util2.ArrayList(i0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList3 = new java2.util2.LinkedList((java2.util2.Collection)linkedList2);
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList();
    int i5 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList3, (java2.util2.List)linkedList4);
    java2.util2.Collections.shuffle((java2.util2.List)linkedList4);
    java.lang.Object[] obj_array7 = linkedList4.toArray();
    boolean b8 = arrayList1.add((java.lang.Object)linkedList4);
    java.lang.Integer i9 = new java.lang.Integer((-1));
    arrayList1.ensureCapacity((int)i9);
    java.lang.Integer i11 = new java.lang.Integer(0);
    java2.util2.LinkedList linkedList12 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList13 = new java2.util2.LinkedList((java2.util2.Collection)linkedList12);
    java2.util2.LinkedList linkedList14 = new java2.util2.LinkedList();
    int i15 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList13, (java2.util2.List)linkedList14);
    java2.util2.LinkedList linkedList16 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList17 = new java2.util2.LinkedList((java2.util2.Collection)linkedList16);
    java2.util2.LinkedList linkedList18 = new java2.util2.LinkedList();
    int i19 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList17, (java2.util2.List)linkedList18);
    java2.util2.LinkedList linkedList20 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList21 = new java2.util2.LinkedList((java2.util2.Collection)linkedList20);
    java2.util2.Collections.copy((java2.util2.List)linkedList17, (java2.util2.List)linkedList21);
    java2.util2.Collections.copy((java2.util2.List)linkedList13, (java2.util2.List)linkedList17);
    java2.util2.LinkedList linkedList24 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList25 = new java2.util2.LinkedList((java2.util2.Collection)linkedList24);
    java2.util2.Iterator iterator26 = linkedList25.iterator();
    java2.util2.Collections.sort((java2.util2.List)linkedList25);
    java2.util2.Map map28 = java2.util2.Collections.singletonMap((java.lang.Object)linkedList17, (java.lang.Object)linkedList25);
    boolean b29 = arrayList1.addAll((int)i11, (java2.util2.Collection)linkedList25);
    java.lang.Integer i30 = new java.lang.Integer(100);
    java2.util2.LinkedList linkedList31 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList32 = new java2.util2.LinkedList((java2.util2.Collection)linkedList31);
    java2.util2.LinkedList linkedList33 = new java2.util2.LinkedList();
    int i34 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList32, (java2.util2.List)linkedList33);
    java2.util2.Collections.shuffle((java2.util2.List)linkedList33);
    java.lang.Object[] obj_array36 = linkedList33.toArray();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b37 = arrayList1.addAll((int)i30, (java2.util2.Collection)linkedList33);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array36);

  }

  @Test
  public void test054() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test054"); }


    java.lang.Integer i0 = new java.lang.Integer(0);
    java2.util2.ArrayList arrayList1 = new java2.util2.ArrayList(i0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList3 = new java2.util2.LinkedList((java2.util2.Collection)linkedList2);
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList();
    int i5 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList3, (java2.util2.List)linkedList4);
    java2.util2.Collections.shuffle((java2.util2.List)linkedList4);
    java.lang.Object[] obj_array7 = linkedList4.toArray();
    boolean b8 = arrayList1.add((java.lang.Object)linkedList4);
    java.lang.Integer i9 = new java.lang.Integer(100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.ListIterator listIterator10 = linkedList4.listIterator((int)i9);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test055() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test055"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    int i3 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList1, (java2.util2.List)linkedList2);
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList5 = new java2.util2.LinkedList((java2.util2.Collection)linkedList4);
    java2.util2.Iterator iterator6 = linkedList5.iterator();
    java2.util2.Collections.sort((java2.util2.List)linkedList5);
    boolean b8 = linkedList2.equals((java.lang.Object)linkedList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test056() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test056"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    int i3 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList1, (java2.util2.List)linkedList2);
    java.lang.Byte byte4 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)linkedList2, (java.lang.Object)byte4);
    java2.util2.Iterator iterator6 = linkedList2.iterator();
    java.lang.Integer i7 = new java.lang.Integer(0);
    boolean b8 = linkedList2.add((java.lang.Object)i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test057() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test057"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    int i3 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList1, (java2.util2.List)linkedList2);
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList5 = new java2.util2.LinkedList((java2.util2.Collection)linkedList4);
    java2.util2.LinkedList linkedList6 = new java2.util2.LinkedList();
    int i7 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList5, (java2.util2.List)linkedList6);
    java2.util2.LinkedList linkedList8 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList9 = new java2.util2.LinkedList((java2.util2.Collection)linkedList8);
    java2.util2.Collections.copy((java2.util2.List)linkedList5, (java2.util2.List)linkedList9);
    java2.util2.Collections.copy((java2.util2.List)linkedList1, (java2.util2.List)linkedList5);
    linkedList5.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);

  }

  @Test
  public void test058() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test058"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    int i3 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList1, (java2.util2.List)linkedList2);
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList5 = new java2.util2.LinkedList((java2.util2.Collection)linkedList4);
    java2.util2.LinkedList linkedList6 = new java2.util2.LinkedList();
    int i7 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList5, (java2.util2.List)linkedList6);
    java2.util2.LinkedList linkedList8 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList9 = new java2.util2.LinkedList((java2.util2.Collection)linkedList8);
    java2.util2.Collections.copy((java2.util2.List)linkedList5, (java2.util2.List)linkedList9);
    java2.util2.Collections.copy((java2.util2.List)linkedList1, (java2.util2.List)linkedList5);
    java2.util2.LinkedList linkedList12 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList13 = new java2.util2.LinkedList((java2.util2.Collection)linkedList12);
    java2.util2.Iterator iterator14 = linkedList13.iterator();
    java2.util2.Collections.sort((java2.util2.List)linkedList13);
    java2.util2.Map map16 = java2.util2.Collections.singletonMap((java.lang.Object)linkedList5, (java.lang.Object)linkedList13);
    java.lang.Integer i17 = new java.lang.Integer(0);
    java2.util2.ArrayList arrayList18 = new java2.util2.ArrayList(i17);
    java2.util2.LinkedList linkedList19 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList20 = new java2.util2.LinkedList((java2.util2.Collection)linkedList19);
    java2.util2.LinkedList linkedList21 = new java2.util2.LinkedList();
    int i22 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList20, (java2.util2.List)linkedList21);
    java2.util2.Collections.shuffle((java2.util2.List)linkedList21);
    java.lang.Object[] obj_array24 = linkedList21.toArray();
    boolean b25 = arrayList18.add((java.lang.Object)linkedList21);
    java.lang.Integer i26 = new java.lang.Integer((-1));
    arrayList18.ensureCapacity((int)i26);
    java.lang.Integer i28 = new java.lang.Integer(0);
    java2.util2.LinkedList linkedList29 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList30 = new java2.util2.LinkedList((java2.util2.Collection)linkedList29);
    java2.util2.LinkedList linkedList31 = new java2.util2.LinkedList();
    int i32 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList30, (java2.util2.List)linkedList31);
    java2.util2.LinkedList linkedList33 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList34 = new java2.util2.LinkedList((java2.util2.Collection)linkedList33);
    java2.util2.LinkedList linkedList35 = new java2.util2.LinkedList();
    int i36 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList34, (java2.util2.List)linkedList35);
    java2.util2.LinkedList linkedList37 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList38 = new java2.util2.LinkedList((java2.util2.Collection)linkedList37);
    java2.util2.Collections.copy((java2.util2.List)linkedList34, (java2.util2.List)linkedList38);
    java2.util2.Collections.copy((java2.util2.List)linkedList30, (java2.util2.List)linkedList34);
    java2.util2.LinkedList linkedList41 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList42 = new java2.util2.LinkedList((java2.util2.Collection)linkedList41);
    java2.util2.Iterator iterator43 = linkedList42.iterator();
    java2.util2.Collections.sort((java2.util2.List)linkedList42);
    java2.util2.Map map45 = java2.util2.Collections.singletonMap((java.lang.Object)linkedList34, (java.lang.Object)linkedList42);
    boolean b46 = arrayList18.addAll((int)i28, (java2.util2.Collection)linkedList42);
    linkedList13.addFirst((java.lang.Object)arrayList18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);

  }

  @Test
  public void test059() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test059"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    int i3 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList1, (java2.util2.List)linkedList2);
    java.lang.Byte byte4 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)linkedList2, (java.lang.Object)byte4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj6 = linkedList2.removeFirst();
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);

  }

  @Test
  public void test060() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test060"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    int i3 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList1, (java2.util2.List)linkedList2);
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList5 = new java2.util2.LinkedList((java2.util2.Collection)linkedList4);
    java2.util2.LinkedList linkedList6 = new java2.util2.LinkedList();
    int i7 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList5, (java2.util2.List)linkedList6);
    java.lang.Byte byte8 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)linkedList6, (java.lang.Object)byte8);
    boolean b10 = linkedList1.removeAll((java2.util2.Collection)linkedList6);
    java2.util2.LinkedList linkedList11 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList12 = new java2.util2.LinkedList((java2.util2.Collection)linkedList11);
    java2.util2.Iterator iterator13 = linkedList12.iterator();
    java2.util2.Collections.sort((java2.util2.List)linkedList12);
    boolean b15 = linkedList6.removeAll((java2.util2.Collection)linkedList12);
    java2.util2.LinkedList linkedList16 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList17 = new java2.util2.LinkedList((java2.util2.Collection)linkedList16);
    java2.util2.LinkedList linkedList18 = new java2.util2.LinkedList();
    int i19 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList17, (java2.util2.List)linkedList18);
    java2.util2.LinkedList linkedList20 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList21 = new java2.util2.LinkedList((java2.util2.Collection)linkedList20);
    java2.util2.LinkedList linkedList22 = new java2.util2.LinkedList();
    int i23 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList21, (java2.util2.List)linkedList22);
    java2.util2.LinkedList linkedList24 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList25 = new java2.util2.LinkedList((java2.util2.Collection)linkedList24);
    java2.util2.Collections.copy((java2.util2.List)linkedList21, (java2.util2.List)linkedList25);
    java2.util2.Collections.copy((java2.util2.List)linkedList17, (java2.util2.List)linkedList21);
    java2.util2.List list28 = java2.util2.Collections.singletonList((java.lang.Object)linkedList21);
    boolean b29 = linkedList12.containsAll((java2.util2.Collection)linkedList21);
    java.lang.Integer i30 = new java.lang.Integer(10);
    java2.util2.LinkedList linkedList31 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList32 = new java2.util2.LinkedList((java2.util2.Collection)linkedList31);
    java2.util2.LinkedList linkedList33 = new java2.util2.LinkedList();
    int i34 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList32, (java2.util2.List)linkedList33);
    java2.util2.LinkedList linkedList35 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList36 = new java2.util2.LinkedList((java2.util2.Collection)linkedList35);
    java2.util2.LinkedList linkedList37 = new java2.util2.LinkedList();
    int i38 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList36, (java2.util2.List)linkedList37);
    java.lang.Byte byte39 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)linkedList37, (java.lang.Object)byte39);
    boolean b41 = linkedList32.removeAll((java2.util2.Collection)linkedList37);
    java2.util2.LinkedList linkedList42 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList43 = new java2.util2.LinkedList((java2.util2.Collection)linkedList42);
    java2.util2.Iterator iterator44 = linkedList43.iterator();
    java2.util2.Collections.sort((java2.util2.List)linkedList43);
    boolean b46 = linkedList37.removeAll((java2.util2.Collection)linkedList43);
    java.lang.String str47 = linkedList37.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      linkedList12.add((int)i30, (java.lang.Object)str47);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "[]"+ "'", str47.equals("[]"));

  }

  @Test
  public void test061() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test061"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    int i2 = linkedList1.size();
    java2.util2.LinkedList linkedList3 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList((java2.util2.Collection)linkedList3);
    java2.util2.LinkedList linkedList5 = new java2.util2.LinkedList();
    int i6 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList4, (java2.util2.List)linkedList5);
    java.lang.Byte byte7 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)linkedList5, (java.lang.Object)byte7);
    boolean b9 = linkedList1.containsAll((java2.util2.Collection)linkedList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test062() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test062"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList((java2.util2.Collection)linkedList1);
    java2.util2.LinkedList linkedList3 = new java2.util2.LinkedList();
    int i4 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList2, (java2.util2.List)linkedList3);
    java2.util2.Collections.shuffle((java2.util2.List)linkedList3);
    java2.util2.LinkedList linkedList6 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList7 = new java2.util2.LinkedList((java2.util2.Collection)linkedList6);
    java.lang.String str8 = "";
    java.lang.Object[] obj_array9 = new java.lang.Object[] { str8};
    java.lang.Object[] obj_array10 = linkedList6.toArray(obj_array9);
    java.lang.Object[] obj_array11 = linkedList3.toArray(obj_array9);
    boolean b12 = treeSet0.add((java.lang.Object)obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);

  }

  @Test
  public void test063() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test063"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    int i3 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList1, (java2.util2.List)linkedList2);
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList5 = new java2.util2.LinkedList((java2.util2.Collection)linkedList4);
    java2.util2.LinkedList linkedList6 = new java2.util2.LinkedList();
    int i7 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList5, (java2.util2.List)linkedList6);
    java2.util2.LinkedList linkedList8 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList9 = new java2.util2.LinkedList((java2.util2.Collection)linkedList8);
    java2.util2.Collections.copy((java2.util2.List)linkedList5, (java2.util2.List)linkedList9);
    java2.util2.Collections.copy((java2.util2.List)linkedList1, (java2.util2.List)linkedList5);
    java2.util2.LinkedList linkedList12 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList13 = new java2.util2.LinkedList((java2.util2.Collection)linkedList12);
    java2.util2.LinkedList linkedList14 = new java2.util2.LinkedList();
    int i15 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList13, (java2.util2.List)linkedList14);
    java2.util2.LinkedList linkedList16 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList17 = new java2.util2.LinkedList((java2.util2.Collection)linkedList16);
    java2.util2.LinkedList linkedList18 = new java2.util2.LinkedList();
    int i19 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList17, (java2.util2.List)linkedList18);
    java.lang.Byte byte20 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)linkedList18, (java.lang.Object)byte20);
    boolean b22 = linkedList13.removeAll((java2.util2.Collection)linkedList18);
    java2.util2.LinkedList linkedList23 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList24 = new java2.util2.LinkedList((java2.util2.Collection)linkedList23);
    java2.util2.Iterator iterator25 = linkedList24.iterator();
    java2.util2.Collections.sort((java2.util2.List)linkedList24);
    boolean b27 = linkedList18.removeAll((java2.util2.Collection)linkedList24);
    java.lang.String str28 = linkedList18.toString();
    int i29 = linkedList1.lastIndexOf((java.lang.Object)linkedList18);
    linkedList1.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "[]"+ "'", str28.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == (-1));

  }

  @Test
  public void test064() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test064"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    int i3 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList1, (java2.util2.List)linkedList2);
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList5 = new java2.util2.LinkedList((java2.util2.Collection)linkedList4);
    java.lang.String str6 = "";
    java.lang.Object[] obj_array7 = new java.lang.Object[] { str6};
    java.lang.Object[] obj_array8 = linkedList4.toArray(obj_array7);
    int i9 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList2, (java2.util2.List)linkedList4);
    java2.util2.Iterator iterator10 = linkedList2.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator10);

  }

  @Test
  public void test065() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test065"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    java2.util2.Set set1 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);

  }

  @Test
  public void test066() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test066"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList((java2.util2.Collection)linkedList1);
    java2.util2.LinkedList linkedList3 = new java2.util2.LinkedList();
    int i4 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList2, (java2.util2.List)linkedList3);
    java.lang.Byte byte5 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)linkedList3, (java.lang.Object)byte5);
    java2.util2.Iterator iterator7 = linkedList3.iterator();
    boolean b8 = treeSet0.remove((java.lang.Object)linkedList3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test067() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test067"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    int i3 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList1, (java2.util2.List)linkedList2);
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList5 = new java2.util2.LinkedList((java2.util2.Collection)linkedList4);
    java2.util2.Iterator iterator6 = linkedList5.iterator();
    java2.util2.Collections.sort((java2.util2.List)linkedList5);
    boolean b8 = linkedList2.equals((java.lang.Object)linkedList5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj9 = linkedList5.removeFirst();
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test068() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test068"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    int i3 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList1, (java2.util2.List)linkedList2);
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList5 = new java2.util2.LinkedList((java2.util2.Collection)linkedList4);
    java2.util2.LinkedList linkedList6 = new java2.util2.LinkedList();
    int i7 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList5, (java2.util2.List)linkedList6);
    java2.util2.LinkedList linkedList8 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList9 = new java2.util2.LinkedList((java2.util2.Collection)linkedList8);
    java2.util2.Collections.copy((java2.util2.List)linkedList5, (java2.util2.List)linkedList9);
    java2.util2.Collections.copy((java2.util2.List)linkedList1, (java2.util2.List)linkedList5);
    java2.util2.LinkedList linkedList12 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList13 = new java2.util2.LinkedList((java2.util2.Collection)linkedList12);
    int i14 = linkedList13.size();
    java2.util2.LinkedList linkedList15 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList16 = new java2.util2.LinkedList((java2.util2.Collection)linkedList15);
    java2.util2.LinkedList linkedList17 = new java2.util2.LinkedList();
    int i18 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList16, (java2.util2.List)linkedList17);
    java.lang.Byte byte19 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)linkedList17, (java.lang.Object)byte19);
    boolean b21 = linkedList13.containsAll((java2.util2.Collection)linkedList17);
    boolean b22 = linkedList5.remove((java.lang.Object)linkedList13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);

  }

  @Test
  public void test069() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test069"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    int i3 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList1, (java2.util2.List)linkedList2);
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList5 = new java2.util2.LinkedList((java2.util2.Collection)linkedList4);
    java2.util2.LinkedList linkedList6 = new java2.util2.LinkedList();
    int i7 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList5, (java2.util2.List)linkedList6);
    java2.util2.LinkedList linkedList8 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList9 = new java2.util2.LinkedList((java2.util2.Collection)linkedList8);
    java2.util2.Collections.copy((java2.util2.List)linkedList5, (java2.util2.List)linkedList9);
    java2.util2.Collections.copy((java2.util2.List)linkedList1, (java2.util2.List)linkedList5);
    java2.util2.List list12 = java2.util2.Collections.singletonList((java.lang.Object)linkedList5);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);

  }

  @Test
  public void test070() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test070"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    int i3 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList1, (java2.util2.List)linkedList2);
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList5 = new java2.util2.LinkedList((java2.util2.Collection)linkedList4);
    java2.util2.Collections.copy((java2.util2.List)linkedList1, (java2.util2.List)linkedList5);
    java2.util2.LinkedList linkedList7 = new java2.util2.LinkedList();
    boolean b8 = linkedList1.removeAll((java2.util2.Collection)linkedList7);
    java2.util2.LinkedList linkedList9 = new java2.util2.LinkedList((java2.util2.Collection)linkedList7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test071() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test071"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    java2.util2.Set set1 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet0);
    java2.util2.TreeSet treeSet2 = new java2.util2.TreeSet();
    java2.util2.LinkedList linkedList3 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList((java2.util2.Collection)linkedList3);
    java2.util2.LinkedList linkedList5 = new java2.util2.LinkedList();
    int i6 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList4, (java2.util2.List)linkedList5);
    java.lang.Byte byte7 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)linkedList5, (java.lang.Object)byte7);
    java2.util2.Iterator iterator9 = linkedList5.iterator();
    boolean b10 = treeSet2.remove((java.lang.Object)linkedList5);
    boolean b11 = treeSet0.removeAll((java2.util2.Collection)linkedList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test072() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test072"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList((java2.util2.Collection)linkedList1);
    java2.util2.LinkedList linkedList3 = new java2.util2.LinkedList();
    int i4 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList2, (java2.util2.List)linkedList3);
    java2.util2.Collections.shuffle((java2.util2.List)linkedList3);
    java2.util2.LinkedList linkedList6 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList7 = new java2.util2.LinkedList((java2.util2.Collection)linkedList6);
    java.lang.String str8 = "";
    java.lang.Object[] obj_array9 = new java.lang.Object[] { str8};
    java.lang.Object[] obj_array10 = linkedList6.toArray(obj_array9);
    java.lang.Object[] obj_array11 = linkedList3.toArray(obj_array9);
    boolean b12 = treeSet0.add((java.lang.Object)obj_array9);
    java.lang.Integer i13 = new java.lang.Integer(10);
    java2.util2.LinkedList linkedList14 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList15 = new java2.util2.LinkedList((java2.util2.Collection)linkedList14);
    java2.util2.LinkedList linkedList16 = new java2.util2.LinkedList();
    int i17 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList15, (java2.util2.List)linkedList16);
    java2.util2.LinkedList linkedList18 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList19 = new java2.util2.LinkedList((java2.util2.Collection)linkedList18);
    java2.util2.Collections.copy((java2.util2.List)linkedList15, (java2.util2.List)linkedList19);
    java2.util2.List list21 = java2.util2.Collections.nCopies((int)i13, (java.lang.Object)linkedList19);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b22 = treeSet0.remove((java.lang.Object)list21);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);

  }

  @Test
  public void test073() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test073"); }


    java.lang.Object obj0 = new java.lang.Object();

  }

  @Test
  public void test074() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test074"); }


    java.lang.Integer i0 = new java.lang.Integer(0);
    java2.util2.ArrayList arrayList1 = new java2.util2.ArrayList(i0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList3 = new java2.util2.LinkedList((java2.util2.Collection)linkedList2);
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList();
    int i5 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList3, (java2.util2.List)linkedList4);
    java2.util2.Collections.shuffle((java2.util2.List)linkedList4);
    java.lang.Object[] obj_array7 = linkedList4.toArray();
    boolean b8 = arrayList1.add((java.lang.Object)linkedList4);
    java.lang.Integer i9 = new java.lang.Integer((-1));
    arrayList1.ensureCapacity((int)i9);
    java.lang.Integer i11 = new java.lang.Integer(0);
    java2.util2.LinkedList linkedList12 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList13 = new java2.util2.LinkedList((java2.util2.Collection)linkedList12);
    java2.util2.LinkedList linkedList14 = new java2.util2.LinkedList();
    int i15 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList13, (java2.util2.List)linkedList14);
    java2.util2.LinkedList linkedList16 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList17 = new java2.util2.LinkedList((java2.util2.Collection)linkedList16);
    java2.util2.LinkedList linkedList18 = new java2.util2.LinkedList();
    int i19 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList17, (java2.util2.List)linkedList18);
    java2.util2.LinkedList linkedList20 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList21 = new java2.util2.LinkedList((java2.util2.Collection)linkedList20);
    java2.util2.Collections.copy((java2.util2.List)linkedList17, (java2.util2.List)linkedList21);
    java2.util2.Collections.copy((java2.util2.List)linkedList13, (java2.util2.List)linkedList17);
    java2.util2.LinkedList linkedList24 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList25 = new java2.util2.LinkedList((java2.util2.Collection)linkedList24);
    java2.util2.Iterator iterator26 = linkedList25.iterator();
    java2.util2.Collections.sort((java2.util2.List)linkedList25);
    java2.util2.Map map28 = java2.util2.Collections.singletonMap((java.lang.Object)linkedList17, (java.lang.Object)linkedList25);
    boolean b29 = arrayList1.addAll((int)i11, (java2.util2.Collection)linkedList25);
    java.lang.Long long30 = new java.lang.Long((-1L));
    int i31 = arrayList1.lastIndexOf((java.lang.Object)long30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == (-1));

  }

  @Test
  public void test075() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test075"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    int i3 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList1, (java2.util2.List)linkedList2);
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList5 = new java2.util2.LinkedList((java2.util2.Collection)linkedList4);
    java2.util2.LinkedList linkedList6 = new java2.util2.LinkedList();
    int i7 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList5, (java2.util2.List)linkedList6);
    java2.util2.LinkedList linkedList8 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList9 = new java2.util2.LinkedList((java2.util2.Collection)linkedList8);
    java2.util2.Collections.copy((java2.util2.List)linkedList5, (java2.util2.List)linkedList9);
    java2.util2.Collections.copy((java2.util2.List)linkedList1, (java2.util2.List)linkedList5);
    java2.util2.LinkedList linkedList12 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList13 = new java2.util2.LinkedList((java2.util2.Collection)linkedList12);
    java2.util2.Iterator iterator14 = linkedList13.iterator();
    java2.util2.Collections.sort((java2.util2.List)linkedList13);
    java2.util2.Map map16 = java2.util2.Collections.singletonMap((java.lang.Object)linkedList5, (java.lang.Object)linkedList13);
    java2.util2.Map map17 = java2.util2.Collections.synchronizedMap(map16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map17);

  }

  @Test
  public void test076() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test076"); }


    java.lang.Integer i0 = new java.lang.Integer(0);
    java2.util2.ArrayList arrayList1 = new java2.util2.ArrayList(i0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList3 = new java2.util2.LinkedList((java2.util2.Collection)linkedList2);
    int i4 = linkedList3.size();
    java.lang.Short s5 = new java.lang.Short((short)100);
    int i6 = linkedList3.indexOf((java.lang.Object)s5);
    int i7 = arrayList1.lastIndexOf((java.lang.Object)linkedList3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test077() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test077"); }


    java.lang.Integer i0 = new java.lang.Integer(0);
    java2.util2.ArrayList arrayList1 = new java2.util2.ArrayList(i0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList3 = new java2.util2.LinkedList((java2.util2.Collection)linkedList2);
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList();
    int i5 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList3, (java2.util2.List)linkedList4);
    java2.util2.Collections.shuffle((java2.util2.List)linkedList4);
    java.lang.Object[] obj_array7 = linkedList4.toArray();
    boolean b8 = arrayList1.add((java.lang.Object)linkedList4);
    java.lang.Integer i9 = new java.lang.Integer((-1));
    arrayList1.ensureCapacity((int)i9);
    java2.util2.LinkedList linkedList11 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList12 = new java2.util2.LinkedList((java2.util2.Collection)linkedList11);
    java2.util2.LinkedList linkedList13 = new java2.util2.LinkedList();
    int i14 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList12, (java2.util2.List)linkedList13);
    java2.util2.LinkedList linkedList15 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList16 = new java2.util2.LinkedList((java2.util2.Collection)linkedList15);
    java2.util2.LinkedList linkedList17 = new java2.util2.LinkedList();
    int i18 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList16, (java2.util2.List)linkedList17);
    java.lang.Byte byte19 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)linkedList17, (java.lang.Object)byte19);
    boolean b21 = linkedList12.removeAll((java2.util2.Collection)linkedList17);
    java2.util2.LinkedList linkedList22 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList23 = new java2.util2.LinkedList((java2.util2.Collection)linkedList22);
    java2.util2.Iterator iterator24 = linkedList23.iterator();
    java2.util2.Collections.sort((java2.util2.List)linkedList23);
    boolean b26 = linkedList17.removeAll((java2.util2.Collection)linkedList23);
    java2.util2.LinkedList linkedList27 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList28 = new java2.util2.LinkedList((java2.util2.Collection)linkedList27);
    java2.util2.LinkedList linkedList29 = new java2.util2.LinkedList();
    int i30 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList28, (java2.util2.List)linkedList29);
    java2.util2.LinkedList linkedList31 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList32 = new java2.util2.LinkedList((java2.util2.Collection)linkedList31);
    java2.util2.LinkedList linkedList33 = new java2.util2.LinkedList();
    int i34 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList32, (java2.util2.List)linkedList33);
    java2.util2.LinkedList linkedList35 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList36 = new java2.util2.LinkedList((java2.util2.Collection)linkedList35);
    java2.util2.Collections.copy((java2.util2.List)linkedList32, (java2.util2.List)linkedList36);
    java2.util2.Collections.copy((java2.util2.List)linkedList28, (java2.util2.List)linkedList32);
    java2.util2.List list39 = java2.util2.Collections.singletonList((java.lang.Object)linkedList32);
    boolean b40 = linkedList23.containsAll((java2.util2.Collection)linkedList32);
    int i41 = java2.util2.Collections.lastIndexOfSubList((java2.util2.List)arrayList1, (java2.util2.List)linkedList32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);

  }

  @Test
  public void test078() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test078"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    int i3 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList1, (java2.util2.List)linkedList2);
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList5 = new java2.util2.LinkedList((java2.util2.Collection)linkedList4);
    java2.util2.Collections.copy((java2.util2.List)linkedList1, (java2.util2.List)linkedList5);
    java.lang.Integer i7 = new java.lang.Integer(1);
    java2.util2.Collections.rotate((java2.util2.List)linkedList5, (int)i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);

  }

  @Test
  public void test079() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test079"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java.lang.String str2 = "";
    java.lang.Object[] obj_array3 = new java.lang.Object[] { str2};
    java.lang.Object[] obj_array4 = linkedList0.toArray(obj_array3);
    java2.util2.Iterator iterator5 = linkedList0.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);

  }

  @Test
  public void test080() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test080"); }


    java.lang.Integer i0 = new java.lang.Integer(0);
    java2.util2.ArrayList arrayList1 = new java2.util2.ArrayList(i0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList3 = new java2.util2.LinkedList((java2.util2.Collection)linkedList2);
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList();
    int i5 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList3, (java2.util2.List)linkedList4);
    java2.util2.Collections.shuffle((java2.util2.List)linkedList4);
    java.lang.Object[] obj_array7 = linkedList4.toArray();
    boolean b8 = arrayList1.add((java.lang.Object)linkedList4);
    java.lang.Integer i9 = new java.lang.Integer((-1));
    arrayList1.ensureCapacity((int)i9);
    java2.util2.LinkedList linkedList11 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList12 = new java2.util2.LinkedList((java2.util2.Collection)linkedList11);
    java2.util2.LinkedList linkedList13 = new java2.util2.LinkedList();
    int i14 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList12, (java2.util2.List)linkedList13);
    java2.util2.LinkedList linkedList15 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList16 = new java2.util2.LinkedList((java2.util2.Collection)linkedList15);
    java2.util2.LinkedList linkedList17 = new java2.util2.LinkedList();
    int i18 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList16, (java2.util2.List)linkedList17);
    java.lang.Byte byte19 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)linkedList17, (java.lang.Object)byte19);
    boolean b21 = linkedList12.removeAll((java2.util2.Collection)linkedList17);
    java2.util2.LinkedList linkedList22 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList23 = new java2.util2.LinkedList((java2.util2.Collection)linkedList22);
    java2.util2.Iterator iterator24 = linkedList23.iterator();
    java2.util2.Collections.sort((java2.util2.List)linkedList23);
    boolean b26 = linkedList17.removeAll((java2.util2.Collection)linkedList23);
    java2.util2.LinkedList linkedList27 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList28 = new java2.util2.LinkedList((java2.util2.Collection)linkedList27);
    java2.util2.LinkedList linkedList29 = new java2.util2.LinkedList();
    int i30 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList28, (java2.util2.List)linkedList29);
    java2.util2.LinkedList linkedList31 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList32 = new java2.util2.LinkedList((java2.util2.Collection)linkedList31);
    java2.util2.LinkedList linkedList33 = new java2.util2.LinkedList();
    int i34 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList32, (java2.util2.List)linkedList33);
    java2.util2.LinkedList linkedList35 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList36 = new java2.util2.LinkedList((java2.util2.Collection)linkedList35);
    java2.util2.Collections.copy((java2.util2.List)linkedList32, (java2.util2.List)linkedList36);
    java2.util2.Collections.copy((java2.util2.List)linkedList28, (java2.util2.List)linkedList32);
    java2.util2.List list39 = java2.util2.Collections.singletonList((java.lang.Object)linkedList32);
    boolean b40 = linkedList23.containsAll((java2.util2.Collection)linkedList32);
    int i41 = java2.util2.Collections.lastIndexOfSubList((java2.util2.List)arrayList1, (java2.util2.List)linkedList32);
    java2.util2.TreeSet treeSet42 = new java2.util2.TreeSet((java2.util2.Collection)arrayList1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);

  }

  @Test
  public void test081() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test081"); }


    java.lang.Integer i0 = new java.lang.Integer(0);
    java2.util2.ArrayList arrayList1 = new java2.util2.ArrayList(i0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList3 = new java2.util2.LinkedList((java2.util2.Collection)linkedList2);
    int i4 = linkedList3.size();
    java.lang.Short s5 = new java.lang.Short((short)100);
    int i6 = linkedList3.indexOf((java.lang.Object)s5);
    int i7 = arrayList1.lastIndexOf((java.lang.Object)linkedList3);
    java.lang.Integer i8 = new java.lang.Integer(10);
    java2.util2.LinkedList linkedList9 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList10 = new java2.util2.LinkedList((java2.util2.Collection)linkedList9);
    java2.util2.LinkedList linkedList11 = new java2.util2.LinkedList();
    int i12 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList10, (java2.util2.List)linkedList11);
    java2.util2.LinkedList linkedList13 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList14 = new java2.util2.LinkedList((java2.util2.Collection)linkedList13);
    java2.util2.Collections.copy((java2.util2.List)linkedList10, (java2.util2.List)linkedList14);
    java2.util2.List list16 = java2.util2.Collections.nCopies((int)i8, (java.lang.Object)linkedList14);
    java2.util2.LinkedList linkedList17 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList18 = new java2.util2.LinkedList((java2.util2.Collection)linkedList17);
    java2.util2.LinkedList linkedList19 = new java2.util2.LinkedList();
    int i20 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList18, (java2.util2.List)linkedList19);
    java2.util2.Collections.shuffle((java2.util2.List)linkedList19);
    java2.util2.LinkedList linkedList22 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList23 = new java2.util2.LinkedList((java2.util2.Collection)linkedList22);
    java.lang.String str24 = "";
    java.lang.Object[] obj_array25 = new java.lang.Object[] { str24};
    java.lang.Object[] obj_array26 = linkedList22.toArray(obj_array25);
    java.lang.Object[] obj_array27 = linkedList19.toArray(obj_array25);
    java.lang.Object[] obj_array28 = linkedList14.toArray(obj_array25);
    java2.util2.Collections.fill((java2.util2.List)arrayList1, (java.lang.Object)linkedList14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array28);

  }

  @Test
  public void test082() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test082"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java.lang.String str2 = "";
    java.lang.Object[] obj_array3 = new java.lang.Object[] { str2};
    java.lang.Object[] obj_array4 = linkedList0.toArray(obj_array3);
    java.lang.Integer i5 = new java.lang.Integer(1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.ListIterator listIterator6 = linkedList0.listIterator((int)i5);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array4);

  }

  @Test
  public void test083() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test083"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    int i3 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList1, (java2.util2.List)linkedList2);
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList5 = new java2.util2.LinkedList((java2.util2.Collection)linkedList4);
    java2.util2.LinkedList linkedList6 = new java2.util2.LinkedList();
    int i7 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList5, (java2.util2.List)linkedList6);
    java2.util2.LinkedList linkedList8 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList9 = new java2.util2.LinkedList((java2.util2.Collection)linkedList8);
    java2.util2.Collections.copy((java2.util2.List)linkedList5, (java2.util2.List)linkedList9);
    java2.util2.Collections.copy((java2.util2.List)linkedList1, (java2.util2.List)linkedList5);
    java2.util2.LinkedList linkedList12 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList13 = new java2.util2.LinkedList((java2.util2.Collection)linkedList12);
    int i14 = linkedList13.size();
    java2.util2.LinkedList linkedList15 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList16 = new java2.util2.LinkedList((java2.util2.Collection)linkedList15);
    java2.util2.LinkedList linkedList17 = new java2.util2.LinkedList();
    int i18 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList16, (java2.util2.List)linkedList17);
    java.lang.Byte byte19 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)linkedList17, (java.lang.Object)byte19);
    boolean b21 = linkedList13.containsAll((java2.util2.Collection)linkedList17);
    boolean b22 = linkedList5.remove((java.lang.Object)linkedList13);
    java.lang.Integer i23 = new java.lang.Integer(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj24 = linkedList5.remove((int)i23);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);

  }

  @Test
  public void test084() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test084"); }


    java.lang.Integer i0 = new java.lang.Integer(0);
    java2.util2.ArrayList arrayList1 = new java2.util2.ArrayList(i0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList3 = new java2.util2.LinkedList((java2.util2.Collection)linkedList2);
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList();
    int i5 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList3, (java2.util2.List)linkedList4);
    java2.util2.Collections.shuffle((java2.util2.List)linkedList4);
    java.lang.Object[] obj_array7 = linkedList4.toArray();
    boolean b8 = arrayList1.add((java.lang.Object)linkedList4);
    java.lang.Integer i9 = new java.lang.Integer((-1));
    arrayList1.ensureCapacity((int)i9);
    java.lang.Integer i11 = new java.lang.Integer(0);
    java2.util2.LinkedList linkedList12 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList13 = new java2.util2.LinkedList((java2.util2.Collection)linkedList12);
    java2.util2.LinkedList linkedList14 = new java2.util2.LinkedList();
    int i15 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList13, (java2.util2.List)linkedList14);
    java2.util2.LinkedList linkedList16 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList17 = new java2.util2.LinkedList((java2.util2.Collection)linkedList16);
    java2.util2.LinkedList linkedList18 = new java2.util2.LinkedList();
    int i19 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList17, (java2.util2.List)linkedList18);
    java2.util2.LinkedList linkedList20 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList21 = new java2.util2.LinkedList((java2.util2.Collection)linkedList20);
    java2.util2.Collections.copy((java2.util2.List)linkedList17, (java2.util2.List)linkedList21);
    java2.util2.Collections.copy((java2.util2.List)linkedList13, (java2.util2.List)linkedList17);
    java2.util2.LinkedList linkedList24 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList25 = new java2.util2.LinkedList((java2.util2.Collection)linkedList24);
    java2.util2.Iterator iterator26 = linkedList25.iterator();
    java2.util2.Collections.sort((java2.util2.List)linkedList25);
    java2.util2.Map map28 = java2.util2.Collections.singletonMap((java.lang.Object)linkedList17, (java.lang.Object)linkedList25);
    boolean b29 = arrayList1.addAll((int)i11, (java2.util2.Collection)linkedList25);
    java.lang.Long long30 = new java.lang.Long((-1L));
    int i31 = arrayList1.lastIndexOf((java.lang.Object)long30);
    java.lang.Integer i32 = new java.lang.Integer(0);
    java2.util2.ArrayList arrayList33 = new java2.util2.ArrayList(i32);
    java2.util2.LinkedList linkedList34 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList35 = new java2.util2.LinkedList((java2.util2.Collection)linkedList34);
    java2.util2.LinkedList linkedList36 = new java2.util2.LinkedList();
    int i37 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList35, (java2.util2.List)linkedList36);
    java2.util2.Collections.shuffle((java2.util2.List)linkedList36);
    java.lang.Object[] obj_array39 = linkedList36.toArray();
    boolean b40 = arrayList33.add((java.lang.Object)linkedList36);
    java.lang.Integer i41 = new java.lang.Integer((-1));
    arrayList33.ensureCapacity((int)i41);
    java.lang.Integer i43 = new java.lang.Integer(0);
    java2.util2.LinkedList linkedList44 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList45 = new java2.util2.LinkedList((java2.util2.Collection)linkedList44);
    java2.util2.LinkedList linkedList46 = new java2.util2.LinkedList();
    int i47 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList45, (java2.util2.List)linkedList46);
    java2.util2.LinkedList linkedList48 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList49 = new java2.util2.LinkedList((java2.util2.Collection)linkedList48);
    java2.util2.LinkedList linkedList50 = new java2.util2.LinkedList();
    int i51 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList49, (java2.util2.List)linkedList50);
    java2.util2.LinkedList linkedList52 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList53 = new java2.util2.LinkedList((java2.util2.Collection)linkedList52);
    java2.util2.Collections.copy((java2.util2.List)linkedList49, (java2.util2.List)linkedList53);
    java2.util2.Collections.copy((java2.util2.List)linkedList45, (java2.util2.List)linkedList49);
    java2.util2.LinkedList linkedList56 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList57 = new java2.util2.LinkedList((java2.util2.Collection)linkedList56);
    java2.util2.Iterator iterator58 = linkedList57.iterator();
    java2.util2.Collections.sort((java2.util2.List)linkedList57);
    java2.util2.Map map60 = java2.util2.Collections.singletonMap((java.lang.Object)linkedList49, (java.lang.Object)linkedList57);
    boolean b61 = arrayList33.addAll((int)i43, (java2.util2.Collection)linkedList57);
    java.lang.Long long62 = new java.lang.Long((-1L));
    int i63 = arrayList33.lastIndexOf((java.lang.Object)long62);
    int i64 = arrayList1.indexOf((java.lang.Object)arrayList33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == (-1));

  }

  @Test
  public void test085() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test085"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java.lang.String str2 = "";
    java.lang.Object[] obj_array3 = new java.lang.Object[] { str2};
    java.lang.Object[] obj_array4 = linkedList0.toArray(obj_array3);
    java2.util2.Iterator iterator5 = linkedList0.iterator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj6 = linkedList0.getFirst();
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);

  }

  @Test
  public void test086() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test086"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    java2.util2.Set set1 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet0);
    java2.util2.TreeSet treeSet2 = new java2.util2.TreeSet();
    java2.util2.LinkedList linkedList3 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList((java2.util2.Collection)linkedList3);
    java2.util2.LinkedList linkedList5 = new java2.util2.LinkedList();
    int i6 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList4, (java2.util2.List)linkedList5);
    java.lang.Byte byte7 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)linkedList5, (java.lang.Object)byte7);
    java2.util2.Iterator iterator9 = linkedList5.iterator();
    boolean b10 = treeSet2.remove((java.lang.Object)linkedList5);
    boolean b11 = treeSet0.removeAll((java2.util2.Collection)linkedList5);
    java2.util2.LinkedList linkedList12 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList13 = new java2.util2.LinkedList((java2.util2.Collection)linkedList12);
    java2.util2.LinkedList linkedList14 = new java2.util2.LinkedList();
    int i15 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList13, (java2.util2.List)linkedList14);
    java2.util2.Collections.shuffle((java2.util2.List)linkedList14);
    java.lang.Object[] obj_array17 = linkedList14.toArray();
    java.lang.Object[] obj_array18 = linkedList5.toArray(obj_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array18);

  }

  @Test
  public void test087() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test087"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj1 = linkedList0.getFirst();
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }

  }

  @Test
  public void test088() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test088"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    int i3 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList1, (java2.util2.List)linkedList2);
    java2.util2.Collections.shuffle((java2.util2.List)linkedList2);
    java2.util2.LinkedList linkedList5 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList6 = new java2.util2.LinkedList((java2.util2.Collection)linkedList5);
    int i7 = java2.util2.Collections.binarySearch((java2.util2.List)linkedList2, (java.lang.Object)linkedList5);
    java.lang.Integer i8 = new java.lang.Integer(0);
    linkedList5.addFirst((java.lang.Object)i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test089() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test089"); }


    java.lang.Integer i0 = new java.lang.Integer(0);
    java2.util2.ArrayList arrayList1 = new java2.util2.ArrayList(i0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList3 = new java2.util2.LinkedList((java2.util2.Collection)linkedList2);
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList();
    int i5 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList3, (java2.util2.List)linkedList4);
    java2.util2.Collections.shuffle((java2.util2.List)linkedList4);
    java.lang.Object[] obj_array7 = linkedList4.toArray();
    boolean b8 = arrayList1.add((java.lang.Object)linkedList4);
    java.lang.Integer i9 = new java.lang.Integer((-1));
    arrayList1.ensureCapacity((int)i9);
    java2.util2.LinkedList linkedList11 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList12 = new java2.util2.LinkedList((java2.util2.Collection)linkedList11);
    java2.util2.LinkedList linkedList13 = new java2.util2.LinkedList();
    int i14 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList12, (java2.util2.List)linkedList13);
    java2.util2.LinkedList linkedList15 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList16 = new java2.util2.LinkedList((java2.util2.Collection)linkedList15);
    java2.util2.LinkedList linkedList17 = new java2.util2.LinkedList();
    int i18 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList16, (java2.util2.List)linkedList17);
    java.lang.Byte byte19 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)linkedList17, (java.lang.Object)byte19);
    boolean b21 = linkedList12.removeAll((java2.util2.Collection)linkedList17);
    java2.util2.LinkedList linkedList22 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList23 = new java2.util2.LinkedList((java2.util2.Collection)linkedList22);
    java2.util2.Iterator iterator24 = linkedList23.iterator();
    java2.util2.Collections.sort((java2.util2.List)linkedList23);
    boolean b26 = linkedList17.removeAll((java2.util2.Collection)linkedList23);
    java2.util2.LinkedList linkedList27 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList28 = new java2.util2.LinkedList((java2.util2.Collection)linkedList27);
    java2.util2.LinkedList linkedList29 = new java2.util2.LinkedList();
    int i30 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList28, (java2.util2.List)linkedList29);
    java2.util2.LinkedList linkedList31 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList32 = new java2.util2.LinkedList((java2.util2.Collection)linkedList31);
    java2.util2.LinkedList linkedList33 = new java2.util2.LinkedList();
    int i34 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList32, (java2.util2.List)linkedList33);
    java2.util2.LinkedList linkedList35 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList36 = new java2.util2.LinkedList((java2.util2.Collection)linkedList35);
    java2.util2.Collections.copy((java2.util2.List)linkedList32, (java2.util2.List)linkedList36);
    java2.util2.Collections.copy((java2.util2.List)linkedList28, (java2.util2.List)linkedList32);
    java2.util2.List list39 = java2.util2.Collections.singletonList((java.lang.Object)linkedList32);
    boolean b40 = linkedList23.containsAll((java2.util2.Collection)linkedList32);
    int i41 = java2.util2.Collections.lastIndexOfSubList((java2.util2.List)arrayList1, (java2.util2.List)linkedList32);
    java2.util2.TreeSet treeSet42 = new java2.util2.TreeSet((java2.util2.Collection)arrayList1);
    java2.util2.Iterator iterator43 = treeSet42.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator43);

  }

  @Test
  public void test090() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test090"); }


    java.lang.Integer i0 = new java.lang.Integer(0);
    java2.util2.ArrayList arrayList1 = new java2.util2.ArrayList(i0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList3 = new java2.util2.LinkedList((java2.util2.Collection)linkedList2);
    int i4 = linkedList3.size();
    java.lang.Short s5 = new java.lang.Short((short)100);
    int i6 = linkedList3.indexOf((java.lang.Object)s5);
    int i7 = arrayList1.lastIndexOf((java.lang.Object)linkedList3);
    java2.util2.LinkedList linkedList8 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList9 = new java2.util2.LinkedList((java2.util2.Collection)linkedList8);
    java2.util2.LinkedList linkedList10 = new java2.util2.LinkedList();
    int i11 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList9, (java2.util2.List)linkedList10);
    java2.util2.Collections.shuffle((java2.util2.List)linkedList10);
    java2.util2.LinkedList linkedList13 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList14 = new java2.util2.LinkedList((java2.util2.Collection)linkedList13);
    int i15 = java2.util2.Collections.binarySearch((java2.util2.List)linkedList10, (java.lang.Object)linkedList13);
    boolean b16 = arrayList1.remove((java.lang.Object)linkedList10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test091() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test091"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)linkedList1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);

  }

  @Test
  public void test092() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test092"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java.lang.Double d1 = new java.lang.Double(1.0d);
    int i2 = linkedList0.indexOf((java.lang.Object)d1);
    java2.util2.Collections.reverse((java2.util2.List)linkedList0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));

  }

  @Test
  public void test093() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test093"); }


    java.lang.Integer i0 = new java.lang.Integer(0);
    java2.util2.ArrayList arrayList1 = new java2.util2.ArrayList(i0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList3 = new java2.util2.LinkedList((java2.util2.Collection)linkedList2);
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList();
    int i5 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList3, (java2.util2.List)linkedList4);
    java2.util2.Collections.shuffle((java2.util2.List)linkedList4);
    java.lang.Object[] obj_array7 = linkedList4.toArray();
    boolean b8 = arrayList1.add((java.lang.Object)linkedList4);
    java.lang.Integer i9 = new java.lang.Integer((-1));
    arrayList1.ensureCapacity((int)i9);
    boolean b11 = arrayList1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test094() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test094"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    int i3 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList1, (java2.util2.List)linkedList2);
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList5 = new java2.util2.LinkedList((java2.util2.Collection)linkedList4);
    java2.util2.LinkedList linkedList6 = new java2.util2.LinkedList();
    int i7 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList5, (java2.util2.List)linkedList6);
    java2.util2.LinkedList linkedList8 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList9 = new java2.util2.LinkedList((java2.util2.Collection)linkedList8);
    java2.util2.Collections.copy((java2.util2.List)linkedList5, (java2.util2.List)linkedList9);
    java2.util2.Collections.copy((java2.util2.List)linkedList1, (java2.util2.List)linkedList5);
    java2.util2.LinkedList linkedList12 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList13 = new java2.util2.LinkedList((java2.util2.Collection)linkedList12);
    java2.util2.Iterator iterator14 = linkedList13.iterator();
    java2.util2.Collections.sort((java2.util2.List)linkedList13);
    java2.util2.Map map16 = java2.util2.Collections.singletonMap((java.lang.Object)linkedList5, (java.lang.Object)linkedList13);
    java2.util2.Map map17 = java2.util2.Collections.unmodifiableMap(map16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map17);

  }

  @Test
  public void test095() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test095"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    java2.util2.Set set1 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet0);
    java2.util2.TreeSet treeSet2 = new java2.util2.TreeSet();
    java2.util2.LinkedList linkedList3 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList((java2.util2.Collection)linkedList3);
    java2.util2.LinkedList linkedList5 = new java2.util2.LinkedList();
    int i6 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList4, (java2.util2.List)linkedList5);
    java.lang.Byte byte7 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)linkedList5, (java.lang.Object)byte7);
    java2.util2.Iterator iterator9 = linkedList5.iterator();
    boolean b10 = treeSet2.remove((java.lang.Object)linkedList5);
    boolean b11 = treeSet0.removeAll((java2.util2.Collection)linkedList5);
    boolean b12 = treeSet0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);

  }

  @Test
  public void test096() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test096"); }


    java.lang.Integer i0 = new java.lang.Integer(0);
    java2.util2.ArrayList arrayList1 = new java2.util2.ArrayList(i0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList3 = new java2.util2.LinkedList((java2.util2.Collection)linkedList2);
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList();
    int i5 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList3, (java2.util2.List)linkedList4);
    java2.util2.Collections.shuffle((java2.util2.List)linkedList4);
    java.lang.Object[] obj_array7 = linkedList4.toArray();
    boolean b8 = arrayList1.add((java.lang.Object)linkedList4);
    java.lang.Integer i9 = new java.lang.Integer((-1));
    arrayList1.ensureCapacity((int)i9);
    boolean b11 = arrayList1.isEmpty();
    java2.util2.LinkedList linkedList12 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList13 = new java2.util2.LinkedList((java2.util2.Collection)linkedList12);
    java2.util2.LinkedList linkedList14 = new java2.util2.LinkedList();
    int i15 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList13, (java2.util2.List)linkedList14);
    java2.util2.LinkedList linkedList16 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList17 = new java2.util2.LinkedList((java2.util2.Collection)linkedList16);
    java2.util2.Collections.copy((java2.util2.List)linkedList13, (java2.util2.List)linkedList17);
    java2.util2.LinkedList linkedList19 = new java2.util2.LinkedList();
    boolean b20 = linkedList13.removeAll((java2.util2.Collection)linkedList19);
    int i21 = arrayList1.indexOf((java.lang.Object)linkedList13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);

  }

  @Test
  public void test097() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test097"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList((java2.util2.Collection)linkedList1);
    java2.util2.LinkedList linkedList3 = new java2.util2.LinkedList();
    int i4 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList2, (java2.util2.List)linkedList3);
    java2.util2.Collections.shuffle((java2.util2.List)linkedList3);
    java2.util2.LinkedList linkedList6 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList7 = new java2.util2.LinkedList((java2.util2.Collection)linkedList6);
    java.lang.String str8 = "";
    java.lang.Object[] obj_array9 = new java.lang.Object[] { str8};
    java.lang.Object[] obj_array10 = linkedList6.toArray(obj_array9);
    java.lang.Object[] obj_array11 = linkedList3.toArray(obj_array9);
    boolean b12 = treeSet0.add((java.lang.Object)obj_array9);
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);

  }

  @Test
  public void test098() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test098"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    int i3 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList1, (java2.util2.List)linkedList2);
    java2.util2.Collections.shuffle((java2.util2.List)linkedList2);
    java.lang.Object[] obj_array5 = linkedList2.toArray();
    java.lang.Integer i6 = new java.lang.Integer(1);
    java2.util2.LinkedList linkedList7 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList8 = new java2.util2.LinkedList((java2.util2.Collection)linkedList7);
    java2.util2.LinkedList linkedList9 = new java2.util2.LinkedList();
    int i10 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList8, (java2.util2.List)linkedList9);
    java2.util2.LinkedList linkedList11 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList12 = new java2.util2.LinkedList((java2.util2.Collection)linkedList11);
    java2.util2.LinkedList linkedList13 = new java2.util2.LinkedList();
    int i14 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList12, (java2.util2.List)linkedList13);
    java2.util2.LinkedList linkedList15 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList16 = new java2.util2.LinkedList((java2.util2.Collection)linkedList15);
    java2.util2.Collections.copy((java2.util2.List)linkedList12, (java2.util2.List)linkedList16);
    java2.util2.Collections.copy((java2.util2.List)linkedList8, (java2.util2.List)linkedList12);
    java2.util2.LinkedList linkedList19 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList20 = new java2.util2.LinkedList((java2.util2.Collection)linkedList19);
    java2.util2.Iterator iterator21 = linkedList20.iterator();
    java2.util2.Collections.sort((java2.util2.List)linkedList20);
    java2.util2.Map map23 = java2.util2.Collections.singletonMap((java.lang.Object)linkedList12, (java.lang.Object)linkedList20);
    java2.util2.Map map24 = java2.util2.Collections.synchronizedMap(map23);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      linkedList2.add((int)i6, (java.lang.Object)map23);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map24);

  }

  @Test
  public void test099() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test099"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    int i2 = linkedList1.size();
    java2.util2.LinkedList linkedList3 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList((java2.util2.Collection)linkedList3);
    java2.util2.LinkedList linkedList5 = new java2.util2.LinkedList();
    int i6 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList4, (java2.util2.List)linkedList5);
    java.lang.Byte byte7 = new java.lang.Byte((byte)10);
    java2.util2.Collections.fill((java2.util2.List)linkedList5, (java.lang.Object)byte7);
    boolean b9 = linkedList1.containsAll((java2.util2.Collection)linkedList5);
    java2.util2.Collections.sort((java2.util2.List)linkedList1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test100() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Naive0.test100"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList1 = new java2.util2.LinkedList((java2.util2.Collection)linkedList0);
    java2.util2.LinkedList linkedList2 = new java2.util2.LinkedList();
    int i3 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList1, (java2.util2.List)linkedList2);
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList5 = new java2.util2.LinkedList((java2.util2.Collection)linkedList4);
    java2.util2.LinkedList linkedList6 = new java2.util2.LinkedList();
    int i7 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList5, (java2.util2.List)linkedList6);
    java2.util2.LinkedList linkedList8 = new java2.util2.LinkedList();
    java2.util2.LinkedList linkedList9 = new java2.util2.LinkedList((java2.util2.Collection)linkedList8);
    java2.util2.Collections.copy((java2.util2.List)linkedList5, (java2.util2.List)linkedList9);
    java.lang.Integer i11 = new java.lang.Integer(1);
    java2.util2.Collections.rotate((java2.util2.List)linkedList9, (int)i11);
    int i13 = java2.util2.Collections.indexOfSubList((java2.util2.List)linkedList2, (java2.util2.List)linkedList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);

  }

}
