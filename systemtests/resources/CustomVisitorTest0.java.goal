
import org.junit.Test;

public class CustomVisitorTest0 {

  public static boolean debug = false;

  @Test
  public void test1() throws Throwable {

    if (debug) { System.out.println(); System.out.print("CustomVisitorTest0.test1"); }


    randoop.test.A a1 = new randoop.test.A((-1));
    randoop.test.A a3 = new randoop.test.A((-1));
    randoop.test.A a4 = a3.a1();
    randoop.test.A a5 = a1.a1(a3);
    int i8 = a1.a5((-1), 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    a1.a1(a1); org.junit.Assert.assertEquals(a1.i, -89);
    a3.a1(a3); org.junit.Assert.assertEquals(a3.i, -9);
    a4.a1(a4); org.junit.Assert.assertEquals(a4.i, 1);
    a5.a1(a5); org.junit.Assert.assertEquals(a5.i, 1);

  }

  @Test
  public void test2() throws Throwable {

    if (debug) { System.out.println(); System.out.print("CustomVisitorTest0.test2"); }


    randoop.test.A a1 = new randoop.test.A((-1));
    randoop.test.A a3 = new randoop.test.A((-1));
    randoop.test.A a4 = a3.a1();
    randoop.test.A a5 = a1.a1(a3);
    int i6 = a3.a6();
    randoop.test.A a8 = new randoop.test.A((-1));
    randoop.test.A a10 = new randoop.test.A((-1));
    randoop.test.A a11 = a10.a1();
    randoop.test.A a12 = a8.a1(a10);
    randoop.test.A a13 = new randoop.test.A();
    randoop.test.A a14 = a10.a1(a13);
    randoop.test.A a16 = new randoop.test.A((-1));
    randoop.test.A a18 = new randoop.test.A((-1));
    randoop.test.A a19 = a18.a1();
    randoop.test.A a20 = a16.a1(a18);
    randoop.test.A a21 = new randoop.test.A();
    randoop.test.A a22 = a18.a1(a21);
    randoop.test.A a23 = a13.a1(a21);
    randoop.test.A a25 = new randoop.test.A((-1));
    randoop.test.A a27 = new randoop.test.A((-1));
    randoop.test.A a28 = a27.a1();
    randoop.test.A a29 = a25.a1(a27);
    randoop.test.A a30 = a21.a1(a27);
    randoop.test.A a31 = new randoop.test.A();
    randoop.test.A a32 = a31.a1();
    randoop.test.A a33 = a21.a1(a31);
    randoop.test.A a35 = new randoop.test.A((-1));
    randoop.test.A a37 = new randoop.test.A((-1));
    randoop.test.A a38 = a37.a1();
    randoop.test.A a39 = a35.a1(a37);
    randoop.test.A a41 = new randoop.test.A((-1));
    randoop.test.A a43 = new randoop.test.A((-1));
    randoop.test.A a44 = a43.a1();
    randoop.test.A a45 = a41.a1(a43);
    randoop.test.A a47 = new randoop.test.A((-1));
    randoop.test.A a49 = new randoop.test.A((-1));
    randoop.test.A a50 = a49.a1();
    randoop.test.A a51 = a47.a1(a49);
    randoop.test.A a52 = new randoop.test.A();
    randoop.test.A a53 = a49.a1(a52);
    int i56 = a53.a5(0, 1);
    randoop.test.A a57 = a43.a1(a53);
    randoop.test.A a58 = new randoop.test.A();
    randoop.test.A a59 = a58.a1();
    randoop.test.B b60 = a43.a2(a58);
    randoop.test.B b62 = a33.a4(a39, b60, 0);
    int i63 = a3.a3(b60);
    randoop.test.A a64 = new randoop.test.A(b60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 3);
    a1.a1(a1); org.junit.Assert.assertEquals(a1.i, -89);
    a3.a1(a3); org.junit.Assert.assertEquals(a3.i, -9);
    a4.a1(a4); org.junit.Assert.assertEquals(a4.i, 1);
    a5.a1(a5); org.junit.Assert.assertEquals(a5.i, 1);
    a8.a1(a8); org.junit.Assert.assertEquals(a8.i, -89);
    a10.a1(a10); org.junit.Assert.assertEquals(a10.i, -89);
    a11.a1(a11); org.junit.Assert.assertEquals(a11.i, 1);
    a12.a1(a12); org.junit.Assert.assertEquals(a12.i, 1);
    a13.a1(a13); org.junit.Assert.assertEquals(a13.i, 11);
    a14.a1(a14); org.junit.Assert.assertEquals(a14.i, 11);
    a16.a1(a16); org.junit.Assert.assertEquals(a16.i, -89);
    a18.a1(a18); org.junit.Assert.assertEquals(a18.i, -89);
    a19.a1(a19); org.junit.Assert.assertEquals(a19.i, 1);
    a20.a1(a20); org.junit.Assert.assertEquals(a20.i, 1);
    a21.a1(a21); org.junit.Assert.assertEquals(a21.i, 111);
    a22.a1(a22); org.junit.Assert.assertEquals(a22.i, 11);
    a23.a1(a23); org.junit.Assert.assertEquals(a23.i, 11);
    a25.a1(a25); org.junit.Assert.assertEquals(a25.i, -89);
    a27.a1(a27); org.junit.Assert.assertEquals(a27.i, -9);
    a28.a1(a28); org.junit.Assert.assertEquals(a28.i, 1);
    a29.a1(a29); org.junit.Assert.assertEquals(a29.i, 1);
    a30.a1(a30); org.junit.Assert.assertEquals(a30.i, 1);
    a31.a1(a31); org.junit.Assert.assertEquals(a31.i, 1);
    a32.a1(a32); org.junit.Assert.assertEquals(a32.i, 1);
    a33.a1(a33); org.junit.Assert.assertEquals(a33.i, 11);
    a35.a1(a35); org.junit.Assert.assertEquals(a35.i, -89);
    a37.a1(a37); org.junit.Assert.assertEquals(a37.i, -9);
    a38.a1(a38); org.junit.Assert.assertEquals(a38.i, 1);
    a39.a1(a39); org.junit.Assert.assertEquals(a39.i, 1);
    a41.a1(a41); org.junit.Assert.assertEquals(a41.i, -89);
    a43.a1(a43); org.junit.Assert.assertEquals(a43.i, -89);
    a44.a1(a44); org.junit.Assert.assertEquals(a44.i, 1);
    a45.a1(a45); org.junit.Assert.assertEquals(a45.i, 1);
    a47.a1(a47); org.junit.Assert.assertEquals(a47.i, -89);
    a49.a1(a49); org.junit.Assert.assertEquals(a49.i, -89);
    a50.a1(a50); org.junit.Assert.assertEquals(a50.i, 1);
    a51.a1(a51); org.junit.Assert.assertEquals(a51.i, 1);
    a52.a1(a52); org.junit.Assert.assertEquals(a52.i, 1);
    a53.a1(a53); org.junit.Assert.assertEquals(a53.i, 11);
    a57.a1(a57); org.junit.Assert.assertEquals(a57.i, 21);
    a58.a1(a58); org.junit.Assert.assertEquals(a58.i, 1);
    a59.a1(a59); org.junit.Assert.assertEquals(a59.i, 1);
    a64.a1(a64); org.junit.Assert.assertEquals(a64.i, 1);

  }

  @Test
  public void test3() throws Throwable {

    if (debug) { System.out.println(); System.out.print("CustomVisitorTest0.test3"); }


    randoop.test.A a1 = new randoop.test.A((-1));
    randoop.test.A a3 = new randoop.test.A((-1));
    randoop.test.A a4 = a3.a1();
    randoop.test.A a5 = a1.a1(a3);
    int i6 = a1.a6();
    int i9 = a1.a5(1, 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    a1.a1(a1); org.junit.Assert.assertEquals(a1.i, -89);
    a3.a1(a3); org.junit.Assert.assertEquals(a3.i, -9);
    a4.a1(a4); org.junit.Assert.assertEquals(a4.i, 1);
    a5.a1(a5); org.junit.Assert.assertEquals(a5.i, 1);

  }

  @Test
  public void test4() throws Throwable {

    if (debug) { System.out.println(); System.out.print("CustomVisitorTest0.test4"); }


    randoop.test.A a1 = new randoop.test.A((-1));
    randoop.test.A a3 = new randoop.test.A((-1));
    randoop.test.A a4 = a3.a1();
    randoop.test.A a5 = a1.a1(a3);
    randoop.test.A a6 = new randoop.test.A();
    randoop.test.A a7 = a3.a1(a6);
    int i10 = a7.a5(0, 1);
    randoop.test.A a12 = new randoop.test.A((-1));
    randoop.test.A a14 = new randoop.test.A((-1));
    randoop.test.A a16 = new randoop.test.A((-1));
    randoop.test.A a17 = a16.a1();
    randoop.test.A a18 = a14.a1(a16);
    randoop.test.A a19 = a12.a1(a18);
    randoop.test.A a21 = new randoop.test.A((-1));
    randoop.test.A a23 = new randoop.test.A((-1));
    randoop.test.A a24 = a23.a1();
    randoop.test.A a25 = a21.a1(a23);
    int i26 = a23.a6();
    randoop.test.A a28 = new randoop.test.A((-1));
    randoop.test.A a30 = new randoop.test.A((-1));
    randoop.test.A a31 = a30.a1();
    randoop.test.A a32 = a28.a1(a30);
    randoop.test.A a33 = new randoop.test.A();
    randoop.test.A a34 = a30.a1(a33);
    randoop.test.A a36 = new randoop.test.A((-1));
    randoop.test.A a38 = new randoop.test.A((-1));
    randoop.test.A a39 = a38.a1();
    randoop.test.A a40 = a36.a1(a38);
    randoop.test.A a41 = new randoop.test.A();
    randoop.test.A a42 = a38.a1(a41);
    randoop.test.A a43 = a33.a1(a41);
    randoop.test.A a45 = new randoop.test.A((-1));
    randoop.test.A a47 = new randoop.test.A((-1));
    randoop.test.A a48 = a47.a1();
    randoop.test.A a49 = a45.a1(a47);
    randoop.test.A a50 = a41.a1(a47);
    randoop.test.A a51 = new randoop.test.A();
    randoop.test.A a52 = a51.a1();
    randoop.test.A a53 = a41.a1(a51);
    randoop.test.A a55 = new randoop.test.A((-1));
    randoop.test.A a57 = new randoop.test.A((-1));
    randoop.test.A a58 = a57.a1();
    randoop.test.A a59 = a55.a1(a57);
    randoop.test.A a61 = new randoop.test.A((-1));
    randoop.test.A a63 = new randoop.test.A((-1));
    randoop.test.A a64 = a63.a1();
    randoop.test.A a65 = a61.a1(a63);
    randoop.test.A a67 = new randoop.test.A((-1));
    randoop.test.A a69 = new randoop.test.A((-1));
    randoop.test.A a70 = a69.a1();
    randoop.test.A a71 = a67.a1(a69);
    randoop.test.A a72 = new randoop.test.A();
    randoop.test.A a73 = a69.a1(a72);
    int i76 = a73.a5(0, 1);
    randoop.test.A a77 = a63.a1(a73);
    randoop.test.A a78 = new randoop.test.A();
    randoop.test.A a79 = a78.a1();
    randoop.test.B b80 = a63.a2(a78);
    randoop.test.B b82 = a53.a4(a59, b80, 0);
    int i83 = a23.a3(b80);
    int i84 = a7.a3(a18, b80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 1);
    a1.a1(a1); org.junit.Assert.assertEquals(a1.i, -89);
    a3.a1(a3); org.junit.Assert.assertEquals(a3.i, -89);
    a4.a1(a4); org.junit.Assert.assertEquals(a4.i, 1);
    a5.a1(a5); org.junit.Assert.assertEquals(a5.i, 1);
    a6.a1(a6); org.junit.Assert.assertEquals(a6.i, 1);
    a7.a1(a7); org.junit.Assert.assertEquals(a7.i, 11);
    a12.a1(a12); org.junit.Assert.assertEquals(a12.i, -89);
    a14.a1(a14); org.junit.Assert.assertEquals(a14.i, -89);
    a16.a1(a16); org.junit.Assert.assertEquals(a16.i, -9);
    a17.a1(a17); org.junit.Assert.assertEquals(a17.i, 1);
    a18.a1(a18); org.junit.Assert.assertEquals(a18.i, 1);
    a19.a1(a19); org.junit.Assert.assertEquals(a19.i, 11);
    a21.a1(a21); org.junit.Assert.assertEquals(a21.i, -89);
    a23.a1(a23); org.junit.Assert.assertEquals(a23.i, -9);
    a24.a1(a24); org.junit.Assert.assertEquals(a24.i, 1);
    a25.a1(a25); org.junit.Assert.assertEquals(a25.i, 1);
    a28.a1(a28); org.junit.Assert.assertEquals(a28.i, -89);
    a30.a1(a30); org.junit.Assert.assertEquals(a30.i, -89);
    a31.a1(a31); org.junit.Assert.assertEquals(a31.i, 1);
    a32.a1(a32); org.junit.Assert.assertEquals(a32.i, 1);
    a33.a1(a33); org.junit.Assert.assertEquals(a33.i, 11);
    a34.a1(a34); org.junit.Assert.assertEquals(a34.i, 11);
    a36.a1(a36); org.junit.Assert.assertEquals(a36.i, -89);
    a38.a1(a38); org.junit.Assert.assertEquals(a38.i, -89);
    a39.a1(a39); org.junit.Assert.assertEquals(a39.i, 1);
    a40.a1(a40); org.junit.Assert.assertEquals(a40.i, 1);
    a41.a1(a41); org.junit.Assert.assertEquals(a41.i, 111);
    a42.a1(a42); org.junit.Assert.assertEquals(a42.i, 11);
    a43.a1(a43); org.junit.Assert.assertEquals(a43.i, 11);
    a45.a1(a45); org.junit.Assert.assertEquals(a45.i, -89);
    a47.a1(a47); org.junit.Assert.assertEquals(a47.i, -9);
    a48.a1(a48); org.junit.Assert.assertEquals(a48.i, 1);
    a49.a1(a49); org.junit.Assert.assertEquals(a49.i, 1);
    a50.a1(a50); org.junit.Assert.assertEquals(a50.i, 1);
    a51.a1(a51); org.junit.Assert.assertEquals(a51.i, 1);
    a52.a1(a52); org.junit.Assert.assertEquals(a52.i, 1);
    a53.a1(a53); org.junit.Assert.assertEquals(a53.i, 11);
    a55.a1(a55); org.junit.Assert.assertEquals(a55.i, -89);
    a57.a1(a57); org.junit.Assert.assertEquals(a57.i, -9);
    a58.a1(a58); org.junit.Assert.assertEquals(a58.i, 1);
    a59.a1(a59); org.junit.Assert.assertEquals(a59.i, 1);
    a61.a1(a61); org.junit.Assert.assertEquals(a61.i, -89);
    a63.a1(a63); org.junit.Assert.assertEquals(a63.i, -89);
    a64.a1(a64); org.junit.Assert.assertEquals(a64.i, 1);
    a65.a1(a65); org.junit.Assert.assertEquals(a65.i, 1);
    a67.a1(a67); org.junit.Assert.assertEquals(a67.i, -89);
    a69.a1(a69); org.junit.Assert.assertEquals(a69.i, -89);
    a70.a1(a70); org.junit.Assert.assertEquals(a70.i, 1);
    a71.a1(a71); org.junit.Assert.assertEquals(a71.i, 1);
    a72.a1(a72); org.junit.Assert.assertEquals(a72.i, 1);
    a73.a1(a73); org.junit.Assert.assertEquals(a73.i, 11);
    a77.a1(a77); org.junit.Assert.assertEquals(a77.i, 21);
    a78.a1(a78); org.junit.Assert.assertEquals(a78.i, 1);
    a79.a1(a79); org.junit.Assert.assertEquals(a79.i, 1);

  }

  @Test
  public void test5() throws Throwable {

    if (debug) { System.out.println(); System.out.print("CustomVisitorTest0.test5"); }


    randoop.test.A a1 = new randoop.test.A((-1));
    randoop.test.A a3 = new randoop.test.A((-1));
    randoop.test.A a4 = a3.a1();
    randoop.test.A a5 = a1.a1(a3);
    int i6 = a3.a6();
    int i7 = a3.a6();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    a1.a1(a1); org.junit.Assert.assertEquals(a1.i, -89);
    a3.a1(a3); org.junit.Assert.assertEquals(a3.i, -9);
    a4.a1(a4); org.junit.Assert.assertEquals(a4.i, 1);
    a5.a1(a5); org.junit.Assert.assertEquals(a5.i, 1);

  }

  @Test
  public void test6() throws Throwable {

    if (debug) { System.out.println(); System.out.print("CustomVisitorTest0.test6"); }


    randoop.test.A a1 = new randoop.test.A((-1));
    randoop.test.A a2 = a1.a1();
    randoop.test.A a3 = a1.a1();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a3);
    a1.a1(a1); org.junit.Assert.assertEquals(a1.i, -9);
    a2.a1(a2); org.junit.Assert.assertEquals(a2.i, 1);
    a3.a1(a3); org.junit.Assert.assertEquals(a3.i, 1);

  }

  @Test
  public void test7() throws Throwable {

    if (debug) { System.out.println(); System.out.print("CustomVisitorTest0.test7"); }


    randoop.test.A a1 = new randoop.test.A((-1));
    randoop.test.A a3 = new randoop.test.A((-1));
    randoop.test.A a4 = a3.a1();
    randoop.test.A a5 = a1.a1(a3);
    randoop.test.A a6 = new randoop.test.A();
    randoop.test.A a7 = a3.a1(a6);
    randoop.test.A a9 = new randoop.test.A((-1));
    randoop.test.A a11 = new randoop.test.A((-1));
    randoop.test.A a12 = a11.a1();
    randoop.test.A a13 = a9.a1(a11);
    randoop.test.A a14 = new randoop.test.A();
    randoop.test.A a15 = a11.a1(a14);
    randoop.test.A a16 = a6.a1(a14);
    randoop.test.A a18 = new randoop.test.A((-1));
    randoop.test.A a20 = new randoop.test.A((-1));
    randoop.test.A a21 = a20.a1();
    randoop.test.A a22 = a18.a1(a20);
    randoop.test.A a23 = a14.a1(a20);
    randoop.test.A a24 = new randoop.test.A();
    randoop.test.A a25 = a24.a1();
    randoop.test.A a26 = a14.a1(a24);
    randoop.test.A a28 = new randoop.test.A((-1));
    randoop.test.A a30 = new randoop.test.A((-1));
    randoop.test.A a32 = new randoop.test.A((-1));
    randoop.test.A a33 = a32.a1();
    randoop.test.A a34 = a30.a1(a32);
    randoop.test.A a35 = a28.a1(a34);
    randoop.test.A a37 = new randoop.test.A((-1));
    randoop.test.A a39 = new randoop.test.A((-1));
    randoop.test.A a40 = a39.a1();
    randoop.test.A a41 = a37.a1(a39);
    randoop.test.A a43 = new randoop.test.A((-1));
    randoop.test.A a45 = new randoop.test.A((-1));
    randoop.test.A a46 = a45.a1();
    randoop.test.A a47 = a43.a1(a45);
    randoop.test.A a48 = new randoop.test.A();
    randoop.test.A a49 = a45.a1(a48);
    int i52 = a49.a5(0, 1);
    randoop.test.A a53 = a39.a1(a49);
    randoop.test.A a54 = new randoop.test.A();
    randoop.test.A a55 = a54.a1();
    randoop.test.B b56 = a39.a2(a54);
    int i57 = a28.a3(b56);
    int i58 = a26.a3(b56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 3);
    a1.a1(a1); org.junit.Assert.assertEquals(a1.i, -89);
    a3.a1(a3); org.junit.Assert.assertEquals(a3.i, -89);
    a4.a1(a4); org.junit.Assert.assertEquals(a4.i, 1);
    a5.a1(a5); org.junit.Assert.assertEquals(a5.i, 1);
    a6.a1(a6); org.junit.Assert.assertEquals(a6.i, 11);
    a7.a1(a7); org.junit.Assert.assertEquals(a7.i, 11);
    a9.a1(a9); org.junit.Assert.assertEquals(a9.i, -89);
    a11.a1(a11); org.junit.Assert.assertEquals(a11.i, -89);
    a12.a1(a12); org.junit.Assert.assertEquals(a12.i, 1);
    a13.a1(a13); org.junit.Assert.assertEquals(a13.i, 1);
    a14.a1(a14); org.junit.Assert.assertEquals(a14.i, 111);
    a15.a1(a15); org.junit.Assert.assertEquals(a15.i, 11);
    a16.a1(a16); org.junit.Assert.assertEquals(a16.i, 11);
    a18.a1(a18); org.junit.Assert.assertEquals(a18.i, -89);
    a20.a1(a20); org.junit.Assert.assertEquals(a20.i, -9);
    a21.a1(a21); org.junit.Assert.assertEquals(a21.i, 1);
    a22.a1(a22); org.junit.Assert.assertEquals(a22.i, 1);
    a23.a1(a23); org.junit.Assert.assertEquals(a23.i, 1);
    a24.a1(a24); org.junit.Assert.assertEquals(a24.i, 1);
    a25.a1(a25); org.junit.Assert.assertEquals(a25.i, 1);
    a26.a1(a26); org.junit.Assert.assertEquals(a26.i, 11);
    a28.a1(a28); org.junit.Assert.assertEquals(a28.i, -89);
    a30.a1(a30); org.junit.Assert.assertEquals(a30.i, -89);
    a32.a1(a32); org.junit.Assert.assertEquals(a32.i, -9);
    a33.a1(a33); org.junit.Assert.assertEquals(a33.i, 1);
    a34.a1(a34); org.junit.Assert.assertEquals(a34.i, 1);
    a35.a1(a35); org.junit.Assert.assertEquals(a35.i, 11);
    a37.a1(a37); org.junit.Assert.assertEquals(a37.i, -89);
    a39.a1(a39); org.junit.Assert.assertEquals(a39.i, -89);
    a40.a1(a40); org.junit.Assert.assertEquals(a40.i, 1);
    a41.a1(a41); org.junit.Assert.assertEquals(a41.i, 1);
    a43.a1(a43); org.junit.Assert.assertEquals(a43.i, -89);
    a45.a1(a45); org.junit.Assert.assertEquals(a45.i, -89);
    a46.a1(a46); org.junit.Assert.assertEquals(a46.i, 1);
    a47.a1(a47); org.junit.Assert.assertEquals(a47.i, 1);
    a48.a1(a48); org.junit.Assert.assertEquals(a48.i, 1);
    a49.a1(a49); org.junit.Assert.assertEquals(a49.i, 11);
    a53.a1(a53); org.junit.Assert.assertEquals(a53.i, 21);
    a54.a1(a54); org.junit.Assert.assertEquals(a54.i, 1);
    a55.a1(a55); org.junit.Assert.assertEquals(a55.i, 1);

  }

  @Test
  public void test8() throws Throwable {

    if (debug) { System.out.println(); System.out.print("CustomVisitorTest0.test8"); }


    randoop.test.A a1 = new randoop.test.A(1);
    randoop.test.A a2 = a1.a1();
    int i3 = a2.a6();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    a1.a1(a1); org.junit.Assert.assertEquals(a1.i, 11);
    a2.a1(a2); org.junit.Assert.assertEquals(a2.i, 1);

  }

  @Test
  public void test9() throws Throwable {

    if (debug) { System.out.println(); System.out.print("CustomVisitorTest0.test9"); }


    randoop.test.A a0 = new randoop.test.A();
    int i3 = a0.a5(10, (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    a0.a1(a0); org.junit.Assert.assertEquals(a0.i, 1);

  }

  @Test
  public void test10() throws Throwable {

    if (debug) { System.out.println(); System.out.print("CustomVisitorTest0.test10"); }


    randoop.test.A a1 = new randoop.test.A((-1));
    randoop.test.A a3 = new randoop.test.A((-1));
    randoop.test.A a4 = a3.a1();
    randoop.test.A a5 = a1.a1(a3);
    randoop.test.A a6 = new randoop.test.A();
    randoop.test.A a7 = a3.a1(a6);
    int i10 = a7.a5(0, 1);
    randoop.test.A a12 = new randoop.test.A((-1));
    randoop.test.A a14 = new randoop.test.A((-1));
    randoop.test.A a16 = new randoop.test.A((-1));
    randoop.test.A a17 = a16.a1();
    randoop.test.A a18 = a14.a1(a16);
    randoop.test.A a19 = a12.a1(a18);
    int i20 = a19.a6();
    randoop.test.A a22 = new randoop.test.A(0);
    randoop.test.A a24 = new randoop.test.A(100);
    randoop.test.A a26 = new randoop.test.A((-1));
    randoop.test.A a28 = new randoop.test.A((-1));
    randoop.test.A a29 = a28.a1();
    randoop.test.A a30 = a26.a1(a28);
    randoop.test.A a32 = new randoop.test.A((-1));
    randoop.test.A a34 = new randoop.test.A((-1));
    randoop.test.A a35 = a34.a1();
    randoop.test.A a36 = a32.a1(a34);
    randoop.test.A a37 = new randoop.test.A();
    randoop.test.A a38 = a34.a1(a37);
    int i41 = a38.a5(0, 1);
    randoop.test.A a42 = a28.a1(a38);
    randoop.test.A a43 = new randoop.test.A();
    randoop.test.A a44 = a43.a1();
    randoop.test.B b45 = a28.a2(a43);
    int i46 = a22.a3(a24, b45);
    randoop.test.B b48 = a7.a4(a19, b45, 10);
    int i51 = a7.a5(0, 3);
    int i54 = a7.a5(10, 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 1);
    a1.a1(a1); org.junit.Assert.assertEquals(a1.i, -89);
    a3.a1(a3); org.junit.Assert.assertEquals(a3.i, -89);
    a4.a1(a4); org.junit.Assert.assertEquals(a4.i, 1);
    a5.a1(a5); org.junit.Assert.assertEquals(a5.i, 1);
    a6.a1(a6); org.junit.Assert.assertEquals(a6.i, 1);
    a7.a1(a7); org.junit.Assert.assertEquals(a7.i, 11);
    a12.a1(a12); org.junit.Assert.assertEquals(a12.i, -89);
    a14.a1(a14); org.junit.Assert.assertEquals(a14.i, -89);
    a16.a1(a16); org.junit.Assert.assertEquals(a16.i, -9);
    a17.a1(a17); org.junit.Assert.assertEquals(a17.i, 1);
    a18.a1(a18); org.junit.Assert.assertEquals(a18.i, 1);
    a19.a1(a19); org.junit.Assert.assertEquals(a19.i, 11);
    a22.a1(a22); org.junit.Assert.assertEquals(a22.i, 1);
    a24.a1(a24); org.junit.Assert.assertEquals(a24.i, 1001);
    a26.a1(a26); org.junit.Assert.assertEquals(a26.i, -89);
    a28.a1(a28); org.junit.Assert.assertEquals(a28.i, -89);
    a29.a1(a29); org.junit.Assert.assertEquals(a29.i, 1);
    a30.a1(a30); org.junit.Assert.assertEquals(a30.i, 1);
    a32.a1(a32); org.junit.Assert.assertEquals(a32.i, -89);
    a34.a1(a34); org.junit.Assert.assertEquals(a34.i, -89);
    a35.a1(a35); org.junit.Assert.assertEquals(a35.i, 1);
    a36.a1(a36); org.junit.Assert.assertEquals(a36.i, 1);
    a37.a1(a37); org.junit.Assert.assertEquals(a37.i, 1);
    a38.a1(a38); org.junit.Assert.assertEquals(a38.i, 11);
    a42.a1(a42); org.junit.Assert.assertEquals(a42.i, 21);
    a43.a1(a43); org.junit.Assert.assertEquals(a43.i, 1);
    a44.a1(a44); org.junit.Assert.assertEquals(a44.i, 1);

  }

  @Test
  public void test11() throws Throwable {

    if (debug) { System.out.println(); System.out.print("CustomVisitorTest0.test11"); }


    randoop.test.A a1 = new randoop.test.A((-1));
    randoop.test.A a3 = new randoop.test.A((-1));
    randoop.test.A a4 = a3.a1();
    randoop.test.A a5 = a1.a1(a3);
    randoop.test.A a6 = new randoop.test.A();
    randoop.test.A a7 = a3.a1(a6);
    int i10 = a7.a5(0, 1);
    randoop.test.A a12 = new randoop.test.A((-1));
    randoop.test.A a14 = new randoop.test.A((-1));
    randoop.test.A a16 = new randoop.test.A((-1));
    randoop.test.A a17 = a16.a1();
    randoop.test.A a18 = a14.a1(a16);
    randoop.test.A a19 = a12.a1(a18);
    int i20 = a19.a6();
    randoop.test.A a22 = new randoop.test.A(0);
    randoop.test.A a24 = new randoop.test.A(100);
    randoop.test.A a26 = new randoop.test.A((-1));
    randoop.test.A a28 = new randoop.test.A((-1));
    randoop.test.A a29 = a28.a1();
    randoop.test.A a30 = a26.a1(a28);
    randoop.test.A a32 = new randoop.test.A((-1));
    randoop.test.A a34 = new randoop.test.A((-1));
    randoop.test.A a35 = a34.a1();
    randoop.test.A a36 = a32.a1(a34);
    randoop.test.A a37 = new randoop.test.A();
    randoop.test.A a38 = a34.a1(a37);
    int i41 = a38.a5(0, 1);
    randoop.test.A a42 = a28.a1(a38);
    randoop.test.A a43 = new randoop.test.A();
    randoop.test.A a44 = a43.a1();
    randoop.test.B b45 = a28.a2(a43);
    int i46 = a22.a3(a24, b45);
    randoop.test.B b48 = a7.a4(a19, b45, 10);
    int i51 = a19.a5((-1), 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 1);
    a1.a1(a1); org.junit.Assert.assertEquals(a1.i, -89);
    a3.a1(a3); org.junit.Assert.assertEquals(a3.i, -89);
    a4.a1(a4); org.junit.Assert.assertEquals(a4.i, 1);
    a5.a1(a5); org.junit.Assert.assertEquals(a5.i, 1);
    a6.a1(a6); org.junit.Assert.assertEquals(a6.i, 1);
    a7.a1(a7); org.junit.Assert.assertEquals(a7.i, 11);
    a12.a1(a12); org.junit.Assert.assertEquals(a12.i, -89);
    a14.a1(a14); org.junit.Assert.assertEquals(a14.i, -89);
    a16.a1(a16); org.junit.Assert.assertEquals(a16.i, -9);
    a17.a1(a17); org.junit.Assert.assertEquals(a17.i, 1);
    a18.a1(a18); org.junit.Assert.assertEquals(a18.i, 1);
    a19.a1(a19); org.junit.Assert.assertEquals(a19.i, 11);
    a22.a1(a22); org.junit.Assert.assertEquals(a22.i, 1);
    a24.a1(a24); org.junit.Assert.assertEquals(a24.i, 1001);
    a26.a1(a26); org.junit.Assert.assertEquals(a26.i, -89);
    a28.a1(a28); org.junit.Assert.assertEquals(a28.i, -89);
    a29.a1(a29); org.junit.Assert.assertEquals(a29.i, 1);
    a30.a1(a30); org.junit.Assert.assertEquals(a30.i, 1);
    a32.a1(a32); org.junit.Assert.assertEquals(a32.i, -89);
    a34.a1(a34); org.junit.Assert.assertEquals(a34.i, -89);
    a35.a1(a35); org.junit.Assert.assertEquals(a35.i, 1);
    a36.a1(a36); org.junit.Assert.assertEquals(a36.i, 1);
    a37.a1(a37); org.junit.Assert.assertEquals(a37.i, 1);
    a38.a1(a38); org.junit.Assert.assertEquals(a38.i, 11);
    a42.a1(a42); org.junit.Assert.assertEquals(a42.i, 21);
    a43.a1(a43); org.junit.Assert.assertEquals(a43.i, 1);
    a44.a1(a44); org.junit.Assert.assertEquals(a44.i, 1);

  }

  @Test
  public void test12() throws Throwable {

    if (debug) { System.out.println(); System.out.print("CustomVisitorTest0.test12"); }


    randoop.test.A a1 = new randoop.test.A((-1));
    randoop.test.A a3 = new randoop.test.A((-1));
    randoop.test.A a4 = a3.a1();
    randoop.test.A a5 = a1.a1(a3);
    randoop.test.A a6 = new randoop.test.A();
    randoop.test.A a7 = a3.a1(a6);
    randoop.test.A a9 = new randoop.test.A((-1));
    randoop.test.A a11 = new randoop.test.A((-1));
    randoop.test.A a12 = a11.a1();
    randoop.test.A a13 = a9.a1(a11);
    randoop.test.A a14 = new randoop.test.A();
    randoop.test.A a15 = a11.a1(a14);
    randoop.test.A a16 = a6.a1(a14);
    randoop.test.A a18 = new randoop.test.A((-1));
    randoop.test.A a20 = new randoop.test.A((-1));
    randoop.test.A a21 = a20.a1();
    randoop.test.A a22 = a18.a1(a20);
    randoop.test.A a23 = a14.a1(a20);
    int i24 = a23.a6();
    int i27 = a23.a5(10, (-1));
    randoop.test.A a29 = new randoop.test.A((-1));
    randoop.test.A a31 = new randoop.test.A((-1));
    randoop.test.A a32 = a31.a1();
    randoop.test.A a33 = a29.a1(a31);
    randoop.test.A a35 = new randoop.test.A((-1));
    randoop.test.A a37 = new randoop.test.A((-1));
    randoop.test.A a38 = a37.a1();
    randoop.test.A a39 = a35.a1(a37);
    randoop.test.A a40 = new randoop.test.A();
    randoop.test.A a41 = a37.a1(a40);
    int i44 = a41.a5(0, 1);
    randoop.test.A a45 = a31.a1(a41);
    randoop.test.A a47 = new randoop.test.A((-1));
    randoop.test.A a49 = new randoop.test.A((-1));
    randoop.test.A a50 = a49.a1();
    randoop.test.A a51 = a47.a1(a49);
    int i52 = a47.a6();
    randoop.test.A a54 = new randoop.test.A(0);
    randoop.test.A a56 = new randoop.test.A((-1));
    randoop.test.A a58 = new randoop.test.A((-1));
    randoop.test.A a60 = new randoop.test.A((-1));
    randoop.test.A a61 = a60.a1();
    randoop.test.A a62 = a58.a1(a60);
    randoop.test.A a63 = a56.a1(a62);
    randoop.test.A a65 = new randoop.test.A((-1));
    randoop.test.A a67 = new randoop.test.A((-1));
    randoop.test.A a68 = a67.a1();
    randoop.test.A a69 = a65.a1(a67);
    randoop.test.A a70 = new randoop.test.A();
    randoop.test.A a71 = a67.a1(a70);
    randoop.test.A a73 = new randoop.test.A((-1));
    randoop.test.A a75 = new randoop.test.A((-1));
    randoop.test.A a77 = new randoop.test.A((-1));
    randoop.test.A a78 = a77.a1();
    randoop.test.A a79 = a75.a1(a77);
    randoop.test.A a80 = a73.a1(a79);
    int i81 = a80.a6();
    randoop.test.B b82 = a71.a2(a80);
    randoop.test.B b84 = a54.a4(a56, b82, 1);
    int i85 = a45.a3(a47, b82);
    randoop.test.A a86 = new randoop.test.A(b82);
    int i87 = a23.a3(b82);
    randoop.test.A a88 = new randoop.test.A(b82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 3);
    a1.a1(a1); org.junit.Assert.assertEquals(a1.i, -89);
    a3.a1(a3); org.junit.Assert.assertEquals(a3.i, -89);
    a4.a1(a4); org.junit.Assert.assertEquals(a4.i, 1);
    a5.a1(a5); org.junit.Assert.assertEquals(a5.i, 1);
    a6.a1(a6); org.junit.Assert.assertEquals(a6.i, 11);
    a7.a1(a7); org.junit.Assert.assertEquals(a7.i, 11);
    a9.a1(a9); org.junit.Assert.assertEquals(a9.i, -89);
    a11.a1(a11); org.junit.Assert.assertEquals(a11.i, -89);
    a12.a1(a12); org.junit.Assert.assertEquals(a12.i, 1);
    a13.a1(a13); org.junit.Assert.assertEquals(a13.i, 1);
    a14.a1(a14); org.junit.Assert.assertEquals(a14.i, 11);
    a15.a1(a15); org.junit.Assert.assertEquals(a15.i, 11);
    a16.a1(a16); org.junit.Assert.assertEquals(a16.i, 11);
    a18.a1(a18); org.junit.Assert.assertEquals(a18.i, -89);
    a20.a1(a20); org.junit.Assert.assertEquals(a20.i, -9);
    a21.a1(a21); org.junit.Assert.assertEquals(a21.i, 1);
    a22.a1(a22); org.junit.Assert.assertEquals(a22.i, 1);
    a23.a1(a23); org.junit.Assert.assertEquals(a23.i, 1);
    a29.a1(a29); org.junit.Assert.assertEquals(a29.i, -89);
    a31.a1(a31); org.junit.Assert.assertEquals(a31.i, -89);
    a32.a1(a32); org.junit.Assert.assertEquals(a32.i, 1);
    a33.a1(a33); org.junit.Assert.assertEquals(a33.i, 1);
    a35.a1(a35); org.junit.Assert.assertEquals(a35.i, -89);
    a37.a1(a37); org.junit.Assert.assertEquals(a37.i, -89);
    a38.a1(a38); org.junit.Assert.assertEquals(a38.i, 1);
    a39.a1(a39); org.junit.Assert.assertEquals(a39.i, 1);
    a40.a1(a40); org.junit.Assert.assertEquals(a40.i, 1);
    a41.a1(a41); org.junit.Assert.assertEquals(a41.i, 11);
    a45.a1(a45); org.junit.Assert.assertEquals(a45.i, 21);
    a47.a1(a47); org.junit.Assert.assertEquals(a47.i, -89);
    a49.a1(a49); org.junit.Assert.assertEquals(a49.i, -9);
    a50.a1(a50); org.junit.Assert.assertEquals(a50.i, 1);
    a51.a1(a51); org.junit.Assert.assertEquals(a51.i, 1);
    a54.a1(a54); org.junit.Assert.assertEquals(a54.i, 1);
    a56.a1(a56); org.junit.Assert.assertEquals(a56.i, -89);
    a58.a1(a58); org.junit.Assert.assertEquals(a58.i, -89);
    a60.a1(a60); org.junit.Assert.assertEquals(a60.i, -9);
    a61.a1(a61); org.junit.Assert.assertEquals(a61.i, 1);
    a62.a1(a62); org.junit.Assert.assertEquals(a62.i, 1);
    a63.a1(a63); org.junit.Assert.assertEquals(a63.i, 11);
    a65.a1(a65); org.junit.Assert.assertEquals(a65.i, -89);
    a67.a1(a67); org.junit.Assert.assertEquals(a67.i, -89);
    a68.a1(a68); org.junit.Assert.assertEquals(a68.i, 1);
    a69.a1(a69); org.junit.Assert.assertEquals(a69.i, 1);
    a70.a1(a70); org.junit.Assert.assertEquals(a70.i, 1);
    a71.a1(a71); org.junit.Assert.assertEquals(a71.i, 11);
    a73.a1(a73); org.junit.Assert.assertEquals(a73.i, -89);
    a75.a1(a75); org.junit.Assert.assertEquals(a75.i, -89);
    a77.a1(a77); org.junit.Assert.assertEquals(a77.i, -9);
    a78.a1(a78); org.junit.Assert.assertEquals(a78.i, 1);
    a79.a1(a79); org.junit.Assert.assertEquals(a79.i, 1);
    a80.a1(a80); org.junit.Assert.assertEquals(a80.i, 11);
    a86.a1(a86); org.junit.Assert.assertEquals(a86.i, 1);
    a88.a1(a88); org.junit.Assert.assertEquals(a88.i, 1);

  }

  @Test
  public void test13() throws Throwable {

    if (debug) { System.out.println(); System.out.print("CustomVisitorTest0.test13"); }


    randoop.test.A a1 = new randoop.test.A((-1));
    randoop.test.A a3 = new randoop.test.A((-1));
    randoop.test.A a4 = a3.a1();
    randoop.test.A a5 = a1.a1(a3);
    randoop.test.A a7 = new randoop.test.A((-1));
    randoop.test.A a9 = new randoop.test.A((-1));
    randoop.test.A a10 = a9.a1();
    randoop.test.A a11 = a7.a1(a9);
    randoop.test.A a12 = new randoop.test.A();
    randoop.test.A a13 = a9.a1(a12);
    int i16 = a13.a5(0, 1);
    randoop.test.A a17 = a3.a1(a13);
    randoop.test.A a19 = new randoop.test.A((-1));
    randoop.test.A a21 = new randoop.test.A((-1));
    randoop.test.A a22 = a21.a1();
    randoop.test.A a23 = a19.a1(a21);
    randoop.test.A a24 = new randoop.test.A();
    randoop.test.A a25 = a21.a1(a24);
    int i28 = a25.a5(0, 1);
    randoop.test.A a30 = new randoop.test.A((-1));
    randoop.test.A a32 = new randoop.test.A((-1));
    randoop.test.A a34 = new randoop.test.A((-1));
    randoop.test.A a35 = a34.a1();
    randoop.test.A a36 = a32.a1(a34);
    randoop.test.A a37 = a30.a1(a36);
    int i38 = a37.a6();
    randoop.test.A a40 = new randoop.test.A(0);
    randoop.test.A a42 = new randoop.test.A(100);
    randoop.test.A a44 = new randoop.test.A((-1));
    randoop.test.A a46 = new randoop.test.A((-1));
    randoop.test.A a47 = a46.a1();
    randoop.test.A a48 = a44.a1(a46);
    randoop.test.A a50 = new randoop.test.A((-1));
    randoop.test.A a52 = new randoop.test.A((-1));
    randoop.test.A a53 = a52.a1();
    randoop.test.A a54 = a50.a1(a52);
    randoop.test.A a55 = new randoop.test.A();
    randoop.test.A a56 = a52.a1(a55);
    int i59 = a56.a5(0, 1);
    randoop.test.A a60 = a46.a1(a56);
    randoop.test.A a61 = new randoop.test.A();
    randoop.test.A a62 = a61.a1();
    randoop.test.B b63 = a46.a2(a61);
    int i64 = a40.a3(a42, b63);
    randoop.test.B b66 = a25.a4(a37, b63, 10);
    int i67 = a17.a3(b66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 3);
    a1.a1(a1); org.junit.Assert.assertEquals(a1.i, -89);
    a3.a1(a3); org.junit.Assert.assertEquals(a3.i, -89);
    a4.a1(a4); org.junit.Assert.assertEquals(a4.i, 1);
    a5.a1(a5); org.junit.Assert.assertEquals(a5.i, 1);
    a7.a1(a7); org.junit.Assert.assertEquals(a7.i, -89);
    a9.a1(a9); org.junit.Assert.assertEquals(a9.i, -89);
    a10.a1(a10); org.junit.Assert.assertEquals(a10.i, 1);
    a11.a1(a11); org.junit.Assert.assertEquals(a11.i, 1);
    a12.a1(a12); org.junit.Assert.assertEquals(a12.i, 1);
    a13.a1(a13); org.junit.Assert.assertEquals(a13.i, 11);
    a17.a1(a17); org.junit.Assert.assertEquals(a17.i, 21);
    a19.a1(a19); org.junit.Assert.assertEquals(a19.i, -89);
    a21.a1(a21); org.junit.Assert.assertEquals(a21.i, -89);
    a22.a1(a22); org.junit.Assert.assertEquals(a22.i, 1);
    a23.a1(a23); org.junit.Assert.assertEquals(a23.i, 1);
    a24.a1(a24); org.junit.Assert.assertEquals(a24.i, 1);
    a25.a1(a25); org.junit.Assert.assertEquals(a25.i, 11);
    a30.a1(a30); org.junit.Assert.assertEquals(a30.i, -89);
    a32.a1(a32); org.junit.Assert.assertEquals(a32.i, -89);
    a34.a1(a34); org.junit.Assert.assertEquals(a34.i, -9);
    a35.a1(a35); org.junit.Assert.assertEquals(a35.i, 1);
    a36.a1(a36); org.junit.Assert.assertEquals(a36.i, 1);
    a37.a1(a37); org.junit.Assert.assertEquals(a37.i, 11);
    a40.a1(a40); org.junit.Assert.assertEquals(a40.i, 1);
    a42.a1(a42); org.junit.Assert.assertEquals(a42.i, 1001);
    a44.a1(a44); org.junit.Assert.assertEquals(a44.i, -89);
    a46.a1(a46); org.junit.Assert.assertEquals(a46.i, -89);
    a47.a1(a47); org.junit.Assert.assertEquals(a47.i, 1);
    a48.a1(a48); org.junit.Assert.assertEquals(a48.i, 1);
    a50.a1(a50); org.junit.Assert.assertEquals(a50.i, -89);
    a52.a1(a52); org.junit.Assert.assertEquals(a52.i, -89);
    a53.a1(a53); org.junit.Assert.assertEquals(a53.i, 1);
    a54.a1(a54); org.junit.Assert.assertEquals(a54.i, 1);
    a55.a1(a55); org.junit.Assert.assertEquals(a55.i, 1);
    a56.a1(a56); org.junit.Assert.assertEquals(a56.i, 11);
    a60.a1(a60); org.junit.Assert.assertEquals(a60.i, 21);
    a61.a1(a61); org.junit.Assert.assertEquals(a61.i, 1);
    a62.a1(a62); org.junit.Assert.assertEquals(a62.i, 1);

  }

  @Test
  public void test14() throws Throwable {

    if (debug) { System.out.println(); System.out.print("CustomVisitorTest0.test14"); }


    randoop.test.A a1 = new randoop.test.A((-1));
    randoop.test.A a3 = new randoop.test.A((-1));
    randoop.test.A a4 = a3.a1();
    randoop.test.A a5 = a1.a1(a3);
    randoop.test.A a6 = new randoop.test.A();
    randoop.test.A a7 = a3.a1(a6);
    int i10 = a7.a5(0, 1);
    int i13 = a7.a5(0, 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    a1.a1(a1); org.junit.Assert.assertEquals(a1.i, -89);
    a3.a1(a3); org.junit.Assert.assertEquals(a3.i, -89);
    a4.a1(a4); org.junit.Assert.assertEquals(a4.i, 1);
    a5.a1(a5); org.junit.Assert.assertEquals(a5.i, 1);
    a6.a1(a6); org.junit.Assert.assertEquals(a6.i, 1);
    a7.a1(a7); org.junit.Assert.assertEquals(a7.i, 11);

  }

  @Test
  public void test15() throws Throwable {

    if (debug) { System.out.println(); System.out.print("CustomVisitorTest0.test15"); }


    randoop.test.A a1 = new randoop.test.A((-1));
    randoop.test.A a2 = a1.a1();
    randoop.test.A a4 = new randoop.test.A((-1));
    randoop.test.A a6 = new randoop.test.A((-1));
    randoop.test.A a7 = a6.a1();
    randoop.test.A a8 = a4.a1(a6);
    randoop.test.A a9 = new randoop.test.A();
    randoop.test.A a10 = a6.a1(a9);
    int i13 = a10.a5(0, 1);
    int i14 = a10.a6();
    randoop.test.A a16 = new randoop.test.A((-1));
    randoop.test.A a18 = new randoop.test.A((-1));
    randoop.test.A a19 = a18.a1();
    randoop.test.A a20 = a16.a1(a18);
    int i21 = a18.a6();
    randoop.test.A a23 = new randoop.test.A(100);
    randoop.test.A a25 = new randoop.test.A((-1));
    randoop.test.A a27 = new randoop.test.A((-1));
    randoop.test.A a28 = a27.a1();
    randoop.test.A a29 = a25.a1(a27);
    randoop.test.A a30 = new randoop.test.A();
    randoop.test.A a31 = a27.a1(a30);
    randoop.test.A a33 = new randoop.test.A((-1));
    randoop.test.A a35 = new randoop.test.A((-1));
    randoop.test.A a36 = a35.a1();
    randoop.test.A a37 = a33.a1(a35);
    randoop.test.A a38 = new randoop.test.A();
    randoop.test.A a39 = a35.a1(a38);
    randoop.test.A a40 = a30.a1(a38);
    randoop.test.A a42 = new randoop.test.A((-1));
    randoop.test.A a44 = new randoop.test.A((-1));
    randoop.test.A a45 = a44.a1();
    randoop.test.A a46 = a42.a1(a44);
    randoop.test.A a47 = a38.a1(a44);
    randoop.test.A a48 = new randoop.test.A();
    randoop.test.A a49 = a48.a1();
    randoop.test.A a50 = a38.a1(a48);
    randoop.test.A a52 = new randoop.test.A((-1));
    randoop.test.A a54 = new randoop.test.A((-1));
    randoop.test.A a55 = a54.a1();
    randoop.test.A a56 = a52.a1(a54);
    randoop.test.A a58 = new randoop.test.A((-1));
    randoop.test.A a60 = new randoop.test.A((-1));
    randoop.test.A a61 = a60.a1();
    randoop.test.A a62 = a58.a1(a60);
    randoop.test.A a64 = new randoop.test.A((-1));
    randoop.test.A a66 = new randoop.test.A((-1));
    randoop.test.A a67 = a66.a1();
    randoop.test.A a68 = a64.a1(a66);
    randoop.test.A a69 = new randoop.test.A();
    randoop.test.A a70 = a66.a1(a69);
    int i73 = a70.a5(0, 1);
    randoop.test.A a74 = a60.a1(a70);
    randoop.test.A a75 = new randoop.test.A();
    randoop.test.A a76 = a75.a1();
    randoop.test.B b77 = a60.a2(a75);
    randoop.test.B b79 = a50.a4(a56, b77, 0);
    int i80 = a18.a3(a23, b79);
    randoop.test.A a82 = new randoop.test.A((-1));
    int i85 = a82.a5(10, (-1));
    randoop.test.B b86 = a18.a2(a82);
    int i87 = a2.a3(a10, b86);
    int i88 = a2.a6();
    randoop.test.A a89 = a2.a1();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a89);
    a1.a1(a1); org.junit.Assert.assertEquals(a1.i, -9);
    a2.a1(a2); org.junit.Assert.assertEquals(a2.i, 1);
    a4.a1(a4); org.junit.Assert.assertEquals(a4.i, -89);
    a6.a1(a6); org.junit.Assert.assertEquals(a6.i, -89);
    a7.a1(a7); org.junit.Assert.assertEquals(a7.i, 1);
    a8.a1(a8); org.junit.Assert.assertEquals(a8.i, 1);
    a9.a1(a9); org.junit.Assert.assertEquals(a9.i, 1);
    a10.a1(a10); org.junit.Assert.assertEquals(a10.i, 11);
    a16.a1(a16); org.junit.Assert.assertEquals(a16.i, -89);
    a18.a1(a18); org.junit.Assert.assertEquals(a18.i, -9);
    a19.a1(a19); org.junit.Assert.assertEquals(a19.i, 1);
    a20.a1(a20); org.junit.Assert.assertEquals(a20.i, 1);
    a23.a1(a23); org.junit.Assert.assertEquals(a23.i, 1001);
    a25.a1(a25); org.junit.Assert.assertEquals(a25.i, -89);
    a27.a1(a27); org.junit.Assert.assertEquals(a27.i, -89);
    a28.a1(a28); org.junit.Assert.assertEquals(a28.i, 1);
    a29.a1(a29); org.junit.Assert.assertEquals(a29.i, 1);
    a30.a1(a30); org.junit.Assert.assertEquals(a30.i, 11);
    a31.a1(a31); org.junit.Assert.assertEquals(a31.i, 11);
    a33.a1(a33); org.junit.Assert.assertEquals(a33.i, -89);
    a35.a1(a35); org.junit.Assert.assertEquals(a35.i, -89);
    a36.a1(a36); org.junit.Assert.assertEquals(a36.i, 1);
    a37.a1(a37); org.junit.Assert.assertEquals(a37.i, 1);
    a38.a1(a38); org.junit.Assert.assertEquals(a38.i, 111);
    a39.a1(a39); org.junit.Assert.assertEquals(a39.i, 11);
    a40.a1(a40); org.junit.Assert.assertEquals(a40.i, 11);
    a42.a1(a42); org.junit.Assert.assertEquals(a42.i, -89);
    a44.a1(a44); org.junit.Assert.assertEquals(a44.i, -9);
    a45.a1(a45); org.junit.Assert.assertEquals(a45.i, 1);
    a46.a1(a46); org.junit.Assert.assertEquals(a46.i, 1);
    a47.a1(a47); org.junit.Assert.assertEquals(a47.i, 1);
    a48.a1(a48); org.junit.Assert.assertEquals(a48.i, 1);
    a49.a1(a49); org.junit.Assert.assertEquals(a49.i, 1);
    a50.a1(a50); org.junit.Assert.assertEquals(a50.i, 11);
    a52.a1(a52); org.junit.Assert.assertEquals(a52.i, -89);
    a54.a1(a54); org.junit.Assert.assertEquals(a54.i, -9);
    a55.a1(a55); org.junit.Assert.assertEquals(a55.i, 1);
    a56.a1(a56); org.junit.Assert.assertEquals(a56.i, 1);
    a58.a1(a58); org.junit.Assert.assertEquals(a58.i, -89);
    a60.a1(a60); org.junit.Assert.assertEquals(a60.i, -89);
    a61.a1(a61); org.junit.Assert.assertEquals(a61.i, 1);
    a62.a1(a62); org.junit.Assert.assertEquals(a62.i, 1);
    a64.a1(a64); org.junit.Assert.assertEquals(a64.i, -89);
    a66.a1(a66); org.junit.Assert.assertEquals(a66.i, -89);
    a67.a1(a67); org.junit.Assert.assertEquals(a67.i, 1);
    a68.a1(a68); org.junit.Assert.assertEquals(a68.i, 1);
    a69.a1(a69); org.junit.Assert.assertEquals(a69.i, 1);
    a70.a1(a70); org.junit.Assert.assertEquals(a70.i, 11);
    a74.a1(a74); org.junit.Assert.assertEquals(a74.i, 21);
    a75.a1(a75); org.junit.Assert.assertEquals(a75.i, 1);
    a76.a1(a76); org.junit.Assert.assertEquals(a76.i, 1);
    a82.a1(a82); org.junit.Assert.assertEquals(a82.i, -9);
    a89.a1(a89); org.junit.Assert.assertEquals(a89.i, 1);

  }

  @Test
  public void test16() throws Throwable {

    if (debug) { System.out.println(); System.out.print("CustomVisitorTest0.test16"); }


    randoop.test.A a1 = new randoop.test.A((-1));
    randoop.test.A a3 = new randoop.test.A((-1));
    randoop.test.A a4 = a3.a1();
    randoop.test.A a5 = a1.a1(a3);
    randoop.test.A a7 = new randoop.test.A((-1));
    randoop.test.A a9 = new randoop.test.A((-1));
    randoop.test.A a10 = a9.a1();
    randoop.test.A a11 = a7.a1(a9);
    randoop.test.A a12 = new randoop.test.A();
    randoop.test.A a13 = a9.a1(a12);
    int i16 = a13.a5(0, 1);
    randoop.test.A a17 = a3.a1(a13);
    int i18 = a17.a6();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    a1.a1(a1); org.junit.Assert.assertEquals(a1.i, -89);
    a3.a1(a3); org.junit.Assert.assertEquals(a3.i, -89);
    a4.a1(a4); org.junit.Assert.assertEquals(a4.i, 1);
    a5.a1(a5); org.junit.Assert.assertEquals(a5.i, 1);
    a7.a1(a7); org.junit.Assert.assertEquals(a7.i, -89);
    a9.a1(a9); org.junit.Assert.assertEquals(a9.i, -89);
    a10.a1(a10); org.junit.Assert.assertEquals(a10.i, 1);
    a11.a1(a11); org.junit.Assert.assertEquals(a11.i, 1);
    a12.a1(a12); org.junit.Assert.assertEquals(a12.i, 1);
    a13.a1(a13); org.junit.Assert.assertEquals(a13.i, 11);
    a17.a1(a17); org.junit.Assert.assertEquals(a17.i, 21);

  }

  @Test
  public void test17() throws Throwable {

    if (debug) { System.out.println(); System.out.print("CustomVisitorTest0.test17"); }


    randoop.test.A a1 = new randoop.test.A((-1));
    randoop.test.A a3 = new randoop.test.A((-1));
    randoop.test.A a4 = a3.a1();
    randoop.test.A a5 = a1.a1(a3);
    randoop.test.A a6 = new randoop.test.A();
    randoop.test.A a7 = a3.a1(a6);
    int i10 = a7.a5(0, 1);
    randoop.test.A a12 = new randoop.test.A((-1));
    randoop.test.A a14 = new randoop.test.A((-1));
    randoop.test.A a16 = new randoop.test.A((-1));
    randoop.test.A a17 = a16.a1();
    randoop.test.A a18 = a14.a1(a16);
    randoop.test.A a19 = a12.a1(a18);
    int i20 = a19.a6();
    randoop.test.A a22 = new randoop.test.A(0);
    randoop.test.A a24 = new randoop.test.A(100);
    randoop.test.A a26 = new randoop.test.A((-1));
    randoop.test.A a28 = new randoop.test.A((-1));
    randoop.test.A a29 = a28.a1();
    randoop.test.A a30 = a26.a1(a28);
    randoop.test.A a32 = new randoop.test.A((-1));
    randoop.test.A a34 = new randoop.test.A((-1));
    randoop.test.A a35 = a34.a1();
    randoop.test.A a36 = a32.a1(a34);
    randoop.test.A a37 = new randoop.test.A();
    randoop.test.A a38 = a34.a1(a37);
    int i41 = a38.a5(0, 1);
    randoop.test.A a42 = a28.a1(a38);
    randoop.test.A a43 = new randoop.test.A();
    randoop.test.A a44 = a43.a1();
    randoop.test.B b45 = a28.a2(a43);
    int i46 = a22.a3(a24, b45);
    randoop.test.B b48 = a7.a4(a19, b45, 10);
    randoop.test.A a49 = new randoop.test.A(b48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b48);
    a1.a1(a1); org.junit.Assert.assertEquals(a1.i, -89);
    a3.a1(a3); org.junit.Assert.assertEquals(a3.i, -89);
    a4.a1(a4); org.junit.Assert.assertEquals(a4.i, 1);
    a5.a1(a5); org.junit.Assert.assertEquals(a5.i, 1);
    a6.a1(a6); org.junit.Assert.assertEquals(a6.i, 1);
    a7.a1(a7); org.junit.Assert.assertEquals(a7.i, 11);
    a12.a1(a12); org.junit.Assert.assertEquals(a12.i, -89);
    a14.a1(a14); org.junit.Assert.assertEquals(a14.i, -89);
    a16.a1(a16); org.junit.Assert.assertEquals(a16.i, -9);
    a17.a1(a17); org.junit.Assert.assertEquals(a17.i, 1);
    a18.a1(a18); org.junit.Assert.assertEquals(a18.i, 1);
    a19.a1(a19); org.junit.Assert.assertEquals(a19.i, 11);
    a22.a1(a22); org.junit.Assert.assertEquals(a22.i, 1);
    a24.a1(a24); org.junit.Assert.assertEquals(a24.i, 1001);
    a26.a1(a26); org.junit.Assert.assertEquals(a26.i, -89);
    a28.a1(a28); org.junit.Assert.assertEquals(a28.i, -89);
    a29.a1(a29); org.junit.Assert.assertEquals(a29.i, 1);
    a30.a1(a30); org.junit.Assert.assertEquals(a30.i, 1);
    a32.a1(a32); org.junit.Assert.assertEquals(a32.i, -89);
    a34.a1(a34); org.junit.Assert.assertEquals(a34.i, -89);
    a35.a1(a35); org.junit.Assert.assertEquals(a35.i, 1);
    a36.a1(a36); org.junit.Assert.assertEquals(a36.i, 1);
    a37.a1(a37); org.junit.Assert.assertEquals(a37.i, 1);
    a38.a1(a38); org.junit.Assert.assertEquals(a38.i, 11);
    a42.a1(a42); org.junit.Assert.assertEquals(a42.i, 21);
    a43.a1(a43); org.junit.Assert.assertEquals(a43.i, 1);
    a44.a1(a44); org.junit.Assert.assertEquals(a44.i, 1);
    a49.a1(a49); org.junit.Assert.assertEquals(a49.i, 1);

  }

  @Test
  public void test18() throws Throwable {

    if (debug) { System.out.println(); System.out.print("CustomVisitorTest0.test18"); }


    randoop.test.A a1 = new randoop.test.A((-1));
    randoop.test.A a3 = new randoop.test.A((-1));
    randoop.test.A a4 = a3.a1();
    randoop.test.A a5 = a1.a1(a3);
    randoop.test.A a6 = new randoop.test.A();
    randoop.test.A a7 = a3.a1(a6);
    randoop.test.A a9 = new randoop.test.A((-1));
    randoop.test.A a11 = new randoop.test.A((-1));
    randoop.test.A a12 = a11.a1();
    randoop.test.A a13 = a9.a1(a11);
    randoop.test.A a14 = new randoop.test.A();
    randoop.test.A a15 = a11.a1(a14);
    randoop.test.A a17 = new randoop.test.A((-1));
    randoop.test.A a19 = new randoop.test.A((-1));
    randoop.test.A a20 = a19.a1();
    randoop.test.A a21 = a17.a1(a19);
    randoop.test.A a22 = new randoop.test.A();
    randoop.test.A a23 = a19.a1(a22);
    randoop.test.A a24 = a14.a1(a22);
    randoop.test.A a25 = a6.a1(a24);
    randoop.test.A a27 = new randoop.test.A((-1));
    randoop.test.A a29 = new randoop.test.A((-1));
    randoop.test.A a30 = a29.a1();
    randoop.test.A a31 = a27.a1(a29);
    randoop.test.A a32 = new randoop.test.A();
    randoop.test.A a33 = a29.a1(a32);
    randoop.test.A a35 = new randoop.test.A((-1));
    randoop.test.A a37 = new randoop.test.A((-1));
    randoop.test.A a38 = a37.a1();
    randoop.test.A a39 = a35.a1(a37);
    randoop.test.A a40 = new randoop.test.A();
    randoop.test.A a41 = a37.a1(a40);
    randoop.test.A a43 = new randoop.test.A((-1));
    randoop.test.A a45 = new randoop.test.A((-1));
    randoop.test.A a46 = a45.a1();
    randoop.test.A a47 = a43.a1(a45);
    randoop.test.A a48 = new randoop.test.A();
    randoop.test.A a49 = a45.a1(a48);
    randoop.test.A a50 = a40.a1(a48);
    randoop.test.A a51 = a32.a1(a50);
    randoop.test.A a52 = a25.a1(a32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a52);
    a1.a1(a1); org.junit.Assert.assertEquals(a1.i, -89);
    a3.a1(a3); org.junit.Assert.assertEquals(a3.i, -89);
    a4.a1(a4); org.junit.Assert.assertEquals(a4.i, 1);
    a5.a1(a5); org.junit.Assert.assertEquals(a5.i, 1);
    a6.a1(a6); org.junit.Assert.assertEquals(a6.i, 11);
    a7.a1(a7); org.junit.Assert.assertEquals(a7.i, 11);
    a9.a1(a9); org.junit.Assert.assertEquals(a9.i, -89);
    a11.a1(a11); org.junit.Assert.assertEquals(a11.i, -89);
    a12.a1(a12); org.junit.Assert.assertEquals(a12.i, 1);
    a13.a1(a13); org.junit.Assert.assertEquals(a13.i, 1);
    a14.a1(a14); org.junit.Assert.assertEquals(a14.i, 11);
    a15.a1(a15); org.junit.Assert.assertEquals(a15.i, 11);
    a17.a1(a17); org.junit.Assert.assertEquals(a17.i, -89);
    a19.a1(a19); org.junit.Assert.assertEquals(a19.i, -89);
    a20.a1(a20); org.junit.Assert.assertEquals(a20.i, 1);
    a21.a1(a21); org.junit.Assert.assertEquals(a21.i, 1);
    a22.a1(a22); org.junit.Assert.assertEquals(a22.i, 1);
    a23.a1(a23); org.junit.Assert.assertEquals(a23.i, 11);
    a24.a1(a24); org.junit.Assert.assertEquals(a24.i, 11);
    a25.a1(a25); org.junit.Assert.assertEquals(a25.i, 211);
    a27.a1(a27); org.junit.Assert.assertEquals(a27.i, -89);
    a29.a1(a29); org.junit.Assert.assertEquals(a29.i, -89);
    a30.a1(a30); org.junit.Assert.assertEquals(a30.i, 1);
    a31.a1(a31); org.junit.Assert.assertEquals(a31.i, 1);
    a32.a1(a32); org.junit.Assert.assertEquals(a32.i, 11);
    a33.a1(a33); org.junit.Assert.assertEquals(a33.i, 11);
    a35.a1(a35); org.junit.Assert.assertEquals(a35.i, -89);
    a37.a1(a37); org.junit.Assert.assertEquals(a37.i, -89);
    a38.a1(a38); org.junit.Assert.assertEquals(a38.i, 1);
    a39.a1(a39); org.junit.Assert.assertEquals(a39.i, 1);
    a40.a1(a40); org.junit.Assert.assertEquals(a40.i, 11);
    a41.a1(a41); org.junit.Assert.assertEquals(a41.i, 11);
    a43.a1(a43); org.junit.Assert.assertEquals(a43.i, -89);
    a45.a1(a45); org.junit.Assert.assertEquals(a45.i, -89);
    a46.a1(a46); org.junit.Assert.assertEquals(a46.i, 1);
    a47.a1(a47); org.junit.Assert.assertEquals(a47.i, 1);
    a48.a1(a48); org.junit.Assert.assertEquals(a48.i, 1);
    a49.a1(a49); org.junit.Assert.assertEquals(a49.i, 11);
    a50.a1(a50); org.junit.Assert.assertEquals(a50.i, 11);
    a51.a1(a51); org.junit.Assert.assertEquals(a51.i, 21);
    a52.a1(a52); org.junit.Assert.assertEquals(a52.i, 21);

  }

  @Test
  public void test19() throws Throwable {

    if (debug) { System.out.println(); System.out.print("CustomVisitorTest0.test19"); }


    randoop.test.A a1 = new randoop.test.A((-1));
    randoop.test.A a3 = new randoop.test.A((-1));
    randoop.test.A a5 = new randoop.test.A((-1));
    randoop.test.A a6 = a5.a1();
    randoop.test.A a7 = a3.a1(a5);
    randoop.test.A a8 = a1.a1(a7);
    int i9 = a8.a6();
    randoop.test.A a11 = new randoop.test.A((-1));
    int i14 = a11.a5(10, (-1));
    randoop.test.A a16 = new randoop.test.A((-1));
    randoop.test.A a18 = new randoop.test.A((-1));
    randoop.test.A a19 = a18.a1();
    randoop.test.A a20 = a16.a1(a18);
    randoop.test.A a21 = new randoop.test.A();
    randoop.test.A a22 = a18.a1(a21);
    randoop.test.A a24 = new randoop.test.A((-1));
    randoop.test.A a26 = new randoop.test.A((-1));
    randoop.test.A a27 = a26.a1();
    randoop.test.A a28 = a24.a1(a26);
    randoop.test.A a29 = new randoop.test.A();
    randoop.test.A a30 = a26.a1(a29);
    randoop.test.A a31 = a21.a1(a29);
    randoop.test.A a33 = new randoop.test.A((-1));
    randoop.test.A a35 = new randoop.test.A((-1));
    randoop.test.A a36 = a35.a1();
    randoop.test.A a37 = a33.a1(a35);
    randoop.test.A a38 = a29.a1(a35);
    randoop.test.A a39 = new randoop.test.A();
    randoop.test.A a40 = a39.a1();
    randoop.test.A a41 = a29.a1(a39);
    randoop.test.A a43 = new randoop.test.A((-1));
    randoop.test.A a45 = new randoop.test.A((-1));
    randoop.test.A a46 = a45.a1();
    randoop.test.A a47 = a43.a1(a45);
    randoop.test.A a49 = new randoop.test.A((-1));
    randoop.test.A a51 = new randoop.test.A((-1));
    randoop.test.A a52 = a51.a1();
    randoop.test.A a53 = a49.a1(a51);
    randoop.test.A a55 = new randoop.test.A((-1));
    randoop.test.A a57 = new randoop.test.A((-1));
    randoop.test.A a58 = a57.a1();
    randoop.test.A a59 = a55.a1(a57);
    randoop.test.A a60 = new randoop.test.A();
    randoop.test.A a61 = a57.a1(a60);
    int i64 = a61.a5(0, 1);
    randoop.test.A a65 = a51.a1(a61);
    randoop.test.A a66 = new randoop.test.A();
    randoop.test.A a67 = a66.a1();
    randoop.test.B b68 = a51.a2(a66);
    randoop.test.B b70 = a41.a4(a47, b68, 0);
    int i71 = a8.a3(a11, b68);
    randoop.test.A a73 = new randoop.test.A((-1));
    randoop.test.A a75 = new randoop.test.A((-1));
    randoop.test.A a76 = a75.a1();
    randoop.test.A a77 = a73.a1(a75);
    randoop.test.A a78 = a8.a1(a73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a78);
    a1.a1(a1); org.junit.Assert.assertEquals(a1.i, -89);
    a3.a1(a3); org.junit.Assert.assertEquals(a3.i, -89);
    a5.a1(a5); org.junit.Assert.assertEquals(a5.i, -9);
    a6.a1(a6); org.junit.Assert.assertEquals(a6.i, 1);
    a7.a1(a7); org.junit.Assert.assertEquals(a7.i, 1);
    a8.a1(a8); org.junit.Assert.assertEquals(a8.i, 111);
    a11.a1(a11); org.junit.Assert.assertEquals(a11.i, -9);
    a16.a1(a16); org.junit.Assert.assertEquals(a16.i, -89);
    a18.a1(a18); org.junit.Assert.assertEquals(a18.i, -89);
    a19.a1(a19); org.junit.Assert.assertEquals(a19.i, 1);
    a20.a1(a20); org.junit.Assert.assertEquals(a20.i, 1);
    a21.a1(a21); org.junit.Assert.assertEquals(a21.i, 11);
    a22.a1(a22); org.junit.Assert.assertEquals(a22.i, 11);
    a24.a1(a24); org.junit.Assert.assertEquals(a24.i, -89);
    a26.a1(a26); org.junit.Assert.assertEquals(a26.i, -89);
    a27.a1(a27); org.junit.Assert.assertEquals(a27.i, 1);
    a28.a1(a28); org.junit.Assert.assertEquals(a28.i, 1);
    a29.a1(a29); org.junit.Assert.assertEquals(a29.i, 111);
    a30.a1(a30); org.junit.Assert.assertEquals(a30.i, 11);
    a31.a1(a31); org.junit.Assert.assertEquals(a31.i, 11);
    a33.a1(a33); org.junit.Assert.assertEquals(a33.i, -89);
    a35.a1(a35); org.junit.Assert.assertEquals(a35.i, -9);
    a36.a1(a36); org.junit.Assert.assertEquals(a36.i, 1);
    a37.a1(a37); org.junit.Assert.assertEquals(a37.i, 1);
    a38.a1(a38); org.junit.Assert.assertEquals(a38.i, 1);
    a39.a1(a39); org.junit.Assert.assertEquals(a39.i, 1);
    a40.a1(a40); org.junit.Assert.assertEquals(a40.i, 1);
    a41.a1(a41); org.junit.Assert.assertEquals(a41.i, 11);
    a43.a1(a43); org.junit.Assert.assertEquals(a43.i, -89);
    a45.a1(a45); org.junit.Assert.assertEquals(a45.i, -9);
    a46.a1(a46); org.junit.Assert.assertEquals(a46.i, 1);
    a47.a1(a47); org.junit.Assert.assertEquals(a47.i, 1);
    a49.a1(a49); org.junit.Assert.assertEquals(a49.i, -89);
    a51.a1(a51); org.junit.Assert.assertEquals(a51.i, -89);
    a52.a1(a52); org.junit.Assert.assertEquals(a52.i, 1);
    a53.a1(a53); org.junit.Assert.assertEquals(a53.i, 1);
    a55.a1(a55); org.junit.Assert.assertEquals(a55.i, -89);
    a57.a1(a57); org.junit.Assert.assertEquals(a57.i, -89);
    a58.a1(a58); org.junit.Assert.assertEquals(a58.i, 1);
    a59.a1(a59); org.junit.Assert.assertEquals(a59.i, 1);
    a60.a1(a60); org.junit.Assert.assertEquals(a60.i, 1);
    a61.a1(a61); org.junit.Assert.assertEquals(a61.i, 11);
    a65.a1(a65); org.junit.Assert.assertEquals(a65.i, 21);
    a66.a1(a66); org.junit.Assert.assertEquals(a66.i, 1);
    a67.a1(a67); org.junit.Assert.assertEquals(a67.i, 1);
    a73.a1(a73); org.junit.Assert.assertEquals(a73.i, -89);
    a75.a1(a75); org.junit.Assert.assertEquals(a75.i, -9);
    a76.a1(a76); org.junit.Assert.assertEquals(a76.i, 1);
    a77.a1(a77); org.junit.Assert.assertEquals(a77.i, 1);
    a78.a1(a78); org.junit.Assert.assertEquals(a78.i, -79);

  }

  @Test
  public void test20() throws Throwable {

    if (debug) { System.out.println(); System.out.print("CustomVisitorTest0.test20"); }


    randoop.test.A a1 = new randoop.test.A((-1));
    randoop.test.A a3 = new randoop.test.A((-1));
    randoop.test.A a4 = a3.a1();
    randoop.test.A a5 = a1.a1(a3);
    randoop.test.A a7 = new randoop.test.A((-1));
    randoop.test.A a9 = new randoop.test.A((-1));
    randoop.test.A a10 = a9.a1();
    randoop.test.A a11 = a7.a1(a9);
    randoop.test.A a12 = new randoop.test.A();
    randoop.test.A a13 = a9.a1(a12);
    int i16 = a13.a5(0, 1);
    randoop.test.A a17 = a3.a1(a13);
    randoop.test.A a19 = new randoop.test.A((-1));
    randoop.test.A a21 = new randoop.test.A((-1));
    randoop.test.A a22 = a21.a1();
    randoop.test.A a23 = a19.a1(a21);
    int i24 = a19.a6();
    randoop.test.A a26 = new randoop.test.A(0);
    randoop.test.A a28 = new randoop.test.A((-1));
    randoop.test.A a30 = new randoop.test.A((-1));
    randoop.test.A a32 = new randoop.test.A((-1));
    randoop.test.A a33 = a32.a1();
    randoop.test.A a34 = a30.a1(a32);
    randoop.test.A a35 = a28.a1(a34);
    randoop.test.A a37 = new randoop.test.A((-1));
    randoop.test.A a39 = new randoop.test.A((-1));
    randoop.test.A a40 = a39.a1();
    randoop.test.A a41 = a37.a1(a39);
    randoop.test.A a42 = new randoop.test.A();
    randoop.test.A a43 = a39.a1(a42);
    randoop.test.A a45 = new randoop.test.A((-1));
    randoop.test.A a47 = new randoop.test.A((-1));
    randoop.test.A a49 = new randoop.test.A((-1));
    randoop.test.A a50 = a49.a1();
    randoop.test.A a51 = a47.a1(a49);
    randoop.test.A a52 = a45.a1(a51);
    int i53 = a52.a6();
    randoop.test.B b54 = a43.a2(a52);
    randoop.test.B b56 = a26.a4(a28, b54, 1);
    int i57 = a17.a3(a19, b54);
    int i58 = a19.a6();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    a1.a1(a1); org.junit.Assert.assertEquals(a1.i, -89);
    a3.a1(a3); org.junit.Assert.assertEquals(a3.i, -89);
    a4.a1(a4); org.junit.Assert.assertEquals(a4.i, 1);
    a5.a1(a5); org.junit.Assert.assertEquals(a5.i, 1);
    a7.a1(a7); org.junit.Assert.assertEquals(a7.i, -89);
    a9.a1(a9); org.junit.Assert.assertEquals(a9.i, -89);
    a10.a1(a10); org.junit.Assert.assertEquals(a10.i, 1);
    a11.a1(a11); org.junit.Assert.assertEquals(a11.i, 1);
    a12.a1(a12); org.junit.Assert.assertEquals(a12.i, 1);
    a13.a1(a13); org.junit.Assert.assertEquals(a13.i, 11);
    a17.a1(a17); org.junit.Assert.assertEquals(a17.i, 21);
    a19.a1(a19); org.junit.Assert.assertEquals(a19.i, -89);
    a21.a1(a21); org.junit.Assert.assertEquals(a21.i, -9);
    a22.a1(a22); org.junit.Assert.assertEquals(a22.i, 1);
    a23.a1(a23); org.junit.Assert.assertEquals(a23.i, 1);
    a26.a1(a26); org.junit.Assert.assertEquals(a26.i, 1);
    a28.a1(a28); org.junit.Assert.assertEquals(a28.i, -89);
    a30.a1(a30); org.junit.Assert.assertEquals(a30.i, -89);
    a32.a1(a32); org.junit.Assert.assertEquals(a32.i, -9);
    a33.a1(a33); org.junit.Assert.assertEquals(a33.i, 1);
    a34.a1(a34); org.junit.Assert.assertEquals(a34.i, 1);
    a35.a1(a35); org.junit.Assert.assertEquals(a35.i, 11);
    a37.a1(a37); org.junit.Assert.assertEquals(a37.i, -89);
    a39.a1(a39); org.junit.Assert.assertEquals(a39.i, -89);
    a40.a1(a40); org.junit.Assert.assertEquals(a40.i, 1);
    a41.a1(a41); org.junit.Assert.assertEquals(a41.i, 1);
    a42.a1(a42); org.junit.Assert.assertEquals(a42.i, 1);
    a43.a1(a43); org.junit.Assert.assertEquals(a43.i, 11);
    a45.a1(a45); org.junit.Assert.assertEquals(a45.i, -89);
    a47.a1(a47); org.junit.Assert.assertEquals(a47.i, -89);
    a49.a1(a49); org.junit.Assert.assertEquals(a49.i, -9);
    a50.a1(a50); org.junit.Assert.assertEquals(a50.i, 1);
    a51.a1(a51); org.junit.Assert.assertEquals(a51.i, 1);
    a52.a1(a52); org.junit.Assert.assertEquals(a52.i, 11);

  }

  @Test
  public void test21() throws Throwable {

    if (debug) { System.out.println(); System.out.print("CustomVisitorTest0.test21"); }


    randoop.test.A a1 = new randoop.test.A((-1));
    randoop.test.A a3 = new randoop.test.A((-1));
    randoop.test.A a4 = a3.a1();
    randoop.test.A a5 = a1.a1(a3);
    randoop.test.A a7 = new randoop.test.A((-1));
    randoop.test.A a9 = new randoop.test.A((-1));
    randoop.test.A a10 = a9.a1();
    randoop.test.A a11 = a7.a1(a9);
    randoop.test.A a12 = new randoop.test.A();
    randoop.test.A a13 = a9.a1(a12);
    int i16 = a13.a5(0, 1);
    randoop.test.A a17 = a3.a1(a13);
    randoop.test.A a19 = new randoop.test.A((-1));
    randoop.test.A a21 = new randoop.test.A((-1));
    randoop.test.A a22 = a21.a1();
    randoop.test.A a23 = a19.a1(a21);
    randoop.test.A a24 = new randoop.test.A();
    randoop.test.A a25 = a21.a1(a24);
    randoop.test.A a27 = new randoop.test.A((-1));
    randoop.test.A a29 = new randoop.test.A((-1));
    randoop.test.A a31 = new randoop.test.A((-1));
    randoop.test.A a32 = a31.a1();
    randoop.test.A a33 = a29.a1(a31);
    randoop.test.A a34 = a27.a1(a33);
    int i35 = a34.a6();
    randoop.test.B b36 = a25.a2(a34);
    randoop.test.B b37 = a13.a2(a34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b37);
    a1.a1(a1); org.junit.Assert.assertEquals(a1.i, -89);
    a3.a1(a3); org.junit.Assert.assertEquals(a3.i, -89);
    a4.a1(a4); org.junit.Assert.assertEquals(a4.i, 1);
    a5.a1(a5); org.junit.Assert.assertEquals(a5.i, 1);
    a7.a1(a7); org.junit.Assert.assertEquals(a7.i, -89);
    a9.a1(a9); org.junit.Assert.assertEquals(a9.i, -89);
    a10.a1(a10); org.junit.Assert.assertEquals(a10.i, 1);
    a11.a1(a11); org.junit.Assert.assertEquals(a11.i, 1);
    a12.a1(a12); org.junit.Assert.assertEquals(a12.i, 1);
    a13.a1(a13); org.junit.Assert.assertEquals(a13.i, 11);
    a17.a1(a17); org.junit.Assert.assertEquals(a17.i, 21);
    a19.a1(a19); org.junit.Assert.assertEquals(a19.i, -89);
    a21.a1(a21); org.junit.Assert.assertEquals(a21.i, -89);
    a22.a1(a22); org.junit.Assert.assertEquals(a22.i, 1);
    a23.a1(a23); org.junit.Assert.assertEquals(a23.i, 1);
    a24.a1(a24); org.junit.Assert.assertEquals(a24.i, 1);
    a25.a1(a25); org.junit.Assert.assertEquals(a25.i, 11);
    a27.a1(a27); org.junit.Assert.assertEquals(a27.i, -89);
    a29.a1(a29); org.junit.Assert.assertEquals(a29.i, -89);
    a31.a1(a31); org.junit.Assert.assertEquals(a31.i, -9);
    a32.a1(a32); org.junit.Assert.assertEquals(a32.i, 1);
    a33.a1(a33); org.junit.Assert.assertEquals(a33.i, 1);
    a34.a1(a34); org.junit.Assert.assertEquals(a34.i, 11);

  }

  @Test
  public void test22() throws Throwable {

    if (debug) { System.out.println(); System.out.print("CustomVisitorTest0.test22"); }


    randoop.test.A a1 = new randoop.test.A((-1));
    randoop.test.A a3 = new randoop.test.A((-1));
    randoop.test.A a4 = a3.a1();
    randoop.test.A a5 = a1.a1(a3);
    int i6 = a3.a6();
    randoop.test.A a8 = new randoop.test.A(100);
    randoop.test.A a10 = new randoop.test.A((-1));
    randoop.test.A a12 = new randoop.test.A((-1));
    randoop.test.A a13 = a12.a1();
    randoop.test.A a14 = a10.a1(a12);
    randoop.test.A a15 = new randoop.test.A();
    randoop.test.A a16 = a12.a1(a15);
    randoop.test.A a18 = new randoop.test.A((-1));
    randoop.test.A a20 = new randoop.test.A((-1));
    randoop.test.A a21 = a20.a1();
    randoop.test.A a22 = a18.a1(a20);
    randoop.test.A a23 = new randoop.test.A();
    randoop.test.A a24 = a20.a1(a23);
    randoop.test.A a25 = a15.a1(a23);
    randoop.test.A a27 = new randoop.test.A((-1));
    randoop.test.A a29 = new randoop.test.A((-1));
    randoop.test.A a30 = a29.a1();
    randoop.test.A a31 = a27.a1(a29);
    randoop.test.A a32 = a23.a1(a29);
    randoop.test.A a33 = new randoop.test.A();
    randoop.test.A a34 = a33.a1();
    randoop.test.A a35 = a23.a1(a33);
    randoop.test.A a37 = new randoop.test.A((-1));
    randoop.test.A a39 = new randoop.test.A((-1));
    randoop.test.A a40 = a39.a1();
    randoop.test.A a41 = a37.a1(a39);
    randoop.test.A a43 = new randoop.test.A((-1));
    randoop.test.A a45 = new randoop.test.A((-1));
    randoop.test.A a46 = a45.a1();
    randoop.test.A a47 = a43.a1(a45);
    randoop.test.A a49 = new randoop.test.A((-1));
    randoop.test.A a51 = new randoop.test.A((-1));
    randoop.test.A a52 = a51.a1();
    randoop.test.A a53 = a49.a1(a51);
    randoop.test.A a54 = new randoop.test.A();
    randoop.test.A a55 = a51.a1(a54);
    int i58 = a55.a5(0, 1);
    randoop.test.A a59 = a45.a1(a55);
    randoop.test.A a60 = new randoop.test.A();
    randoop.test.A a61 = a60.a1();
    randoop.test.B b62 = a45.a2(a60);
    randoop.test.B b64 = a35.a4(a41, b62, 0);
    int i65 = a3.a3(a8, b64);
    randoop.test.A a67 = new randoop.test.A((-1));
    int i70 = a67.a5(10, (-1));
    randoop.test.B b71 = a3.a2(a67);
    randoop.test.A a72 = new randoop.test.A(b71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b71);
    a1.a1(a1); org.junit.Assert.assertEquals(a1.i, -89);
    a3.a1(a3); org.junit.Assert.assertEquals(a3.i, -9);
    a4.a1(a4); org.junit.Assert.assertEquals(a4.i, 1);
    a5.a1(a5); org.junit.Assert.assertEquals(a5.i, 1);
    a8.a1(a8); org.junit.Assert.assertEquals(a8.i, 1001);
    a10.a1(a10); org.junit.Assert.assertEquals(a10.i, -89);
    a12.a1(a12); org.junit.Assert.assertEquals(a12.i, -89);
    a13.a1(a13); org.junit.Assert.assertEquals(a13.i, 1);
    a14.a1(a14); org.junit.Assert.assertEquals(a14.i, 1);
    a15.a1(a15); org.junit.Assert.assertEquals(a15.i, 11);
    a16.a1(a16); org.junit.Assert.assertEquals(a16.i, 11);
    a18.a1(a18); org.junit.Assert.assertEquals(a18.i, -89);
    a20.a1(a20); org.junit.Assert.assertEquals(a20.i, -89);
    a21.a1(a21); org.junit.Assert.assertEquals(a21.i, 1);
    a22.a1(a22); org.junit.Assert.assertEquals(a22.i, 1);
    a23.a1(a23); org.junit.Assert.assertEquals(a23.i, 111);
    a24.a1(a24); org.junit.Assert.assertEquals(a24.i, 11);
    a25.a1(a25); org.junit.Assert.assertEquals(a25.i, 11);
    a27.a1(a27); org.junit.Assert.assertEquals(a27.i, -89);
    a29.a1(a29); org.junit.Assert.assertEquals(a29.i, -9);
    a30.a1(a30); org.junit.Assert.assertEquals(a30.i, 1);
    a31.a1(a31); org.junit.Assert.assertEquals(a31.i, 1);
    a32.a1(a32); org.junit.Assert.assertEquals(a32.i, 1);
    a33.a1(a33); org.junit.Assert.assertEquals(a33.i, 1);
    a34.a1(a34); org.junit.Assert.assertEquals(a34.i, 1);
    a35.a1(a35); org.junit.Assert.assertEquals(a35.i, 11);
    a37.a1(a37); org.junit.Assert.assertEquals(a37.i, -89);
    a39.a1(a39); org.junit.Assert.assertEquals(a39.i, -9);
    a40.a1(a40); org.junit.Assert.assertEquals(a40.i, 1);
    a41.a1(a41); org.junit.Assert.assertEquals(a41.i, 1);
    a43.a1(a43); org.junit.Assert.assertEquals(a43.i, -89);
    a45.a1(a45); org.junit.Assert.assertEquals(a45.i, -89);
    a46.a1(a46); org.junit.Assert.assertEquals(a46.i, 1);
    a47.a1(a47); org.junit.Assert.assertEquals(a47.i, 1);
    a49.a1(a49); org.junit.Assert.assertEquals(a49.i, -89);
    a51.a1(a51); org.junit.Assert.assertEquals(a51.i, -89);
    a52.a1(a52); org.junit.Assert.assertEquals(a52.i, 1);
    a53.a1(a53); org.junit.Assert.assertEquals(a53.i, 1);
    a54.a1(a54); org.junit.Assert.assertEquals(a54.i, 1);
    a55.a1(a55); org.junit.Assert.assertEquals(a55.i, 11);
    a59.a1(a59); org.junit.Assert.assertEquals(a59.i, 21);
    a60.a1(a60); org.junit.Assert.assertEquals(a60.i, 1);
    a61.a1(a61); org.junit.Assert.assertEquals(a61.i, 1);
    a67.a1(a67); org.junit.Assert.assertEquals(a67.i, -9);
    a72.a1(a72); org.junit.Assert.assertEquals(a72.i, 1);

  }

  @Test
  public void test23() throws Throwable {

    if (debug) { System.out.println(); System.out.print("CustomVisitorTest0.test23"); }


    randoop.test.A a1 = new randoop.test.A((-1));
    randoop.test.A a3 = new randoop.test.A((-1));
    randoop.test.A a4 = a3.a1();
    randoop.test.A a5 = a1.a1(a3);
    randoop.test.A a6 = new randoop.test.A();
    randoop.test.A a7 = a3.a1(a6);
    randoop.test.A a9 = new randoop.test.A((-1));
    randoop.test.A a11 = new randoop.test.A((-1));
    randoop.test.A a12 = a11.a1();
    randoop.test.A a13 = a9.a1(a11);
    randoop.test.A a14 = new randoop.test.A();
    randoop.test.A a15 = a11.a1(a14);
    randoop.test.A a16 = a6.a1(a14);
    randoop.test.A a18 = new randoop.test.A((-1));
    randoop.test.A a20 = new randoop.test.A((-1));
    randoop.test.A a21 = a20.a1();
    randoop.test.A a22 = a18.a1(a20);
    randoop.test.A a23 = a14.a1(a20);
    randoop.test.A a24 = new randoop.test.A();
    randoop.test.A a25 = a24.a1();
    randoop.test.A a26 = a14.a1(a24);
    randoop.test.A a28 = new randoop.test.A((-1));
    randoop.test.B b29 = a26.a2(a28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b29);
    a1.a1(a1); org.junit.Assert.assertEquals(a1.i, -89);
    a3.a1(a3); org.junit.Assert.assertEquals(a3.i, -89);
    a4.a1(a4); org.junit.Assert.assertEquals(a4.i, 1);
    a5.a1(a5); org.junit.Assert.assertEquals(a5.i, 1);
    a6.a1(a6); org.junit.Assert.assertEquals(a6.i, 11);
    a7.a1(a7); org.junit.Assert.assertEquals(a7.i, 11);
    a9.a1(a9); org.junit.Assert.assertEquals(a9.i, -89);
    a11.a1(a11); org.junit.Assert.assertEquals(a11.i, -89);
    a12.a1(a12); org.junit.Assert.assertEquals(a12.i, 1);
    a13.a1(a13); org.junit.Assert.assertEquals(a13.i, 1);
    a14.a1(a14); org.junit.Assert.assertEquals(a14.i, 111);
    a15.a1(a15); org.junit.Assert.assertEquals(a15.i, 11);
    a16.a1(a16); org.junit.Assert.assertEquals(a16.i, 11);
    a18.a1(a18); org.junit.Assert.assertEquals(a18.i, -89);
    a20.a1(a20); org.junit.Assert.assertEquals(a20.i, -9);
    a21.a1(a21); org.junit.Assert.assertEquals(a21.i, 1);
    a22.a1(a22); org.junit.Assert.assertEquals(a22.i, 1);
    a23.a1(a23); org.junit.Assert.assertEquals(a23.i, 1);
    a24.a1(a24); org.junit.Assert.assertEquals(a24.i, 1);
    a25.a1(a25); org.junit.Assert.assertEquals(a25.i, 1);
    a26.a1(a26); org.junit.Assert.assertEquals(a26.i, 11);
    a28.a1(a28); org.junit.Assert.assertEquals(a28.i, -9);

  }

  @Test
  public void test24() throws Throwable {

    if (debug) { System.out.println(); System.out.print("CustomVisitorTest0.test24"); }


    randoop.test.A a1 = new randoop.test.A((-1));
    randoop.test.A a3 = new randoop.test.A((-1));
    randoop.test.A a4 = a3.a1();
    randoop.test.A a5 = a1.a1(a3);
    randoop.test.A a7 = new randoop.test.A((-1));
    randoop.test.A a9 = new randoop.test.A((-1));
    randoop.test.A a10 = a9.a1();
    randoop.test.A a11 = a7.a1(a9);
    randoop.test.A a12 = new randoop.test.A();
    randoop.test.A a13 = a9.a1(a12);
    int i16 = a13.a5(0, 1);
    randoop.test.A a17 = a3.a1(a13);
    int i18 = a3.a6();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    a1.a1(a1); org.junit.Assert.assertEquals(a1.i, -89);
    a3.a1(a3); org.junit.Assert.assertEquals(a3.i, -89);
    a4.a1(a4); org.junit.Assert.assertEquals(a4.i, 1);
    a5.a1(a5); org.junit.Assert.assertEquals(a5.i, 1);
    a7.a1(a7); org.junit.Assert.assertEquals(a7.i, -89);
    a9.a1(a9); org.junit.Assert.assertEquals(a9.i, -89);
    a10.a1(a10); org.junit.Assert.assertEquals(a10.i, 1);
    a11.a1(a11); org.junit.Assert.assertEquals(a11.i, 1);
    a12.a1(a12); org.junit.Assert.assertEquals(a12.i, 1);
    a13.a1(a13); org.junit.Assert.assertEquals(a13.i, 11);
    a17.a1(a17); org.junit.Assert.assertEquals(a17.i, 21);

  }

  @Test
  public void test25() throws Throwable {

    if (debug) { System.out.println(); System.out.print("CustomVisitorTest0.test25"); }


    randoop.test.A a1 = new randoop.test.A((-1));
    randoop.test.A a3 = new randoop.test.A((-1));
    randoop.test.A a4 = a3.a1();
    randoop.test.A a5 = a1.a1(a3);
    randoop.test.A a6 = new randoop.test.A();
    randoop.test.A a7 = a3.a1(a6);
    randoop.test.A a9 = new randoop.test.A((-1));
    randoop.test.A a11 = new randoop.test.A((-1));
    randoop.test.A a12 = a11.a1();
    randoop.test.A a13 = a9.a1(a11);
    randoop.test.A a14 = new randoop.test.A();
    randoop.test.A a15 = a11.a1(a14);
    randoop.test.A a16 = a6.a1(a14);
    randoop.test.A a18 = new randoop.test.A((-1));
    randoop.test.A a20 = new randoop.test.A((-1));
    randoop.test.A a21 = a20.a1();
    randoop.test.A a22 = a18.a1(a20);
    randoop.test.A a23 = a14.a1(a20);
    int i24 = a23.a6();
    randoop.test.A a26 = new randoop.test.A(0);
    randoop.test.A a28 = new randoop.test.A((-1));
    randoop.test.A a30 = new randoop.test.A((-1));
    randoop.test.A a32 = new randoop.test.A((-1));
    randoop.test.A a33 = a32.a1();
    randoop.test.A a34 = a30.a1(a32);
    randoop.test.A a35 = a28.a1(a34);
    randoop.test.A a37 = new randoop.test.A((-1));
    randoop.test.A a39 = new randoop.test.A((-1));
    randoop.test.A a40 = a39.a1();
    randoop.test.A a41 = a37.a1(a39);
    randoop.test.A a42 = new randoop.test.A();
    randoop.test.A a43 = a39.a1(a42);
    randoop.test.A a45 = new randoop.test.A((-1));
    randoop.test.A a47 = new randoop.test.A((-1));
    randoop.test.A a49 = new randoop.test.A((-1));
    randoop.test.A a50 = a49.a1();
    randoop.test.A a51 = a47.a1(a49);
    randoop.test.A a52 = a45.a1(a51);
    int i53 = a52.a6();
    randoop.test.B b54 = a43.a2(a52);
    randoop.test.B b56 = a26.a4(a28, b54, 1);
    randoop.test.B b57 = a23.a2(a28);
    randoop.test.A a59 = new randoop.test.A((-1));
    randoop.test.A a61 = new randoop.test.A((-1));
    randoop.test.A a62 = a61.a1();
    randoop.test.A a63 = a59.a1(a61);
    randoop.test.B b64 = a23.a2(a59);
    randoop.test.A a65 = a59.a1();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a65);
    a1.a1(a1); org.junit.Assert.assertEquals(a1.i, -89);
    a3.a1(a3); org.junit.Assert.assertEquals(a3.i, -89);
    a4.a1(a4); org.junit.Assert.assertEquals(a4.i, 1);
    a5.a1(a5); org.junit.Assert.assertEquals(a5.i, 1);
    a6.a1(a6); org.junit.Assert.assertEquals(a6.i, 11);
    a7.a1(a7); org.junit.Assert.assertEquals(a7.i, 11);
    a9.a1(a9); org.junit.Assert.assertEquals(a9.i, -89);
    a11.a1(a11); org.junit.Assert.assertEquals(a11.i, -89);
    a12.a1(a12); org.junit.Assert.assertEquals(a12.i, 1);
    a13.a1(a13); org.junit.Assert.assertEquals(a13.i, 1);
    a14.a1(a14); org.junit.Assert.assertEquals(a14.i, 11);
    a15.a1(a15); org.junit.Assert.assertEquals(a15.i, 11);
    a16.a1(a16); org.junit.Assert.assertEquals(a16.i, 11);
    a18.a1(a18); org.junit.Assert.assertEquals(a18.i, -89);
    a20.a1(a20); org.junit.Assert.assertEquals(a20.i, -9);
    a21.a1(a21); org.junit.Assert.assertEquals(a21.i, 1);
    a22.a1(a22); org.junit.Assert.assertEquals(a22.i, 1);
    a23.a1(a23); org.junit.Assert.assertEquals(a23.i, 1);
    a26.a1(a26); org.junit.Assert.assertEquals(a26.i, 1);
    a28.a1(a28); org.junit.Assert.assertEquals(a28.i, -89);
    a30.a1(a30); org.junit.Assert.assertEquals(a30.i, -89);
    a32.a1(a32); org.junit.Assert.assertEquals(a32.i, -9);
    a33.a1(a33); org.junit.Assert.assertEquals(a33.i, 1);
    a34.a1(a34); org.junit.Assert.assertEquals(a34.i, 1);
    a35.a1(a35); org.junit.Assert.assertEquals(a35.i, 11);
    a37.a1(a37); org.junit.Assert.assertEquals(a37.i, -89);
    a39.a1(a39); org.junit.Assert.assertEquals(a39.i, -89);
    a40.a1(a40); org.junit.Assert.assertEquals(a40.i, 1);
    a41.a1(a41); org.junit.Assert.assertEquals(a41.i, 1);
    a42.a1(a42); org.junit.Assert.assertEquals(a42.i, 1);
    a43.a1(a43); org.junit.Assert.assertEquals(a43.i, 11);
    a45.a1(a45); org.junit.Assert.assertEquals(a45.i, -89);
    a47.a1(a47); org.junit.Assert.assertEquals(a47.i, -89);
    a49.a1(a49); org.junit.Assert.assertEquals(a49.i, -9);
    a50.a1(a50); org.junit.Assert.assertEquals(a50.i, 1);
    a51.a1(a51); org.junit.Assert.assertEquals(a51.i, 1);
    a52.a1(a52); org.junit.Assert.assertEquals(a52.i, 11);
    a59.a1(a59); org.junit.Assert.assertEquals(a59.i, -89);
    a61.a1(a61); org.junit.Assert.assertEquals(a61.i, -9);
    a62.a1(a62); org.junit.Assert.assertEquals(a62.i, 1);
    a63.a1(a63); org.junit.Assert.assertEquals(a63.i, 1);
    a65.a1(a65); org.junit.Assert.assertEquals(a65.i, 1);

  }

  @Test
  public void test26() throws Throwable {

    if (debug) { System.out.println(); System.out.print("CustomVisitorTest0.test26"); }


    randoop.test.A a1 = new randoop.test.A((-1));
    randoop.test.A a3 = new randoop.test.A((-1));
    randoop.test.A a4 = a3.a1();
    randoop.test.A a5 = a1.a1(a3);
    randoop.test.A a7 = new randoop.test.A((-1));
    randoop.test.A a9 = new randoop.test.A((-1));
    randoop.test.A a10 = a9.a1();
    randoop.test.A a11 = a7.a1(a9);
    randoop.test.A a12 = new randoop.test.A();
    randoop.test.A a13 = a9.a1(a12);
    int i16 = a13.a5(0, 1);
    randoop.test.A a17 = a3.a1(a13);
    randoop.test.A a19 = new randoop.test.A((-1));
    randoop.test.A a21 = new randoop.test.A((-1));
    randoop.test.A a22 = a21.a1();
    randoop.test.A a23 = a19.a1(a21);
    randoop.test.A a25 = new randoop.test.A((-1));
    randoop.test.A a27 = new randoop.test.A((-1));
    randoop.test.A a28 = a27.a1();
    randoop.test.A a29 = a25.a1(a27);
    randoop.test.A a30 = new randoop.test.A();
    randoop.test.A a31 = a27.a1(a30);
    int i34 = a31.a5(0, 1);
    randoop.test.A a35 = a21.a1(a31);
    randoop.test.B b36 = a3.a2(a35);
    randoop.test.A a38 = new randoop.test.A(10);
    randoop.test.B b39 = a3.a2(a38);
    randoop.test.A a41 = new randoop.test.A(3);
    randoop.test.A a43 = new randoop.test.A((-1));
    int i46 = a43.a5(10, (-1));
    randoop.test.B b47 = a41.a2(a43);
    int i48 = a3.a3(b47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 3);
    a1.a1(a1); org.junit.Assert.assertEquals(a1.i, -89);
    a3.a1(a3); org.junit.Assert.assertEquals(a3.i, -89);
    a4.a1(a4); org.junit.Assert.assertEquals(a4.i, 1);
    a5.a1(a5); org.junit.Assert.assertEquals(a5.i, 1);
    a7.a1(a7); org.junit.Assert.assertEquals(a7.i, -89);
    a9.a1(a9); org.junit.Assert.assertEquals(a9.i, -89);
    a10.a1(a10); org.junit.Assert.assertEquals(a10.i, 1);
    a11.a1(a11); org.junit.Assert.assertEquals(a11.i, 1);
    a12.a1(a12); org.junit.Assert.assertEquals(a12.i, 1);
    a13.a1(a13); org.junit.Assert.assertEquals(a13.i, 11);
    a17.a1(a17); org.junit.Assert.assertEquals(a17.i, 21);
    a19.a1(a19); org.junit.Assert.assertEquals(a19.i, -89);
    a21.a1(a21); org.junit.Assert.assertEquals(a21.i, -89);
    a22.a1(a22); org.junit.Assert.assertEquals(a22.i, 1);
    a23.a1(a23); org.junit.Assert.assertEquals(a23.i, 1);
    a25.a1(a25); org.junit.Assert.assertEquals(a25.i, -89);
    a27.a1(a27); org.junit.Assert.assertEquals(a27.i, -89);
    a28.a1(a28); org.junit.Assert.assertEquals(a28.i, 1);
    a29.a1(a29); org.junit.Assert.assertEquals(a29.i, 1);
    a30.a1(a30); org.junit.Assert.assertEquals(a30.i, 1);
    a31.a1(a31); org.junit.Assert.assertEquals(a31.i, 11);
    a35.a1(a35); org.junit.Assert.assertEquals(a35.i, 21);
    a38.a1(a38); org.junit.Assert.assertEquals(a38.i, 101);
    a41.a1(a41); org.junit.Assert.assertEquals(a41.i, 31);
    a43.a1(a43); org.junit.Assert.assertEquals(a43.i, -9);

  }

  @Test
  public void test27() throws Throwable {

    if (debug) { System.out.println(); System.out.print("CustomVisitorTest0.test27"); }


    randoop.test.A a1 = new randoop.test.A((-1));
    randoop.test.A a3 = new randoop.test.A((-1));
    randoop.test.A a4 = a3.a1();
    randoop.test.A a5 = a1.a1(a3);
    randoop.test.A a6 = new randoop.test.A();
    randoop.test.A a7 = a3.a1(a6);
    randoop.test.A a9 = new randoop.test.A((-1));
    randoop.test.A a11 = new randoop.test.A((-1));
    randoop.test.A a12 = a11.a1();
    randoop.test.A a13 = a9.a1(a11);
    randoop.test.A a14 = new randoop.test.A();
    randoop.test.A a15 = a11.a1(a14);
    randoop.test.A a16 = a6.a1(a14);
    randoop.test.A a18 = new randoop.test.A((-1));
    randoop.test.A a20 = new randoop.test.A((-1));
    randoop.test.A a21 = a20.a1();
    randoop.test.A a22 = a18.a1(a20);
    randoop.test.A a23 = a14.a1(a20);
    int i24 = a23.a6();
    randoop.test.A a26 = new randoop.test.A(0);
    randoop.test.A a28 = new randoop.test.A((-1));
    randoop.test.A a30 = new randoop.test.A((-1));
    randoop.test.A a32 = new randoop.test.A((-1));
    randoop.test.A a33 = a32.a1();
    randoop.test.A a34 = a30.a1(a32);
    randoop.test.A a35 = a28.a1(a34);
    randoop.test.A a37 = new randoop.test.A((-1));
    randoop.test.A a39 = new randoop.test.A((-1));
    randoop.test.A a40 = a39.a1();
    randoop.test.A a41 = a37.a1(a39);
    randoop.test.A a42 = new randoop.test.A();
    randoop.test.A a43 = a39.a1(a42);
    randoop.test.A a45 = new randoop.test.A((-1));
    randoop.test.A a47 = new randoop.test.A((-1));
    randoop.test.A a49 = new randoop.test.A((-1));
    randoop.test.A a50 = a49.a1();
    randoop.test.A a51 = a47.a1(a49);
    randoop.test.A a52 = a45.a1(a51);
    int i53 = a52.a6();
    randoop.test.B b54 = a43.a2(a52);
    randoop.test.B b56 = a26.a4(a28, b54, 1);
    randoop.test.B b57 = a23.a2(a28);
    randoop.test.A a59 = new randoop.test.A((-1));
    randoop.test.A a61 = new randoop.test.A((-1));
    randoop.test.A a62 = a61.a1();
    randoop.test.A a63 = a59.a1(a61);
    randoop.test.B b64 = a23.a2(a59);
    randoop.test.A a65 = a23.a1();
    randoop.test.A a67 = new randoop.test.A((-1));
    randoop.test.A a69 = new randoop.test.A((-1));
    randoop.test.A a70 = a69.a1();
    randoop.test.A a71 = a67.a1(a69);
    randoop.test.A a72 = new randoop.test.A();
    randoop.test.A a73 = a69.a1(a72);
    randoop.test.A a75 = new randoop.test.A((-1));
    randoop.test.A a77 = new randoop.test.A((-1));
    randoop.test.A a78 = a77.a1();
    randoop.test.A a79 = a75.a1(a77);
    randoop.test.A a80 = new randoop.test.A();
    randoop.test.A a81 = a77.a1(a80);
    randoop.test.A a82 = a72.a1(a80);
    randoop.test.A a84 = new randoop.test.A((-1));
    randoop.test.A a86 = new randoop.test.A((-1));
    randoop.test.A a87 = a86.a1();
    randoop.test.A a88 = a84.a1(a86);
    randoop.test.A a89 = a80.a1(a86);
    int i90 = a89.a6();
    randoop.test.A a91 = a23.a1(a89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a91);
    a1.a1(a1); org.junit.Assert.assertEquals(a1.i, -89);
    a3.a1(a3); org.junit.Assert.assertEquals(a3.i, -89);
    a4.a1(a4); org.junit.Assert.assertEquals(a4.i, 1);
    a5.a1(a5); org.junit.Assert.assertEquals(a5.i, 1);
    a6.a1(a6); org.junit.Assert.assertEquals(a6.i, 11);
    a7.a1(a7); org.junit.Assert.assertEquals(a7.i, 11);
    a9.a1(a9); org.junit.Assert.assertEquals(a9.i, -89);
    a11.a1(a11); org.junit.Assert.assertEquals(a11.i, -89);
    a12.a1(a12); org.junit.Assert.assertEquals(a12.i, 1);
    a13.a1(a13); org.junit.Assert.assertEquals(a13.i, 1);
    a14.a1(a14); org.junit.Assert.assertEquals(a14.i, 11);
    a15.a1(a15); org.junit.Assert.assertEquals(a15.i, 11);
    a16.a1(a16); org.junit.Assert.assertEquals(a16.i, 11);
    a18.a1(a18); org.junit.Assert.assertEquals(a18.i, -89);
    a20.a1(a20); org.junit.Assert.assertEquals(a20.i, -9);
    a21.a1(a21); org.junit.Assert.assertEquals(a21.i, 1);
    a22.a1(a22); org.junit.Assert.assertEquals(a22.i, 1);
    a23.a1(a23); org.junit.Assert.assertEquals(a23.i, 11);
    a26.a1(a26); org.junit.Assert.assertEquals(a26.i, 1);
    a28.a1(a28); org.junit.Assert.assertEquals(a28.i, -89);
    a30.a1(a30); org.junit.Assert.assertEquals(a30.i, -89);
    a32.a1(a32); org.junit.Assert.assertEquals(a32.i, -9);
    a33.a1(a33); org.junit.Assert.assertEquals(a33.i, 1);
    a34.a1(a34); org.junit.Assert.assertEquals(a34.i, 1);
    a35.a1(a35); org.junit.Assert.assertEquals(a35.i, 11);
    a37.a1(a37); org.junit.Assert.assertEquals(a37.i, -89);
    a39.a1(a39); org.junit.Assert.assertEquals(a39.i, -89);
    a40.a1(a40); org.junit.Assert.assertEquals(a40.i, 1);
    a41.a1(a41); org.junit.Assert.assertEquals(a41.i, 1);
    a42.a1(a42); org.junit.Assert.assertEquals(a42.i, 1);
    a43.a1(a43); org.junit.Assert.assertEquals(a43.i, 11);
    a45.a1(a45); org.junit.Assert.assertEquals(a45.i, -89);
    a47.a1(a47); org.junit.Assert.assertEquals(a47.i, -89);
    a49.a1(a49); org.junit.Assert.assertEquals(a49.i, -9);
    a50.a1(a50); org.junit.Assert.assertEquals(a50.i, 1);
    a51.a1(a51); org.junit.Assert.assertEquals(a51.i, 1);
    a52.a1(a52); org.junit.Assert.assertEquals(a52.i, 11);
    a59.a1(a59); org.junit.Assert.assertEquals(a59.i, -89);
    a61.a1(a61); org.junit.Assert.assertEquals(a61.i, -9);
    a62.a1(a62); org.junit.Assert.assertEquals(a62.i, 1);
    a63.a1(a63); org.junit.Assert.assertEquals(a63.i, 1);
    a65.a1(a65); org.junit.Assert.assertEquals(a65.i, 1);
    a67.a1(a67); org.junit.Assert.assertEquals(a67.i, -89);
    a69.a1(a69); org.junit.Assert.assertEquals(a69.i, -89);
    a70.a1(a70); org.junit.Assert.assertEquals(a70.i, 1);
    a71.a1(a71); org.junit.Assert.assertEquals(a71.i, 1);
    a72.a1(a72); org.junit.Assert.assertEquals(a72.i, 11);
    a73.a1(a73); org.junit.Assert.assertEquals(a73.i, 11);
    a75.a1(a75); org.junit.Assert.assertEquals(a75.i, -89);
    a77.a1(a77); org.junit.Assert.assertEquals(a77.i, -89);
    a78.a1(a78); org.junit.Assert.assertEquals(a78.i, 1);
    a79.a1(a79); org.junit.Assert.assertEquals(a79.i, 1);
    a80.a1(a80); org.junit.Assert.assertEquals(a80.i, 11);
    a81.a1(a81); org.junit.Assert.assertEquals(a81.i, 11);
    a82.a1(a82); org.junit.Assert.assertEquals(a82.i, 11);
    a84.a1(a84); org.junit.Assert.assertEquals(a84.i, -89);
    a86.a1(a86); org.junit.Assert.assertEquals(a86.i, -9);
    a87.a1(a87); org.junit.Assert.assertEquals(a87.i, 1);
    a88.a1(a88); org.junit.Assert.assertEquals(a88.i, 1);
    a89.a1(a89); org.junit.Assert.assertEquals(a89.i, 1);
    a91.a1(a91); org.junit.Assert.assertEquals(a91.i, 11);

  }

  @Test
  public void test28() throws Throwable {

    if (debug) { System.out.println(); System.out.print("CustomVisitorTest0.test28"); }


    randoop.test.A a1 = new randoop.test.A((-1));
    randoop.test.A a3 = new randoop.test.A((-1));
    randoop.test.A a4 = a3.a1();
    randoop.test.A a5 = a1.a1(a3);
    randoop.test.A a6 = new randoop.test.A();
    randoop.test.A a7 = a3.a1(a6);
    int i10 = a7.a5(0, 1);
    randoop.test.A a12 = new randoop.test.A((-1));
    randoop.test.A a14 = new randoop.test.A((-1));
    randoop.test.A a15 = a14.a1();
    randoop.test.A a16 = a12.a1(a14);
    randoop.test.A a17 = new randoop.test.A();
    randoop.test.A a18 = a14.a1(a17);
    randoop.test.A a19 = a14.a1();
    randoop.test.B b20 = a7.a2(a14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b20);
    a1.a1(a1); org.junit.Assert.assertEquals(a1.i, -89);
    a3.a1(a3); org.junit.Assert.assertEquals(a3.i, -89);
    a4.a1(a4); org.junit.Assert.assertEquals(a4.i, 1);
    a5.a1(a5); org.junit.Assert.assertEquals(a5.i, 1);
    a6.a1(a6); org.junit.Assert.assertEquals(a6.i, 1);
    a7.a1(a7); org.junit.Assert.assertEquals(a7.i, 11);
    a12.a1(a12); org.junit.Assert.assertEquals(a12.i, -89);
    a14.a1(a14); org.junit.Assert.assertEquals(a14.i, -89);
    a15.a1(a15); org.junit.Assert.assertEquals(a15.i, 1);
    a16.a1(a16); org.junit.Assert.assertEquals(a16.i, 1);
    a17.a1(a17); org.junit.Assert.assertEquals(a17.i, 1);
    a18.a1(a18); org.junit.Assert.assertEquals(a18.i, 11);
    a19.a1(a19); org.junit.Assert.assertEquals(a19.i, 1);

  }

  @Test
  public void test29() throws Throwable {

    if (debug) { System.out.println(); System.out.print("CustomVisitorTest0.test29"); }


    randoop.test.A a1 = new randoop.test.A((-1));
    randoop.test.A a3 = new randoop.test.A((-1));
    randoop.test.A a4 = a3.a1();
    randoop.test.A a5 = a1.a1(a3);
    randoop.test.A a7 = new randoop.test.A((-1));
    randoop.test.A a9 = new randoop.test.A((-1));
    randoop.test.A a10 = a9.a1();
    randoop.test.A a11 = a7.a1(a9);
    randoop.test.A a12 = new randoop.test.A();
    randoop.test.A a13 = a9.a1(a12);
    int i16 = a13.a5(0, 1);
    randoop.test.A a17 = a3.a1(a13);
    randoop.test.A a19 = new randoop.test.A((-1));
    randoop.test.A a20 = a19.a1();
    randoop.test.B b21 = a17.a2(a20);
    randoop.test.A a23 = new randoop.test.A((-1));
    randoop.test.A a25 = new randoop.test.A((-1));
    randoop.test.A a26 = a25.a1();
    randoop.test.A a27 = a23.a1(a25);
    randoop.test.A a29 = new randoop.test.A((-1));
    randoop.test.A a31 = new randoop.test.A((-1));
    randoop.test.A a33 = new randoop.test.A((-1));
    randoop.test.A a34 = a33.a1();
    randoop.test.A a35 = a31.a1(a33);
    randoop.test.A a36 = a29.a1(a35);
    randoop.test.A a38 = new randoop.test.A((-1));
    randoop.test.A a40 = new randoop.test.A((-1));
    randoop.test.A a41 = a40.a1();
    randoop.test.A a42 = a38.a1(a40);
    randoop.test.A a44 = new randoop.test.A((-1));
    randoop.test.A a46 = new randoop.test.A((-1));
    randoop.test.A a47 = a46.a1();
    randoop.test.A a48 = a44.a1(a46);
    randoop.test.A a49 = new randoop.test.A();
    randoop.test.A a50 = a46.a1(a49);
    int i53 = a50.a5(0, 1);
    randoop.test.A a54 = a40.a1(a50);
    randoop.test.A a55 = new randoop.test.A();
    randoop.test.A a56 = a55.a1();
    randoop.test.B b57 = a40.a2(a55);
    int i58 = a29.a3(b57);
    randoop.test.A a59 = new randoop.test.A(b57);
    int i62 = a59.a5(1, 10);
    randoop.test.B b63 = a27.a2(a59);
    int i64 = a20.a3(b63);
    randoop.test.A a65 = new randoop.test.A(b63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 3);
    a1.a1(a1); org.junit.Assert.assertEquals(a1.i, -89);
    a3.a1(a3); org.junit.Assert.assertEquals(a3.i, -89);
    a4.a1(a4); org.junit.Assert.assertEquals(a4.i, 1);
    a5.a1(a5); org.junit.Assert.assertEquals(a5.i, 1);
    a7.a1(a7); org.junit.Assert.assertEquals(a7.i, -89);
    a9.a1(a9); org.junit.Assert.assertEquals(a9.i, -89);
    a10.a1(a10); org.junit.Assert.assertEquals(a10.i, 1);
    a11.a1(a11); org.junit.Assert.assertEquals(a11.i, 1);
    a12.a1(a12); org.junit.Assert.assertEquals(a12.i, 1);
    a13.a1(a13); org.junit.Assert.assertEquals(a13.i, 11);
    a17.a1(a17); org.junit.Assert.assertEquals(a17.i, 21);
    a19.a1(a19); org.junit.Assert.assertEquals(a19.i, -9);
    a20.a1(a20); org.junit.Assert.assertEquals(a20.i, 1);
    a23.a1(a23); org.junit.Assert.assertEquals(a23.i, -89);
    a25.a1(a25); org.junit.Assert.assertEquals(a25.i, -9);
    a26.a1(a26); org.junit.Assert.assertEquals(a26.i, 1);
    a27.a1(a27); org.junit.Assert.assertEquals(a27.i, 1);
    a29.a1(a29); org.junit.Assert.assertEquals(a29.i, -89);
    a31.a1(a31); org.junit.Assert.assertEquals(a31.i, -89);
    a33.a1(a33); org.junit.Assert.assertEquals(a33.i, -9);
    a34.a1(a34); org.junit.Assert.assertEquals(a34.i, 1);
    a35.a1(a35); org.junit.Assert.assertEquals(a35.i, 1);
    a36.a1(a36); org.junit.Assert.assertEquals(a36.i, 11);
    a38.a1(a38); org.junit.Assert.assertEquals(a38.i, -89);
    a40.a1(a40); org.junit.Assert.assertEquals(a40.i, -89);
    a41.a1(a41); org.junit.Assert.assertEquals(a41.i, 1);
    a42.a1(a42); org.junit.Assert.assertEquals(a42.i, 1);
    a44.a1(a44); org.junit.Assert.assertEquals(a44.i, -89);
    a46.a1(a46); org.junit.Assert.assertEquals(a46.i, -89);
    a47.a1(a47); org.junit.Assert.assertEquals(a47.i, 1);
    a48.a1(a48); org.junit.Assert.assertEquals(a48.i, 1);
    a49.a1(a49); org.junit.Assert.assertEquals(a49.i, 1);
    a50.a1(a50); org.junit.Assert.assertEquals(a50.i, 11);
    a54.a1(a54); org.junit.Assert.assertEquals(a54.i, 21);
    a55.a1(a55); org.junit.Assert.assertEquals(a55.i, 1);
    a56.a1(a56); org.junit.Assert.assertEquals(a56.i, 1);
    a59.a1(a59); org.junit.Assert.assertEquals(a59.i, 1);
    a65.a1(a65); org.junit.Assert.assertEquals(a65.i, 1);

  }

  @Test
  public void test30() throws Throwable {

    if (debug) { System.out.println(); System.out.print("CustomVisitorTest0.test30"); }


    randoop.test.A a1 = new randoop.test.A((-1));
    int i2 = a1.a6();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    a1.a1(a1); org.junit.Assert.assertEquals(a1.i, -9);

  }

  @Test
  public void test31() throws Throwable {

    if (debug) { System.out.println(); System.out.print("CustomVisitorTest0.test31"); }


    randoop.test.A a1 = new randoop.test.A((-1));
    randoop.test.A a3 = new randoop.test.A((-1));
    randoop.test.A a4 = a3.a1();
    randoop.test.A a5 = a1.a1(a3);
    randoop.test.A a6 = new randoop.test.A();
    randoop.test.A a7 = a3.a1(a6);
    randoop.test.A a8 = a3.a1();
    int i11 = a8.a5(1, (-1));
    randoop.test.A a13 = new randoop.test.A(0);
    randoop.test.A a15 = new randoop.test.A((-1));
    randoop.test.A a17 = new randoop.test.A((-1));
    randoop.test.A a19 = new randoop.test.A((-1));
    randoop.test.A a20 = a19.a1();
    randoop.test.A a21 = a17.a1(a19);
    randoop.test.A a22 = a15.a1(a21);
    randoop.test.A a24 = new randoop.test.A((-1));
    randoop.test.A a26 = new randoop.test.A((-1));
    randoop.test.A a27 = a26.a1();
    randoop.test.A a28 = a24.a1(a26);
    randoop.test.A a29 = new randoop.test.A();
    randoop.test.A a30 = a26.a1(a29);
    randoop.test.A a32 = new randoop.test.A((-1));
    randoop.test.A a34 = new randoop.test.A((-1));
    randoop.test.A a36 = new randoop.test.A((-1));
    randoop.test.A a37 = a36.a1();
    randoop.test.A a38 = a34.a1(a36);
    randoop.test.A a39 = a32.a1(a38);
    int i40 = a39.a6();
    randoop.test.B b41 = a30.a2(a39);
    randoop.test.B b43 = a13.a4(a15, b41, 1);
    int i44 = a8.a3(b41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 3);
    a1.a1(a1); org.junit.Assert.assertEquals(a1.i, -89);
    a3.a1(a3); org.junit.Assert.assertEquals(a3.i, -89);
    a4.a1(a4); org.junit.Assert.assertEquals(a4.i, 1);
    a5.a1(a5); org.junit.Assert.assertEquals(a5.i, 1);
    a6.a1(a6); org.junit.Assert.assertEquals(a6.i, 1);
    a7.a1(a7); org.junit.Assert.assertEquals(a7.i, 11);
    a8.a1(a8); org.junit.Assert.assertEquals(a8.i, 1);
    a13.a1(a13); org.junit.Assert.assertEquals(a13.i, 1);
    a15.a1(a15); org.junit.Assert.assertEquals(a15.i, -89);
    a17.a1(a17); org.junit.Assert.assertEquals(a17.i, -89);
    a19.a1(a19); org.junit.Assert.assertEquals(a19.i, -9);
    a20.a1(a20); org.junit.Assert.assertEquals(a20.i, 1);
    a21.a1(a21); org.junit.Assert.assertEquals(a21.i, 1);
    a22.a1(a22); org.junit.Assert.assertEquals(a22.i, 11);
    a24.a1(a24); org.junit.Assert.assertEquals(a24.i, -89);
    a26.a1(a26); org.junit.Assert.assertEquals(a26.i, -89);
    a27.a1(a27); org.junit.Assert.assertEquals(a27.i, 1);
    a28.a1(a28); org.junit.Assert.assertEquals(a28.i, 1);
    a29.a1(a29); org.junit.Assert.assertEquals(a29.i, 1);
    a30.a1(a30); org.junit.Assert.assertEquals(a30.i, 11);
    a32.a1(a32); org.junit.Assert.assertEquals(a32.i, -89);
    a34.a1(a34); org.junit.Assert.assertEquals(a34.i, -89);
    a36.a1(a36); org.junit.Assert.assertEquals(a36.i, -9);
    a37.a1(a37); org.junit.Assert.assertEquals(a37.i, 1);
    a38.a1(a38); org.junit.Assert.assertEquals(a38.i, 1);
    a39.a1(a39); org.junit.Assert.assertEquals(a39.i, 11);

  }

  @Test
  public void test32() throws Throwable {

    if (debug) { System.out.println(); System.out.print("CustomVisitorTest0.test32"); }


    randoop.test.A a1 = new randoop.test.A((-1));
    randoop.test.A a3 = new randoop.test.A((-1));
    randoop.test.A a4 = a3.a1();
    randoop.test.A a5 = a1.a1(a3);
    randoop.test.A a6 = new randoop.test.A();
    randoop.test.A a7 = a3.a1(a6);
    int i10 = a7.a5(0, 1);
    randoop.test.A a12 = new randoop.test.A((-1));
    randoop.test.A a14 = new randoop.test.A((-1));
    randoop.test.A a16 = new randoop.test.A((-1));
    randoop.test.A a17 = a16.a1();
    randoop.test.A a18 = a14.a1(a16);
    randoop.test.A a19 = a12.a1(a18);
    int i20 = a19.a6();
    randoop.test.A a22 = new randoop.test.A(0);
    randoop.test.A a24 = new randoop.test.A(100);
    randoop.test.A a26 = new randoop.test.A((-1));
    randoop.test.A a28 = new randoop.test.A((-1));
    randoop.test.A a29 = a28.a1();
    randoop.test.A a30 = a26.a1(a28);
    randoop.test.A a32 = new randoop.test.A((-1));
    randoop.test.A a34 = new randoop.test.A((-1));
    randoop.test.A a35 = a34.a1();
    randoop.test.A a36 = a32.a1(a34);
    randoop.test.A a37 = new randoop.test.A();
    randoop.test.A a38 = a34.a1(a37);
    int i41 = a38.a5(0, 1);
    randoop.test.A a42 = a28.a1(a38);
    randoop.test.A a43 = new randoop.test.A();
    randoop.test.A a44 = a43.a1();
    randoop.test.B b45 = a28.a2(a43);
    int i46 = a22.a3(a24, b45);
    randoop.test.B b48 = a7.a4(a19, b45, 10);
    randoop.test.A a50 = new randoop.test.A(1);
    randoop.test.A a51 = a50.a1();
    randoop.test.A a53 = new randoop.test.A((-1));
    randoop.test.A a55 = new randoop.test.A((-1));
    randoop.test.A a56 = a55.a1();
    randoop.test.A a57 = a53.a1(a55);
    randoop.test.A a59 = new randoop.test.A((-1));
    randoop.test.A a61 = new randoop.test.A((-1));
    randoop.test.A a62 = a61.a1();
    randoop.test.A a63 = a59.a1(a61);
    randoop.test.A a64 = new randoop.test.A();
    randoop.test.A a65 = a61.a1(a64);
    int i68 = a65.a5(0, 1);
    randoop.test.A a69 = a55.a1(a65);
    randoop.test.A a71 = new randoop.test.A((-1));
    randoop.test.A a72 = a71.a1();
    randoop.test.B b73 = a69.a2(a72);
    int i74 = a19.a3(a50, b73);
    randoop.test.A a75 = new randoop.test.A(b73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 1);
    a1.a1(a1); org.junit.Assert.assertEquals(a1.i, -89);
    a3.a1(a3); org.junit.Assert.assertEquals(a3.i, -89);
    a4.a1(a4); org.junit.Assert.assertEquals(a4.i, 1);
    a5.a1(a5); org.junit.Assert.assertEquals(a5.i, 1);
    a6.a1(a6); org.junit.Assert.assertEquals(a6.i, 1);
    a7.a1(a7); org.junit.Assert.assertEquals(a7.i, 11);
    a12.a1(a12); org.junit.Assert.assertEquals(a12.i, -89);
    a14.a1(a14); org.junit.Assert.assertEquals(a14.i, -89);
    a16.a1(a16); org.junit.Assert.assertEquals(a16.i, -9);
    a17.a1(a17); org.junit.Assert.assertEquals(a17.i, 1);
    a18.a1(a18); org.junit.Assert.assertEquals(a18.i, 1);
    a19.a1(a19); org.junit.Assert.assertEquals(a19.i, 11);
    a22.a1(a22); org.junit.Assert.assertEquals(a22.i, 1);
    a24.a1(a24); org.junit.Assert.assertEquals(a24.i, 1001);
    a26.a1(a26); org.junit.Assert.assertEquals(a26.i, -89);
    a28.a1(a28); org.junit.Assert.assertEquals(a28.i, -89);
    a29.a1(a29); org.junit.Assert.assertEquals(a29.i, 1);
    a30.a1(a30); org.junit.Assert.assertEquals(a30.i, 1);
    a32.a1(a32); org.junit.Assert.assertEquals(a32.i, -89);
    a34.a1(a34); org.junit.Assert.assertEquals(a34.i, -89);
    a35.a1(a35); org.junit.Assert.assertEquals(a35.i, 1);
    a36.a1(a36); org.junit.Assert.assertEquals(a36.i, 1);
    a37.a1(a37); org.junit.Assert.assertEquals(a37.i, 1);
    a38.a1(a38); org.junit.Assert.assertEquals(a38.i, 11);
    a42.a1(a42); org.junit.Assert.assertEquals(a42.i, 21);
    a43.a1(a43); org.junit.Assert.assertEquals(a43.i, 1);
    a44.a1(a44); org.junit.Assert.assertEquals(a44.i, 1);
    a50.a1(a50); org.junit.Assert.assertEquals(a50.i, 11);
    a51.a1(a51); org.junit.Assert.assertEquals(a51.i, 1);
    a53.a1(a53); org.junit.Assert.assertEquals(a53.i, -89);
    a55.a1(a55); org.junit.Assert.assertEquals(a55.i, -89);
    a56.a1(a56); org.junit.Assert.assertEquals(a56.i, 1);
    a57.a1(a57); org.junit.Assert.assertEquals(a57.i, 1);
    a59.a1(a59); org.junit.Assert.assertEquals(a59.i, -89);
    a61.a1(a61); org.junit.Assert.assertEquals(a61.i, -89);
    a62.a1(a62); org.junit.Assert.assertEquals(a62.i, 1);
    a63.a1(a63); org.junit.Assert.assertEquals(a63.i, 1);
    a64.a1(a64); org.junit.Assert.assertEquals(a64.i, 1);
    a65.a1(a65); org.junit.Assert.assertEquals(a65.i, 11);
    a69.a1(a69); org.junit.Assert.assertEquals(a69.i, 21);
    a71.a1(a71); org.junit.Assert.assertEquals(a71.i, -9);
    a72.a1(a72); org.junit.Assert.assertEquals(a72.i, 1);
    a75.a1(a75); org.junit.Assert.assertEquals(a75.i, 1);

  }

  @Test
  public void test33() throws Throwable {

    if (debug) { System.out.println(); System.out.print("CustomVisitorTest0.test33"); }


    randoop.test.A a1 = new randoop.test.A((-1));
    randoop.test.A a3 = new randoop.test.A((-1));
    randoop.test.A a5 = new randoop.test.A((-1));
    randoop.test.A a6 = a5.a1();
    randoop.test.A a7 = a3.a1(a5);
    randoop.test.A a8 = a1.a1(a7);
    int i9 = a8.a6();
    randoop.test.A a11 = new randoop.test.A((-1));
    int i14 = a11.a5(10, (-1));
    randoop.test.A a16 = new randoop.test.A((-1));
    randoop.test.A a18 = new randoop.test.A((-1));
    randoop.test.A a19 = a18.a1();
    randoop.test.A a20 = a16.a1(a18);
    randoop.test.A a21 = new randoop.test.A();
    randoop.test.A a22 = a18.a1(a21);
    randoop.test.A a24 = new randoop.test.A((-1));
    randoop.test.A a26 = new randoop.test.A((-1));
    randoop.test.A a27 = a26.a1();
    randoop.test.A a28 = a24.a1(a26);
    randoop.test.A a29 = new randoop.test.A();
    randoop.test.A a30 = a26.a1(a29);
    randoop.test.A a31 = a21.a1(a29);
    randoop.test.A a33 = new randoop.test.A((-1));
    randoop.test.A a35 = new randoop.test.A((-1));
    randoop.test.A a36 = a35.a1();
    randoop.test.A a37 = a33.a1(a35);
    randoop.test.A a38 = a29.a1(a35);
    randoop.test.A a39 = new randoop.test.A();
    randoop.test.A a40 = a39.a1();
    randoop.test.A a41 = a29.a1(a39);
    randoop.test.A a43 = new randoop.test.A((-1));
    randoop.test.A a45 = new randoop.test.A((-1));
    randoop.test.A a46 = a45.a1();
    randoop.test.A a47 = a43.a1(a45);
    randoop.test.A a49 = new randoop.test.A((-1));
    randoop.test.A a51 = new randoop.test.A((-1));
    randoop.test.A a52 = a51.a1();
    randoop.test.A a53 = a49.a1(a51);
    randoop.test.A a55 = new randoop.test.A((-1));
    randoop.test.A a57 = new randoop.test.A((-1));
    randoop.test.A a58 = a57.a1();
    randoop.test.A a59 = a55.a1(a57);
    randoop.test.A a60 = new randoop.test.A();
    randoop.test.A a61 = a57.a1(a60);
    int i64 = a61.a5(0, 1);
    randoop.test.A a65 = a51.a1(a61);
    randoop.test.A a66 = new randoop.test.A();
    randoop.test.A a67 = a66.a1();
    randoop.test.B b68 = a51.a2(a66);
    randoop.test.B b70 = a41.a4(a47, b68, 0);
    int i71 = a8.a3(a11, b68);
    randoop.test.A a72 = a11.a1();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a72);
    a1.a1(a1); org.junit.Assert.assertEquals(a1.i, -89);
    a3.a1(a3); org.junit.Assert.assertEquals(a3.i, -89);
    a5.a1(a5); org.junit.Assert.assertEquals(a5.i, -9);
    a6.a1(a6); org.junit.Assert.assertEquals(a6.i, 1);
    a7.a1(a7); org.junit.Assert.assertEquals(a7.i, 1);
    a8.a1(a8); org.junit.Assert.assertEquals(a8.i, 11);
    a11.a1(a11); org.junit.Assert.assertEquals(a11.i, -9);
    a16.a1(a16); org.junit.Assert.assertEquals(a16.i, -89);
    a18.a1(a18); org.junit.Assert.assertEquals(a18.i, -89);
    a19.a1(a19); org.junit.Assert.assertEquals(a19.i, 1);
    a20.a1(a20); org.junit.Assert.assertEquals(a20.i, 1);
    a21.a1(a21); org.junit.Assert.assertEquals(a21.i, 11);
    a22.a1(a22); org.junit.Assert.assertEquals(a22.i, 11);
    a24.a1(a24); org.junit.Assert.assertEquals(a24.i, -89);
    a26.a1(a26); org.junit.Assert.assertEquals(a26.i, -89);
    a27.a1(a27); org.junit.Assert.assertEquals(a27.i, 1);
    a28.a1(a28); org.junit.Assert.assertEquals(a28.i, 1);
    a29.a1(a29); org.junit.Assert.assertEquals(a29.i, 111);
    a30.a1(a30); org.junit.Assert.assertEquals(a30.i, 11);
    a31.a1(a31); org.junit.Assert.assertEquals(a31.i, 11);
    a33.a1(a33); org.junit.Assert.assertEquals(a33.i, -89);
    a35.a1(a35); org.junit.Assert.assertEquals(a35.i, -9);
    a36.a1(a36); org.junit.Assert.assertEquals(a36.i, 1);
    a37.a1(a37); org.junit.Assert.assertEquals(a37.i, 1);
    a38.a1(a38); org.junit.Assert.assertEquals(a38.i, 1);
    a39.a1(a39); org.junit.Assert.assertEquals(a39.i, 1);
    a40.a1(a40); org.junit.Assert.assertEquals(a40.i, 1);
    a41.a1(a41); org.junit.Assert.assertEquals(a41.i, 11);
    a43.a1(a43); org.junit.Assert.assertEquals(a43.i, -89);
    a45.a1(a45); org.junit.Assert.assertEquals(a45.i, -9);
    a46.a1(a46); org.junit.Assert.assertEquals(a46.i, 1);
    a47.a1(a47); org.junit.Assert.assertEquals(a47.i, 1);
    a49.a1(a49); org.junit.Assert.assertEquals(a49.i, -89);
    a51.a1(a51); org.junit.Assert.assertEquals(a51.i, -89);
    a52.a1(a52); org.junit.Assert.assertEquals(a52.i, 1);
    a53.a1(a53); org.junit.Assert.assertEquals(a53.i, 1);
    a55.a1(a55); org.junit.Assert.assertEquals(a55.i, -89);
    a57.a1(a57); org.junit.Assert.assertEquals(a57.i, -89);
    a58.a1(a58); org.junit.Assert.assertEquals(a58.i, 1);
    a59.a1(a59); org.junit.Assert.assertEquals(a59.i, 1);
    a60.a1(a60); org.junit.Assert.assertEquals(a60.i, 1);
    a61.a1(a61); org.junit.Assert.assertEquals(a61.i, 11);
    a65.a1(a65); org.junit.Assert.assertEquals(a65.i, 21);
    a66.a1(a66); org.junit.Assert.assertEquals(a66.i, 1);
    a67.a1(a67); org.junit.Assert.assertEquals(a67.i, 1);
    a72.a1(a72); org.junit.Assert.assertEquals(a72.i, 1);

  }

  @Test
  public void test34() throws Throwable {

    if (debug) { System.out.println(); System.out.print("CustomVisitorTest0.test34"); }


    randoop.test.A a1 = new randoop.test.A((-1));
    randoop.test.A a3 = new randoop.test.A((-1));
    randoop.test.A a4 = a3.a1();
    randoop.test.A a5 = a1.a1(a3);
    randoop.test.A a6 = new randoop.test.A();
    randoop.test.A a7 = a3.a1(a6);
    randoop.test.A a9 = new randoop.test.A((-1));
    randoop.test.A a11 = new randoop.test.A((-1));
    randoop.test.A a12 = a11.a1();
    randoop.test.A a13 = a9.a1(a11);
    randoop.test.A a14 = new randoop.test.A();
    randoop.test.A a15 = a11.a1(a14);
    randoop.test.A a16 = a6.a1(a14);
    int i19 = a6.a5(10, 100);
    randoop.test.A a21 = new randoop.test.A(1);
    int i24 = a21.a5(1, 1);
    randoop.test.A a26 = new randoop.test.A((-1));
    randoop.test.A a28 = new randoop.test.A((-1));
    randoop.test.A a29 = a28.a1();
    randoop.test.A a30 = a26.a1(a28);
    randoop.test.A a32 = new randoop.test.A((-1));
    randoop.test.A a34 = new randoop.test.A((-1));
    randoop.test.A a35 = a34.a1();
    randoop.test.A a36 = a32.a1(a34);
    randoop.test.A a37 = new randoop.test.A();
    randoop.test.A a38 = a34.a1(a37);
    int i41 = a38.a5(0, 1);
    randoop.test.A a42 = a28.a1(a38);
    randoop.test.A a44 = new randoop.test.A((-1));
    randoop.test.A a45 = a44.a1();
    randoop.test.B b46 = a42.a2(a45);
    randoop.test.B b48 = a6.a4(a21, b46, 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b48);
    a1.a1(a1); org.junit.Assert.assertEquals(a1.i, -89);
    a3.a1(a3); org.junit.Assert.assertEquals(a3.i, -89);
    a4.a1(a4); org.junit.Assert.assertEquals(a4.i, 1);
    a5.a1(a5); org.junit.Assert.assertEquals(a5.i, 1);
    a6.a1(a6); org.junit.Assert.assertEquals(a6.i, 11);
    a7.a1(a7); org.junit.Assert.assertEquals(a7.i, 11);
    a9.a1(a9); org.junit.Assert.assertEquals(a9.i, -89);
    a11.a1(a11); org.junit.Assert.assertEquals(a11.i, -89);
    a12.a1(a12); org.junit.Assert.assertEquals(a12.i, 1);
    a13.a1(a13); org.junit.Assert.assertEquals(a13.i, 1);
    a14.a1(a14); org.junit.Assert.assertEquals(a14.i, 1);
    a15.a1(a15); org.junit.Assert.assertEquals(a15.i, 11);
    a16.a1(a16); org.junit.Assert.assertEquals(a16.i, 11);
    a21.a1(a21); org.junit.Assert.assertEquals(a21.i, 11);
    a26.a1(a26); org.junit.Assert.assertEquals(a26.i, -89);
    a28.a1(a28); org.junit.Assert.assertEquals(a28.i, -89);
    a29.a1(a29); org.junit.Assert.assertEquals(a29.i, 1);
    a30.a1(a30); org.junit.Assert.assertEquals(a30.i, 1);
    a32.a1(a32); org.junit.Assert.assertEquals(a32.i, -89);
    a34.a1(a34); org.junit.Assert.assertEquals(a34.i, -89);
    a35.a1(a35); org.junit.Assert.assertEquals(a35.i, 1);
    a36.a1(a36); org.junit.Assert.assertEquals(a36.i, 1);
    a37.a1(a37); org.junit.Assert.assertEquals(a37.i, 1);
    a38.a1(a38); org.junit.Assert.assertEquals(a38.i, 11);
    a42.a1(a42); org.junit.Assert.assertEquals(a42.i, 21);
    a44.a1(a44); org.junit.Assert.assertEquals(a44.i, -9);
    a45.a1(a45); org.junit.Assert.assertEquals(a45.i, 1);

  }

  @Test
  public void test35() throws Throwable {

    if (debug) { System.out.println(); System.out.print("CustomVisitorTest0.test35"); }


    randoop.test.A a1 = new randoop.test.A((-1));
    randoop.test.A a3 = new randoop.test.A((-1));
    randoop.test.A a4 = a3.a1();
    randoop.test.A a5 = a1.a1(a3);
    randoop.test.A a6 = new randoop.test.A();
    randoop.test.A a7 = a3.a1(a6);
    randoop.test.A a9 = new randoop.test.A((-1));
    randoop.test.A a11 = new randoop.test.A((-1));
    randoop.test.A a12 = a11.a1();
    randoop.test.A a13 = a9.a1(a11);
    randoop.test.A a14 = new randoop.test.A();
    randoop.test.A a15 = a11.a1(a14);
    randoop.test.A a16 = a6.a1(a14);
    randoop.test.A a18 = new randoop.test.A((-1));
    randoop.test.A a20 = new randoop.test.A((-1));
    randoop.test.A a21 = a20.a1();
    randoop.test.A a22 = a18.a1(a20);
    randoop.test.A a23 = a14.a1(a20);
    randoop.test.A a24 = new randoop.test.A();
    randoop.test.A a25 = a24.a1();
    randoop.test.A a26 = a14.a1(a24);
    randoop.test.A a28 = new randoop.test.A((-1));
    randoop.test.A a30 = new randoop.test.A((-1));
    randoop.test.A a31 = a30.a1();
    randoop.test.A a32 = a28.a1(a30);
    randoop.test.A a34 = new randoop.test.A((-1));
    randoop.test.A a36 = new randoop.test.A((-1));
    randoop.test.A a37 = a36.a1();
    randoop.test.A a38 = a34.a1(a36);
    randoop.test.A a40 = new randoop.test.A((-1));
    randoop.test.A a42 = new randoop.test.A((-1));
    randoop.test.A a43 = a42.a1();
    randoop.test.A a44 = a40.a1(a42);
    randoop.test.A a45 = new randoop.test.A();
    randoop.test.A a46 = a42.a1(a45);
    int i49 = a46.a5(0, 1);
    randoop.test.A a50 = a36.a1(a46);
    randoop.test.A a51 = new randoop.test.A();
    randoop.test.A a52 = a51.a1();
    randoop.test.B b53 = a36.a2(a51);
    randoop.test.B b55 = a26.a4(a32, b53, 0);
    randoop.test.A a57 = new randoop.test.A((-1));
    randoop.test.A a59 = new randoop.test.A((-1));
    randoop.test.A a61 = new randoop.test.A((-1));
    randoop.test.A a62 = a61.a1();
    randoop.test.A a63 = a59.a1(a61);
    randoop.test.A a64 = a57.a1(a63);
    randoop.test.A a65 = a32.a1(a57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a65);
    a1.a1(a1); org.junit.Assert.assertEquals(a1.i, -89);
    a3.a1(a3); org.junit.Assert.assertEquals(a3.i, -89);
    a4.a1(a4); org.junit.Assert.assertEquals(a4.i, 1);
    a5.a1(a5); org.junit.Assert.assertEquals(a5.i, 1);
    a6.a1(a6); org.junit.Assert.assertEquals(a6.i, 11);
    a7.a1(a7); org.junit.Assert.assertEquals(a7.i, 11);
    a9.a1(a9); org.junit.Assert.assertEquals(a9.i, -89);
    a11.a1(a11); org.junit.Assert.assertEquals(a11.i, -89);
    a12.a1(a12); org.junit.Assert.assertEquals(a12.i, 1);
    a13.a1(a13); org.junit.Assert.assertEquals(a13.i, 1);
    a14.a1(a14); org.junit.Assert.assertEquals(a14.i, 111);
    a15.a1(a15); org.junit.Assert.assertEquals(a15.i, 11);
    a16.a1(a16); org.junit.Assert.assertEquals(a16.i, 11);
    a18.a1(a18); org.junit.Assert.assertEquals(a18.i, -89);
    a20.a1(a20); org.junit.Assert.assertEquals(a20.i, -9);
    a21.a1(a21); org.junit.Assert.assertEquals(a21.i, 1);
    a22.a1(a22); org.junit.Assert.assertEquals(a22.i, 1);
    a23.a1(a23); org.junit.Assert.assertEquals(a23.i, 1);
    a24.a1(a24); org.junit.Assert.assertEquals(a24.i, 1);
    a25.a1(a25); org.junit.Assert.assertEquals(a25.i, 1);
    a26.a1(a26); org.junit.Assert.assertEquals(a26.i, 11);
    a28.a1(a28); org.junit.Assert.assertEquals(a28.i, -89);
    a30.a1(a30); org.junit.Assert.assertEquals(a30.i, -9);
    a31.a1(a31); org.junit.Assert.assertEquals(a31.i, 1);
    a32.a1(a32); org.junit.Assert.assertEquals(a32.i, 11);
    a34.a1(a34); org.junit.Assert.assertEquals(a34.i, -89);
    a36.a1(a36); org.junit.Assert.assertEquals(a36.i, -89);
    a37.a1(a37); org.junit.Assert.assertEquals(a37.i, 1);
    a38.a1(a38); org.junit.Assert.assertEquals(a38.i, 1);
    a40.a1(a40); org.junit.Assert.assertEquals(a40.i, -89);
    a42.a1(a42); org.junit.Assert.assertEquals(a42.i, -89);
    a43.a1(a43); org.junit.Assert.assertEquals(a43.i, 1);
    a44.a1(a44); org.junit.Assert.assertEquals(a44.i, 1);
    a45.a1(a45); org.junit.Assert.assertEquals(a45.i, 1);
    a46.a1(a46); org.junit.Assert.assertEquals(a46.i, 11);
    a50.a1(a50); org.junit.Assert.assertEquals(a50.i, 21);
    a51.a1(a51); org.junit.Assert.assertEquals(a51.i, 1);
    a52.a1(a52); org.junit.Assert.assertEquals(a52.i, 1);
    a57.a1(a57); org.junit.Assert.assertEquals(a57.i, -89);
    a59.a1(a59); org.junit.Assert.assertEquals(a59.i, -89);
    a61.a1(a61); org.junit.Assert.assertEquals(a61.i, -9);
    a62.a1(a62); org.junit.Assert.assertEquals(a62.i, 1);
    a63.a1(a63); org.junit.Assert.assertEquals(a63.i, 1);
    a64.a1(a64); org.junit.Assert.assertEquals(a64.i, 11);
    a65.a1(a65); org.junit.Assert.assertEquals(a65.i, -79);

  }

  @Test
  public void test36() throws Throwable {

    if (debug) { System.out.println(); System.out.print("CustomVisitorTest0.test36"); }


    randoop.test.A a1 = new randoop.test.A((-1));
    randoop.test.A a3 = new randoop.test.A((-1));
    randoop.test.A a4 = a3.a1();
    randoop.test.A a5 = a1.a1(a3);
    randoop.test.A a6 = new randoop.test.A();
    randoop.test.A a7 = a3.a1(a6);
    randoop.test.A a8 = a3.a1();
    int i11 = a8.a5(1, (-1));
    int i14 = a8.a5((-1), (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    a1.a1(a1); org.junit.Assert.assertEquals(a1.i, -89);
    a3.a1(a3); org.junit.Assert.assertEquals(a3.i, -89);
    a4.a1(a4); org.junit.Assert.assertEquals(a4.i, 1);
    a5.a1(a5); org.junit.Assert.assertEquals(a5.i, 1);
    a6.a1(a6); org.junit.Assert.assertEquals(a6.i, 1);
    a7.a1(a7); org.junit.Assert.assertEquals(a7.i, 11);
    a8.a1(a8); org.junit.Assert.assertEquals(a8.i, 1);

  }

  @Test
  public void test37() throws Throwable {

    if (debug) { System.out.println(); System.out.print("CustomVisitorTest0.test37"); }


    randoop.test.A a1 = new randoop.test.A(1);
    randoop.test.A a2 = a1.a1();
    randoop.test.A a3 = a2.a1();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a3);
    a1.a1(a1); org.junit.Assert.assertEquals(a1.i, 11);
    a2.a1(a2); org.junit.Assert.assertEquals(a2.i, 1);
    a3.a1(a3); org.junit.Assert.assertEquals(a3.i, 1);

  }

  @Test
  public void test38() throws Throwable {

    if (debug) { System.out.println(); System.out.print("CustomVisitorTest0.test38"); }


    randoop.test.A a1 = new randoop.test.A((-1));
    randoop.test.A a3 = new randoop.test.A((-1));
    randoop.test.A a4 = a3.a1();
    randoop.test.A a5 = a1.a1(a3);
    randoop.test.A a6 = new randoop.test.A();
    randoop.test.A a7 = a3.a1(a6);
    randoop.test.A a9 = new randoop.test.A((-1));
    randoop.test.A a11 = new randoop.test.A((-1));
    randoop.test.A a12 = a11.a1();
    randoop.test.A a13 = a9.a1(a11);
    randoop.test.A a14 = new randoop.test.A();
    randoop.test.A a15 = a11.a1(a14);
    randoop.test.A a16 = a6.a1(a14);
    randoop.test.A a18 = new randoop.test.A((-1));
    randoop.test.A a20 = new randoop.test.A((-1));
    randoop.test.A a21 = a20.a1();
    randoop.test.A a22 = a18.a1(a20);
    randoop.test.A a23 = a14.a1(a20);
    int i24 = a23.a6();
    randoop.test.A a26 = new randoop.test.A(0);
    randoop.test.A a28 = new randoop.test.A((-1));
    randoop.test.A a30 = new randoop.test.A((-1));
    randoop.test.A a32 = new randoop.test.A((-1));
    randoop.test.A a33 = a32.a1();
    randoop.test.A a34 = a30.a1(a32);
    randoop.test.A a35 = a28.a1(a34);
    randoop.test.A a37 = new randoop.test.A((-1));
    randoop.test.A a39 = new randoop.test.A((-1));
    randoop.test.A a40 = a39.a1();
    randoop.test.A a41 = a37.a1(a39);
    randoop.test.A a42 = new randoop.test.A();
    randoop.test.A a43 = a39.a1(a42);
    randoop.test.A a45 = new randoop.test.A((-1));
    randoop.test.A a47 = new randoop.test.A((-1));
    randoop.test.A a49 = new randoop.test.A((-1));
    randoop.test.A a50 = a49.a1();
    randoop.test.A a51 = a47.a1(a49);
    randoop.test.A a52 = a45.a1(a51);
    int i53 = a52.a6();
    randoop.test.B b54 = a43.a2(a52);
    randoop.test.B b56 = a26.a4(a28, b54, 1);
    randoop.test.B b57 = a23.a2(a28);
    randoop.test.A a59 = new randoop.test.A((-1));
    randoop.test.A a61 = new randoop.test.A((-1));
    randoop.test.A a62 = a61.a1();
    randoop.test.A a63 = a59.a1(a61);
    randoop.test.B b64 = a23.a2(a59);
    randoop.test.A a65 = a23.a1();
    randoop.test.A a67 = new randoop.test.A(1);
    randoop.test.A a68 = a67.a1();
    randoop.test.B b69 = a23.a2(a67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b69);
    a1.a1(a1); org.junit.Assert.assertEquals(a1.i, -89);
    a3.a1(a3); org.junit.Assert.assertEquals(a3.i, -89);
    a4.a1(a4); org.junit.Assert.assertEquals(a4.i, 1);
    a5.a1(a5); org.junit.Assert.assertEquals(a5.i, 1);
    a6.a1(a6); org.junit.Assert.assertEquals(a6.i, 11);
    a7.a1(a7); org.junit.Assert.assertEquals(a7.i, 11);
    a9.a1(a9); org.junit.Assert.assertEquals(a9.i, -89);
    a11.a1(a11); org.junit.Assert.assertEquals(a11.i, -89);
    a12.a1(a12); org.junit.Assert.assertEquals(a12.i, 1);
    a13.a1(a13); org.junit.Assert.assertEquals(a13.i, 1);
    a14.a1(a14); org.junit.Assert.assertEquals(a14.i, 11);
    a15.a1(a15); org.junit.Assert.assertEquals(a15.i, 11);
    a16.a1(a16); org.junit.Assert.assertEquals(a16.i, 11);
    a18.a1(a18); org.junit.Assert.assertEquals(a18.i, -89);
    a20.a1(a20); org.junit.Assert.assertEquals(a20.i, -9);
    a21.a1(a21); org.junit.Assert.assertEquals(a21.i, 1);
    a22.a1(a22); org.junit.Assert.assertEquals(a22.i, 1);
    a23.a1(a23); org.junit.Assert.assertEquals(a23.i, 1);
    a26.a1(a26); org.junit.Assert.assertEquals(a26.i, 1);
    a28.a1(a28); org.junit.Assert.assertEquals(a28.i, -89);
    a30.a1(a30); org.junit.Assert.assertEquals(a30.i, -89);
    a32.a1(a32); org.junit.Assert.assertEquals(a32.i, -9);
    a33.a1(a33); org.junit.Assert.assertEquals(a33.i, 1);
    a34.a1(a34); org.junit.Assert.assertEquals(a34.i, 1);
    a35.a1(a35); org.junit.Assert.assertEquals(a35.i, 11);
    a37.a1(a37); org.junit.Assert.assertEquals(a37.i, -89);
    a39.a1(a39); org.junit.Assert.assertEquals(a39.i, -89);
    a40.a1(a40); org.junit.Assert.assertEquals(a40.i, 1);
    a41.a1(a41); org.junit.Assert.assertEquals(a41.i, 1);
    a42.a1(a42); org.junit.Assert.assertEquals(a42.i, 1);
    a43.a1(a43); org.junit.Assert.assertEquals(a43.i, 11);
    a45.a1(a45); org.junit.Assert.assertEquals(a45.i, -89);
    a47.a1(a47); org.junit.Assert.assertEquals(a47.i, -89);
    a49.a1(a49); org.junit.Assert.assertEquals(a49.i, -9);
    a50.a1(a50); org.junit.Assert.assertEquals(a50.i, 1);
    a51.a1(a51); org.junit.Assert.assertEquals(a51.i, 1);
    a52.a1(a52); org.junit.Assert.assertEquals(a52.i, 11);
    a59.a1(a59); org.junit.Assert.assertEquals(a59.i, -89);
    a61.a1(a61); org.junit.Assert.assertEquals(a61.i, -9);
    a62.a1(a62); org.junit.Assert.assertEquals(a62.i, 1);
    a63.a1(a63); org.junit.Assert.assertEquals(a63.i, 1);
    a65.a1(a65); org.junit.Assert.assertEquals(a65.i, 1);
    a67.a1(a67); org.junit.Assert.assertEquals(a67.i, 11);
    a68.a1(a68); org.junit.Assert.assertEquals(a68.i, 1);

  }

  @Test
  public void test39() throws Throwable {

    if (debug) { System.out.println(); System.out.print("CustomVisitorTest0.test39"); }


    randoop.test.A a1 = new randoop.test.A((-1));
    randoop.test.A a3 = new randoop.test.A((-1));
    randoop.test.A a4 = a3.a1();
    randoop.test.A a5 = a1.a1(a3);
    randoop.test.A a6 = new randoop.test.A();
    randoop.test.A a7 = a3.a1(a6);
    int i10 = a7.a5(0, 1);
    randoop.test.A a12 = new randoop.test.A((-1));
    randoop.test.A a14 = new randoop.test.A((-1));
    randoop.test.A a16 = new randoop.test.A((-1));
    randoop.test.A a17 = a16.a1();
    randoop.test.A a18 = a14.a1(a16);
    randoop.test.A a19 = a12.a1(a18);
    int i20 = a19.a6();
    randoop.test.A a22 = new randoop.test.A(0);
    randoop.test.A a24 = new randoop.test.A(100);
    randoop.test.A a26 = new randoop.test.A((-1));
    randoop.test.A a28 = new randoop.test.A((-1));
    randoop.test.A a29 = a28.a1();
    randoop.test.A a30 = a26.a1(a28);
    randoop.test.A a32 = new randoop.test.A((-1));
    randoop.test.A a34 = new randoop.test.A((-1));
    randoop.test.A a35 = a34.a1();
    randoop.test.A a36 = a32.a1(a34);
    randoop.test.A a37 = new randoop.test.A();
    randoop.test.A a38 = a34.a1(a37);
    int i41 = a38.a5(0, 1);
    randoop.test.A a42 = a28.a1(a38);
    randoop.test.A a43 = new randoop.test.A();
    randoop.test.A a44 = a43.a1();
    randoop.test.B b45 = a28.a2(a43);
    int i46 = a22.a3(a24, b45);
    randoop.test.B b48 = a7.a4(a19, b45, 10);
    randoop.test.A a49 = a19.a1();
    randoop.test.A a50 = a19.a1();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(a50);
    a1.a1(a1); org.junit.Assert.assertEquals(a1.i, -89);
    a3.a1(a3); org.junit.Assert.assertEquals(a3.i, -89);
    a4.a1(a4); org.junit.Assert.assertEquals(a4.i, 1);
    a5.a1(a5); org.junit.Assert.assertEquals(a5.i, 1);
    a6.a1(a6); org.junit.Assert.assertEquals(a6.i, 1);
    a7.a1(a7); org.junit.Assert.assertEquals(a7.i, 11);
    a12.a1(a12); org.junit.Assert.assertEquals(a12.i, -89);
    a14.a1(a14); org.junit.Assert.assertEquals(a14.i, -89);
    a16.a1(a16); org.junit.Assert.assertEquals(a16.i, -9);
    a17.a1(a17); org.junit.Assert.assertEquals(a17.i, 1);
    a18.a1(a18); org.junit.Assert.assertEquals(a18.i, 1);
    a19.a1(a19); org.junit.Assert.assertEquals(a19.i, 11);
    a22.a1(a22); org.junit.Assert.assertEquals(a22.i, 1);
    a24.a1(a24); org.junit.Assert.assertEquals(a24.i, 1001);
    a26.a1(a26); org.junit.Assert.assertEquals(a26.i, -89);
    a28.a1(a28); org.junit.Assert.assertEquals(a28.i, -89);
    a29.a1(a29); org.junit.Assert.assertEquals(a29.i, 1);
    a30.a1(a30); org.junit.Assert.assertEquals(a30.i, 1);
    a32.a1(a32); org.junit.Assert.assertEquals(a32.i, -89);
    a34.a1(a34); org.junit.Assert.assertEquals(a34.i, -89);
    a35.a1(a35); org.junit.Assert.assertEquals(a35.i, 1);
    a36.a1(a36); org.junit.Assert.assertEquals(a36.i, 1);
    a37.a1(a37); org.junit.Assert.assertEquals(a37.i, 1);
    a38.a1(a38); org.junit.Assert.assertEquals(a38.i, 11);
    a42.a1(a42); org.junit.Assert.assertEquals(a42.i, 21);
    a43.a1(a43); org.junit.Assert.assertEquals(a43.i, 1);
    a44.a1(a44); org.junit.Assert.assertEquals(a44.i, 1);
    a49.a1(a49); org.junit.Assert.assertEquals(a49.i, 1);
    a50.a1(a50); org.junit.Assert.assertEquals(a50.i, 1);

  }

}
