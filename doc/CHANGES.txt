Version 2.0.1, released November 30, 2015

Fixed a bug in the variable names for generated array declarations.

Randoop now generates tests involving fields (fixes issues #21 and #47).
A Randoop-generated test previously only invoked methods; now the
generated tests may access and set fields as well.  Use command-line
option --omit-field-list to make Randoop ignore certain fields.

Randoop now includes enums in generated tests (fixes issue #17).

JUnit now executes Randoop-generated tests in a deterministic order:
in ascending order by name.

The Randoop Eclipse plugin has moved into its own repository:
https://github.com/randoop/randoop-eclipse-plugin


Version 2.0, released October 13, 2015

The Randoop homepage is now http://randoop.github.io/randoop/ .
Moved the Randoop version control repository to its own GitHub organization:
it now appears at https://github.com/randoop/randoop
(previously https://github.com/mernst/randoop).

Randoop now outputs JUnit 4 tests (previously JUnit 3 tests).
These can be run from the command line using a command such as

  java -classpath .:$JUNITPATH org.junit.runner.JUnitCore RandoopTest

If command-line argument --junit-reflection-allowed=false is set when
running Randoop, then Randoop instead produces a Main class that calls each
of the test methods individually, without using reflection.

Created a new mailing list, randoop-discuss@googlegroups.com, for
discussions with Randoop users.  It is open to join and should be easier to
search than the existing randoop-developers@googlegroups.com mailing list.


Version 1.3.6, released August 10, 2015

Command-line-argument --junit-reflection-allowed=false causes Randoop to
avoid use of JUnit's reflective test invocation.  Use of direct method
calls instead can make Randoop's generated tests easier to analyze.

Changed default for --literals-level to CLASS.

Improvements in treatment of observer methods:  put observer results in the
pool, but not receivers after observer invocations.  If you are not using
observers when you run Randoop, then you are not using Randoop as intended
and Randoop may be generating sub-optimal test suites.

Fix bugs, notably:
 * #18 Handle non-visible thrown exceptions
 * #51 Use better variable names in generated tests
 * Use equals, not ==, to compare NaN

Many documentation improvements, including clarifications and
restructuring.  The manual mentions the Maven plug-in and explains that
Randoop is deterministic but your sequential Java program may not be.

Not directly related to Randoop, but possibly of interest to Randoop users:
ABB Corporation has released an improved version of Randoop.NET.  Compared to
the original version of Randoop.NET from Microsoft Research:
 * It fixes some bugs.
 * It adds new features, notably regression assertions for more effective
   regression testing, method transformers to delete or replace calls to
   specific methods in the assembly, and richer debug information collection.
 * It adds a GUI, as a VS2010 add-in.
The Java implementation of Randoop continues to have more features than
Randoop.NET, but ABB's improvements make the .NET tool more usable.


Version 1.3.5, released May 28, 2015

Command-line argument --check-regression-behavior controls whether the tests
include assertions about the current behavior.

Command-line argument --observers lets you provide a file listing observer
functions.

The Randoop homepage is now http://mernst.github.io/randoop/ .

Moved the Randoop version control repository from Google Code to GitHub,
and from the Mercurial version control system to Git.

Randoop now compiles, and its tests pass, under Java 8.


Version 1.3.4, released January 1, 2014

Bug fixes:
 * String lengths are checked correctly
 * No global timeout when per-thread timeout is in force
 * Better agent flag parsing
 * Don't output code like "catch (null e)".

Documentation:
 * Add troubleshooting section about no tests being created
 * Tips on reporting a bug
 * Documentation for building a release


Version 1.3.3, released Novmember 21, 2012

Bugfixes
  - Workaround for openjdk bug (http://bugs.sun.com/view_bug.do?bug_id=6973831)
  - Fix for PrettyPrinter
  - Unquoted character constants make Randoop generate uncompilable tests
  - Problem of using compare_checks in eclipse plugin by adding

Features
  - Suppress generics-related compiler warnings
  - Renaming sequence variables for a better name, and minimizing faulty sequence
  - Generated JUnit tests are compatible with Java 1.4
  - TimeoutExceeded and TimeOutException unified into TimeoutExceededException

Documentation enhanced


Version 1.3.1

Added @TestValue annotation, allowing users to specify additional
primitive values to Randoop programmatically.

Added checks for NullPointerException (in the absence of null inputs)
as a default contract.
