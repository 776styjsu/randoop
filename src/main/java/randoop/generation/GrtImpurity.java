package randoop.generation;

import java.lang.reflect.Constructor;
import java.lang.reflect.Executable;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import randoop.main.GenInputsAbstract;
import randoop.main.RandoopBug;
import randoop.operation.CallableOperation;
import randoop.operation.ConstructorCall;
import randoop.operation.MethodCall;
import randoop.operation.TypedClassOperation;
import randoop.operation.TypedOperation;
import randoop.sequence.Sequence;
import randoop.types.NonParameterizedType;
import randoop.types.Type;
import randoop.types.TypeTuple;
import randoop.util.Randomness;

/**
 * Implements the Impurity component, as described in "GRT: Program-Analysis-Guided Random Testing"
 * by Ma et. al (ASE 2015): https://people.kth.se/~artho/papers/lei-ase2015.pdf.
 *
 * <p>The Impurity component is a fuzzing mechanism that alters the states of (or creates new) input
 * objects for methods under test to generate more object states and potentially trigger more
 * branches, improving coverage for the program under test.
 *
 * <p>[TODO: It also generates more effective test with shorter length by reducing the number of
 * redundant sequences that does not side-effect the state of an object.]
 *
 * <p>GRT Impurity fuzzes inputs differently based on their type:
 *
 * <ul>
 *   <li>Primitive Numbers: Fuzzed around the original value using a Gaussian distribution with a
 *       predefined standard deviation.
 *   <li>String: Fuzzed through randomly selecting a string operations, including insertion,
 *       removal, replacement of characters, or taking a substring of the given string.
 *   <li>Other Objects (TODO): Perform purity analysis to determine methods that have side-effects
 *       to the state of the object, and mark them as impure. Then, Randoop will construct more
 *       effective test cases by calling these impure methods without redundant calls to pure
 *       methods.
 * </ul>
 */
public class GrtImpurity {

  /** Ways to fuzz a string. */
  private enum StringFuzzingOperation {
    /** Insert a random character at a random index in the string. */
    INSERT,

    /** Remove a character at a random index in the string. */
    REMOVE,

    /** Replace a character at a random index in the string with a random character. */
    REPLACE,

    /** Take a random substring of the string. */
    SUBSTRING
  }

  /** The standard deviation of the Gaussian distribution used to generate fuzzed numbers. */
  private static final double GAUSSIAN_STD = GenInputsAbstract.impurity_stddev;

  /** Do not instantiate. */
  private GrtImpurity() {
    throw new Error("Do not instantiate");
  }

  /**
   * Generate a fuzzed sequence for the given sequence.
   *
   * <p>This is the main entry point for the GRT Impurity. Sequence constructs the input object for
   * the method under test. This method will append additional fuzzing statements to the sequence to
   * fuzz the input object. This will generate more object states and potentially improve coverage
   * for the unit test generated by Randoop by triggering more branches.
   *
   * <p>Different types have different fuzzing strategies:
   *
   * <ul>
   *   <li><b>Primitive numbers (int, short, long, float, double, and their wrapper classes):</b>
   *       Fuzzed using a Gaussian distribution with the original value as the mean (mu). The fuzzed
   *       value is generated as mu + delta, where delta = N(0, GAUSSIAN_STD). For short values, if
   *       the fuzzed value exceeds the range, it is truncated. (truncatedShort = -32768 + fuzzedInt
   *       % 32768).
   *   <li><b>Strings:</b> A random fuzzing operation is selected from the StringFuzzingOperation
   *       enum, such as insertion, removal, replacement of characters, or taking a substring. Each
   *       operation involves a random index, range, or character.
   *   <li><b>Other Objects:</b> [Further implementation required] Methods are analyzed for
   *       side-effects to enhance test effectiveness by focusing on these interactions.
   * </ul>
   *
   * <p><b>Note:</b> This method does not fuzz void, char, boolean, or byte types. If no applicable
   * fuzzing operations are found or possible, the original sequence is returned unchanged.
   *
   * @param sequence the sequence to fuzz
   * @return a new sequence with additional fuzzing statements appended at the end, and a count of
   *     the number of fuzzing statements added. If no fuzzing statements are added, the original
   *     sequence is returned, and the count is 0.
   */
  public static GrtImpurityAndNumStatements fuzz(Sequence sequence) {
    // A counter to keep track of the number of fuzzing statements added to the sequence
    FuzzStatementOffset fuzzStatementOffset = new FuzzStatementOffset();

    Type outputType = sequence.getLastVariable().getType();

    // Do not fuzz void, char, boolean, or byte.
    if (outputType.isVoid()
        || outputType.runtimeClassIs(char.class)
        || outputType.runtimeClassIs(Character.class)
        || outputType.runtimeClassIs(boolean.class)
        || outputType.runtimeClassIs(Boolean.class)
        || outputType.runtimeClassIs(byte.class)
        || outputType.runtimeClassIs(Byte.class)) {
      return new GrtImpurityAndNumStatements(sequence, 0);
    }

    Class<?> outputClass = outputType.getRuntimeClass();
    List<Executable> fuzzingOperations = new ArrayList<>();

    // Append input statements and fuzzing statements based on the type of the output object
    try {
      if (outputClass.isPrimitive()) { // fuzzing primitive numbers
        sequence = appendGaussianDeltaSequence(sequence, outputClass);
        fuzzingOperations = getNumberFuzzingMethods(outputClass);
      } else if (outputClass == String.class) { // fuzzing String
        // Randomly select a fuzzing operation for String.
        StringFuzzingOperation operation =
            StringFuzzingOperation.values()[
                Randomness.nextRandomInt(StringFuzzingOperation.values().length)];
        try {
          sequence = appendStringFuzzingInputs(sequence, operation, fuzzStatementOffset);
        } catch (IndexOutOfBoundsException e) {
          // Ignore failed fuzzing operation and return the original sequence
          return new GrtImpurityAndNumStatements(sequence, 0);
        }
        fuzzingOperations = getStringFuzzingMethod(operation);
      } else {
        // TODO: Fuzz other objects based on purity analysis
        //  return the original sequence for now
        return new GrtImpurityAndNumStatements(sequence, 0);
      }
    } catch (Exception e) { // All other exceptions are unexpected
      throw new RandoopBug(e);
    }

    Sequence output = sequence;

    // TODO: Implement cast to improve short fuzzing readability
    //  (e.g. cast to Integer for Integer.sum when fuzzing short can make Integer.valueOf()
    //  unnecessary)

    // Append fuzzing operations to the sequence
    Iterator<Executable> iterator = fuzzingOperations.iterator();
    while (iterator.hasNext()) {
      Executable executable = iterator.next();
      if (!iterator.hasNext()) {
        break;
      }
      output =
          extendWithOperation(output, executable, getOutputType(executable), fuzzStatementOffset);
    }

    output =
        extendWithOperation(
            output,
            fuzzingOperations.get(fuzzingOperations.size() - 1),
            outputType,
            fuzzStatementOffset);

    return new GrtImpurityAndNumStatements(output, fuzzStatementOffset.getOffset());
  }

  /**
   * Create a new sequence with a fuzzing operation appended to the given sequence.
   *
   * @param sequence the sequence to append the fuzzing operations to
   * @param fuzzingOperation the method to be invoked to fuzz the object
   * @param outputType the output type of the fuzzing operation
   * @param fuzzStatementOffset the offset counter for the number of fuzzing statements added
   * @return a sequence with the fuzzing statement appended at the end
   */
  private static Sequence extendWithOperation(
      Sequence sequence,
      Executable fuzzingOperation,
      Type outputType,
      FuzzStatementOffset fuzzStatementOffset) {
    CallableOperation callableOperation = createCallableOperation(fuzzingOperation);
    NonParameterizedType declaringType =
        new NonParameterizedType(fuzzingOperation.getDeclaringClass());
    List<Type> inputTypeList = getInputTypeList(fuzzingOperation, declaringType);
    TypeTuple inputType = new TypeTuple(inputTypeList);
    TypedOperation typedOperation =
        new TypedClassOperation(callableOperation, declaringType, inputType, outputType);
    List<Integer> inputIndex = calculateInputIndex(sequence, inputTypeList.size());
    fuzzStatementOffset.increment(inputTypeList.size());
    List<Sequence> sequenceList = Collections.singletonList(sequence);
    return Sequence.createSequence(typedOperation, sequenceList, inputIndex);
  }

  /**
   * Create a callable operation for fuzzing an object of a given type using the given method.
   *
   * @param executable the method to be invoked to fuzz the object
   * @return a callable operation for fuzzing an object
   */
  private static CallableOperation createCallableOperation(Executable executable) {
    if (executable instanceof Method) {
      return new MethodCall((Method) executable);
    } else {
      return new ConstructorCall((Constructor<?>) executable);
    }
  }

  /**
   * Returns the output type of the given executable.
   *
   * @param executable the executable to get the output type of
   * @return the output type of the given executable
   */
  private static Type getOutputType(Executable executable) {
    Class<?> outputClass;
    if (executable instanceof Method) {
      outputClass = ((Method) executable).getReturnType();
    } else {
      outputClass = ((Constructor<?>) executable).getDeclaringClass();
    }
    return Type.forClass(outputClass);
  }

  /**
   * Get the list of input types for the given method.
   *
   * @param executable the method to get the input types of
   * @param declaringType the type that declares the given method
   * @return the list of input types for the given method
   */
  private static List<Type> getInputTypeList(
      Executable executable, NonParameterizedType declaringType) {
    List<Type> inputTypeList = new ArrayList<>();
    if (!Modifier.isStatic(executable.getModifiers()) && executable instanceof Method) {
      inputTypeList.add(declaringType);
    }
    for (Class<?> cls : executable.getParameterTypes()) {
      inputTypeList.add(Type.forClass(cls));
    }
    return inputTypeList;
  }

  /**
   * Calculate the index of statements in the sequence that are the inputs for the fuzzing
   * operation. Precondition: The input statements are the last n statements in the sequence, where
   * n is the number of input types.
   *
   * @param sequence the sequence to calculate the input index of
   * @param inputTypeListSize the number of input types of the given executable
   * @return the index of statements in the sequence that are the inputs for the fuzzing operation
   */
  private static List<Integer> calculateInputIndex(Sequence sequence, int inputTypeListSize) {
    List<Integer> inputIndex = new ArrayList<>();
    for (int i = 0; i < inputTypeListSize; i++) {
      inputIndex.add(sequence.size() - inputTypeListSize + i);
    }
    return inputIndex;
  }

  /**
   * Create a statement representing a Gaussian delta and append it to the given sequence. This is
   * used for fuzzing primitive numbers, being added to the original input value.
   *
   * @param sequence the sequence to append the Gaussian delta to
   * @param cls the class of the Gaussian number to be generated and appended
   * @return a sequence with the Gaussian delta appended at the end
   */
  private static Sequence appendGaussianDeltaSequence(Sequence sequence, Class<?> cls) {
    Object gaussianDelta = getGaussianDelta(cls);
    Sequence deltaSequence = Sequence.createSequenceForPrimitive(gaussianDelta);
    List<Sequence> temp = new ArrayList<>(Collections.singletonList(sequence));
    temp.add(deltaSequence); // Add fuzzing sequence to the list
    return Sequence.concatenate(temp); // Assuming concatenate combines all sequences in the list
  }

  /**
   * Get a Gaussian delta value N(0, GAUSSIAN_STD) of the given class.
   *
   * @param cls the class of the Gaussian number to be generated
   * @return a Gaussian delta value with 0 mean and a predefined standard deviation with the given
   *     class
   */
  private static Object getGaussianDelta(Class<?> cls) {
    double randomGaussian = GAUSSIAN_STD * Randomness.nextRandomGaussian(1);
    if (cls == int.class || cls == Integer.class) {
      return (int) Math.round(randomGaussian);
    } else if (cls == short.class || cls == Short.class) {
      return (short) Math.round(randomGaussian);
    } else if (cls == long.class || cls == Long.class) {
      return Math.round(randomGaussian);
    } else if (cls == float.class || cls == Float.class) {
      return (float) randomGaussian;
    } else if (cls == double.class || cls == Double.class) {
      return randomGaussian;
    } else {
      throw new RuntimeException("Unexpected primitive type: " + cls.getName());
    }
  }

  /**
   * Get the methods for fuzzing primitive numbers of the given class.
   *
   * @param cls the class of the primitive number to be fuzzed
   * @return a list of methods that will be used to fuzz the primitive number
   * @throws NoSuchMethodException if getMethod fails to find the method
   * @throws IllegalArgumentException if an unexpected primitive type is passed
   */
  private static List<Executable> getNumberFuzzingMethods(Class<?> cls)
      throws NoSuchMethodException {
    List<Executable> methodList = new ArrayList<>();

    if (cls == int.class || cls == Integer.class) {
      methodList.add(Integer.class.getMethod("sum", int.class, int.class));
    } else if (cls == double.class || cls == Double.class) {
      methodList.add(Double.class.getMethod("sum", double.class, double.class));
    } else if (cls == float.class || cls == Float.class) {
      methodList.add(Float.class.getMethod("sum", float.class, float.class));
    } else if (cls == long.class || cls == Long.class) {
      methodList.add(Long.class.getMethod("sum", long.class, long.class));
    } // Short doesn't have a sum method, so we use Integer.sum and get the short value
    else if (cls == short.class || cls == Short.class) {
      methodList.add(Integer.class.getMethod("sum", int.class, int.class));
      methodList.add(Integer.class.getMethod("valueOf", int.class));
      methodList.add(Integer.class.getMethod("shortValue"));
    } else {
      throw new IllegalArgumentException("Unexpected primitive type: " + cls.getName());
    }

    return methodList;
  }

  /**
   * Create and append all statements needed for the String fuzzing operation to the given sequence.
   * Precondition: Length of the input String to be fuzzed is not 0.
   *
   * @param sequence the sequence to append the String fuzzing operation inputs to
   * @param operation the String fuzzing operation to perform
   * @param fuzzStatementOffset the offset counter for the number of fuzzing statements added
   * @return a sequence with the String fuzzing operation inputs appended at the end
   * @throws IllegalArgumentException if invalid sequence or String fuzzing operation is passed
   * @throws IndexOutOfBoundsException if the input String length is 0
   * @throws NoSuchMethodException getMethod fails to find the method
   */
  private static Sequence appendStringFuzzingInputs(
      Sequence sequence, StringFuzzingOperation operation, FuzzStatementOffset fuzzStatementOffset)
      throws IllegalArgumentException, NoSuchMethodException {
    sequence = appendStringBuilder(sequence, fuzzStatementOffset);

    Object stringValue = getStringValue(sequence);
    int stringLength = stringValue.toString().length();

    if (stringLength == 0 && operation != StringFuzzingOperation.INSERT) {
      throw new IndexOutOfBoundsException(
          "String length is 0. Will return the original sequence without fuzzing.");
    }

    List<Sequence> fuzzingSequenceList = getStringFuzzingInputs(operation, stringLength);

    List<Sequence> temp = new ArrayList<>(Collections.singletonList(sequence));
    temp.addAll(fuzzingSequenceList); // Assuming these are sequences that need to be concatenated
    return Sequence.concatenate(temp); // Concatenate all sequences together
  }

  /**
   * Append a StringBuilder constructor statement to the given sequence. The value used by the
   * StringBuilder constructor is from the last statement in the sequence. It is assumed that the
   * last statement in the sequence is a String value.
   *
   * @param sequence the sequence to append the StringBuilder constructor to
   * @param fuzzStatementOffset the offset counter for the number of fuzzing statements added
   * @return a sequence with the StringBuilder constructor appended at the end
   * @throws NoSuchMethodException if the StringBuilder constructor cannot be found
   */
  private static Sequence appendStringBuilder(
      Sequence sequence, FuzzStatementOffset fuzzStatementOffset) throws NoSuchMethodException {
    Constructor<?> stringBuilderConstructor = StringBuilder.class.getConstructor(String.class);
    return extendWithOperation(
        sequence,
        stringBuilderConstructor,
        getOutputType(stringBuilderConstructor),
        fuzzStatementOffset);
  }

  /**
   * Get the String value from the given sequence. Precondition: The String value is the 2nd last
   * statement in the sequence. This is because a StringBuilder constructor is appended to the
   * sequence before calling this method, and the String is being used as the input for the
   * StringBuilder constructor.
   *
   * @param sequence the sequence to get the String value from
   * @return the String value from the given sequence
   * @throws IllegalArgumentException if the String value cannot be obtained
   */
  private static Object getStringValue(Sequence sequence) {
    try {
      // Original String value is the 2nd last statement in the sequence
      return sequence.getStatement(sequence.size() - 2).getValue();
    } catch (IllegalArgumentException e) {
      // Randoop could not obtain the String value from its sequence collection.
      throw new IllegalArgumentException("Unable to obtain the String value", e);
    }
  }

  /**
   * Get a list of sequences that represent the inputs for the fuzzing operation for String.
   *
   * @param operation the String fuzzing operation to perform
   * @param stringLength the length of the string to be fuzzed, for generating valid random indices
   * @return a list of sequences that represent the inputs for the fuzzing operation
   */
  private static List<Sequence> getStringFuzzingInputs(
      StringFuzzingOperation operation, int stringLength) {
    switch (operation) {
      case INSERT:
        return getInsertInputs(stringLength);
      case REMOVE:
        return getRemoveInputs(stringLength);
      case REPLACE:
        return getReplaceInputs(stringLength);
      case SUBSTRING:
        return getSubstringInputs(stringLength);
      default:
        throw new IllegalArgumentException(
            "Invalid enum value was passed to getStringFuzzingInputs: " + operation);
    }
  }

  /**
   * Generate the inputs as sequences for the insertion operation.
   *
   * @param stringLength the length of the string to be fuzzed
   * @return a list of sequences that represent the inputs for the insertion operation
   */
  private static List<Sequence> getInsertInputs(int stringLength) {
    int randomIndex = Randomness.nextRandomInt(stringLength + 1);
    char randomChar = (char) (Randomness.nextRandomInt(95) + 32); // ASCII 32-126
    Sequence randomIndexSequence = Sequence.createSequenceForPrimitive(randomIndex);
    Sequence randomCharSequence = Sequence.createSequenceForPrimitive(randomChar);
    return Arrays.asList(randomIndexSequence, randomCharSequence);
  }

  /**
   * Generate a random index as sequence for the removal operation.
   *
   * @param stringLength the length of the string to be fuzzed
   * @return a sequence (singleton) that represent the input for the removal operation
   */
  private static List<Sequence> getRemoveInputs(int stringLength) {
    int randomIndex = Randomness.nextRandomInt(stringLength);
    Sequence randomIndexSequence = Sequence.createSequenceForPrimitive(randomIndex);
    return Collections.singletonList(randomIndexSequence);
  }

  /**
   * Generate the inputs as sequences for the replacement operation.
   *
   * @param stringLength the length of the string to be fuzzed
   * @return a list of sequences that represent the input for the replacement operation
   */
  private static List<Sequence> getReplaceInputs(int stringLength) {
    int randomIndex1 = Randomness.nextRandomInt(stringLength);
    int randomIndex2 = Randomness.nextRandomInt(stringLength);
    int startIndex = Math.min(randomIndex1, randomIndex2);
    int endIndex = Math.max(randomIndex1, randomIndex2);
    String randomChar = String.valueOf((char) (Randomness.nextRandomInt(95) + 32)); // ASCII 32-126
    Sequence startIndexSequence = Sequence.createSequenceForPrimitive(startIndex);
    Sequence endIndexSequence = Sequence.createSequenceForPrimitive(endIndex);
    Sequence randomCharSequence = Sequence.createSequenceForPrimitive(randomChar);
    return Arrays.asList(startIndexSequence, endIndexSequence, randomCharSequence);
  }

  /**
   * Generate the inputs as sequences for the substring operation.
   *
   * @param stringLength the length of the string to be fuzzed
   * @return a list of sequences that represent the input for the substring operation
   */
  private static List<Sequence> getSubstringInputs(int stringLength) {
    int randomIndex1 = Randomness.nextRandomInt(stringLength);
    int randomIndex2 = Randomness.nextRandomInt(stringLength);
    int startIndex = Math.min(randomIndex1, randomIndex2);
    int endIndex = Math.max(randomIndex1, randomIndex2);
    Sequence startIndexSequence = Sequence.createSequenceForPrimitive(startIndex);
    Sequence endIndexSequence = Sequence.createSequenceForPrimitive(endIndex);
    return Arrays.asList(startIndexSequence, endIndexSequence);
  }

  /**
   * Get a list of methods that represent the fuzzing operations for String.
   *
   * @param operation the string fuzzing operation to perform
   * @return a list of methods that will be used to fuzz the input String
   * @throws NoSuchMethodException if no suitable method is found for the given operation
   * @throws IllegalArgumentException if an invalid enum value is passed
   */
  private static List<Executable> getStringFuzzingMethod(StringFuzzingOperation operation)
      throws NoSuchMethodException {
    List<Executable> methodList = new ArrayList<>();

    switch (operation) {
      case INSERT:
        methodList.add(StringBuilder.class.getMethod("insert", int.class, char.class));
        methodList.add(StringBuilder.class.getMethod("toString"));
        break;
      case REMOVE:
        methodList.add(StringBuilder.class.getMethod("deleteCharAt", int.class));
        methodList.add(StringBuilder.class.getMethod("toString"));
        break;
      case REPLACE:
        methodList.add(
            StringBuilder.class.getMethod("replace", int.class, int.class, String.class));
        methodList.add(StringBuilder.class.getMethod("toString"));
        break;
      case SUBSTRING:
        methodList.add(StringBuilder.class.getMethod("substring", int.class, int.class));
        break;
      default:
        throw new IllegalArgumentException(
            "Invalid enum value was passed to getStringFuzzingMethod: " + operation);
    }

    return methodList;
  }

  /**
   * A helper class to store the extended sequence and the number of fuzzing statements added to the
   * sequence. The number of fuzzing statements added to the sequence is needed for the forward
   * generation's input selection process to select the correct fuzzed inputs.
   */
  private static class FuzzStatementOffset {
    /** The number of fuzzing statements added to the sequence. */
    private int offset;

    /** Prevents instantiation. */
    private FuzzStatementOffset() {
      this.offset = 0;
    }

    /** Get the number of fuzzing statements added to the sequence. */
    private int getOffset() {
      return this.offset;
    }

    /** Increment the number of fuzzing statements added to the sequence. */
    private void increment(int numStatements) {
      this.offset += numStatements;
    }
  }
}
