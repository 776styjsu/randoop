^\Qjava.io.File.list()\E$
^\Qjava.io.File.list(java.io.FilenameFilter)\E$
^\Qjava.io.File.listFiles()\E$
^\Qjava.io.File.listFiles(java.io.FileFilter)\E$
^\Qjava.io.File.listFiles(java.io.FilenameFilter)\E$
^\Qjava.io.File.listRoots()\E$
^\Qjava.io.PrintStream.requireNonNull(java.lang.Object, java.lang.String)\E$
^\Qjava.lang.Class$Atomic.casAnnotationData(java.lang.Class, java.lang.Class$AnnotationData, java.lang.Class$AnnotationData)\E$
^\Qjava.lang.Class$Atomic.casAnnotationType(java.lang.Class, sun.reflect.annotation.AnnotationType, sun.reflect.annotation.AnnotationType)\E$
^\Qjava.lang.Class$Atomic.casReflectionData(java.lang.Class, java.lang.ref.SoftReference, java.lang.ref.SoftReference)\E$
^\Qjava.lang.Class$EnclosingMethodInfo.getEnclosingClass()\E$
^\Qjava.lang.Class.argumentTypesToString(java.lang.Class[])\E$
^\Qjava.lang.Class.asSubclass(java.lang.Class)\E$
^\Qjava.lang.Class.checkMemberAccess(int, java.lang.Class, boolean)\E$
^\Qjava.lang.Class.copyConstructors(java.lang.reflect.Constructor[])\E$
^\Qjava.lang.Class.desiredAssertionStatus0(java.lang.Class)\E$
^\Qjava.lang.Class.forName(java.lang.String)\E$
^\Qjava.lang.Class.forName(java.lang.String, boolean, java.lang.ClassLoader)\E$
^\Qjava.lang.Class.forName0(java.lang.String, boolean, java.lang.ClassLoader, java.lang.Class)\E$
^\Qjava.lang.Class.getClasses()\E$
^\Qjava.lang.Class.getComponentType()\E$
^\Qjava.lang.Class.getConstructor(java.lang.Class[])\E$
^\Qjava.lang.Class.getConstructor0(java.lang.Class[], int)\E$
^\Qjava.lang.Class.getConstructors()\E$
^\Qjava.lang.Class.getDeclaredClasses()\E$
^\Qjava.lang.Class.getDeclaredClasses0()\E$
^\Qjava.lang.Class.getDeclaredConstructor(java.lang.Class[])\E$
^\Qjava.lang.Class.getDeclaredConstructors()\E$
^\Qjava.lang.Class.getDeclaredMethod(java.lang.String, java.lang.Class[])\E$
^\Qjava.lang.Class.getDeclaringClass()\E$
^\Qjava.lang.Class.getDeclaringClass0()\E$
^\Qjava.lang.Class.getEnclosingClass()\E$
^\Qjava.lang.Class.getEnclosingConstructor()\E$
^\Qjava.lang.Class.getInterfaces()\E$
^\Qjava.lang.Class.getInterfaces0()\E$
^\Qjava.lang.Class.getMethod(java.lang.String, java.lang.Class[])\E$
^\Qjava.lang.Class.getMethod0(java.lang.String, java.lang.Class[], boolean)\E$
^\Qjava.lang.Class.getPrimitiveClass(java.lang.String)\E$
^\Qjava.lang.Class.getSigners()\E$
^\Qjava.lang.Class.getSuperclass()\E$
^\Qjava.lang.Class.isAssignableFrom(java.lang.Class)\E$
^\Qjava.lang.Class.privateGetMethodRecursive(java.lang.String, java.lang.Class[], boolean, java.lang.Class$MethodArray)\E$
^\Qjava.lang.Class.privateGetPublicFields(java.util.Set)\E$
^\Qjava.lang.Class.searchMethods(java.lang.reflect.Method[], java.lang.String, java.lang.Class[])\E$
^\Qjava.lang.Class.toClass(java.lang.reflect.Type)\E$
^\Qjava.lang.Object.getClass()\E$
^\Qjava.lang.Object.hashCode()\E$
^\Qjava.lang.Object.toString()\E$
^\Qjava.lang.String.hashCode()\E$
^\Qjava.lang.System.clearProperty(java.lang.String)\E$
^\Qjava.lang.System.console()\E$
^\Qjava.lang.System.currentTimeMillis()\E$
^\Qjava.lang.System.getProperties()\E$
^\Qjava.lang.System.getProperty(java.lang.String)\E$
^\Qjava.lang.System.getProperty(java.lang.String, java.lang.String)\E$
^\Qjava.lang.System.getSecurityManager()\E$
^\Qjava.lang.System.getenv()\E$
^\Qjava.lang.System.getenv(java.lang.String)\E$
^\Qjava.lang.System.identityHashCode(java.lang.Object)\E$
^\Qjava.lang.System.inheritedChannel()\E$
^\Qjava.lang.System.mapLibraryName(java.lang.String)\E$
^\Qjava.lang.System.nanoTime()\E$
^\Qjava.lang.System.setProperty(java.lang.String, java.lang.String)\E$
^\Qjava.lang.reflect.Field.<init>(java.lang.Class, java.lang.String, java.lang.Class, int, int, java.lang.String, byte[])\E$
^\Qjava.lang.reflect.Field.getDeclaringClass()\E$
^\Qjava.lang.reflect.Field.getType()\E$
^\Qjava.lang.reflect.Method.<init>(java.lang.Class, java.lang.String, java.lang.Class[], java.lang.Class, java.lang.Class[], int, int, java.lang.String, byte[], byte[], byte[])\E$
^\Qjava.lang.reflect.Method.getDeclaringClass()\E$
^\Qjava.lang.reflect.Method.getExceptionTypes()\E$
^\Qjava.lang.reflect.Method.getParameterTypes()\E$
^\Qjava.lang.reflect.Method.getReturnType()\E$
^\Qjava.lang.reflect.Method.hashCode()\E$
^\Qjava.text.BreakIterator.getAvailableLocales()\E$
^\Qjava.util.AbstractCollection.containsAll(java.util.Collection)\E$
^\Qjava.util.AbstractCollection.finishToArray(java.lang.Object[], java.util.Iterator)\E$
^\Qjava.util.AbstractCollection.removeAll(java.util.Collection)\E$
^\Qjava.util.AbstractCollection.retainAll(java.util.Collection)\E$
^\Qjava.util.AbstractCollection.toArray(java.lang.Object[])\E$
^\Qjava.util.AbstractList.hashCode()\E$
^\Qjava.util.AbstractMap$SimpleEntry.hashCode()\E$
^\Qjava.util.AbstractMap$SimpleEntry.toString()\E$
^\Qjava.util.AbstractMap$SimpleImmutableEntry.hashCode()\E$
^\Qjava.util.AbstractMap$SimpleImmutableEntry.toString()\E$
^\Qjava.util.AbstractMap.hashCode()\E$
^\Qjava.util.AbstractMap.toString()\E$
^\Qjava.util.AbstractSet.hashCode()\E$
^\Qjava.util.AbstractSet.removeAll(java.util.Collection)\E$
^\Qjava.util.ArrayList$ArrayListSpliterator.forEachRemaining(java.util.function.Consumer)\E$
^\Qjava.util.ArrayList$ArrayListSpliterator.tryAdvance(java.util.function.Consumer)\E$
^\Qjava.util.ArrayList$Itr.forEachRemaining(java.util.function.Consumer)\E$
^\Qjava.util.ArrayList.batchRemove(java.util.Collection, boolean)\E$
^\Qjava.util.ArrayList.forEach(java.util.function.Consumer)\E$
^\Qjava.util.ArrayList.removeAll(java.util.Collection)\E$
^\Qjava.util.ArrayList.removeIf(java.util.function.Predicate)\E$
^\Qjava.util.ArrayList.retainAll(java.util.Collection)\E$
^\Qjava.util.ArrayList.sort(java.util.Comparator)\E$
^\Qjava.util.ArrayList.toArray(java.lang.Object[])\E$
^\Qjava.util.Arrays$ArrayList.forEach(java.util.function.Consumer)\E$
^\Qjava.util.Arrays$ArrayList.sort(java.util.Comparator)\E$
^\Qjava.util.Arrays$ArrayList.toArray(java.lang.Object[])\E$
^\Qjava.util.Arrays.asList(java.lang.Object[])\E$
^\Qjava.util.Arrays.binarySearch(java.lang.Object[], int, int, java.lang.Object, java.util.Comparator)\E$
^\Qjava.util.Arrays.binarySearch(java.lang.Object[], java.lang.Object, java.util.Comparator)\E$
^\Qjava.util.Arrays.binarySearch0(java.lang.Object[], int, int, java.lang.Object, java.util.Comparator)\E$
^\Qjava.util.Arrays.copyOf(java.lang.Object[], int)\E$
^\Qjava.util.Arrays.copyOf(java.lang.Object[], int, java.lang.Class)\E$
^\Qjava.util.Arrays.copyOfRange(java.lang.Object[], int, int)\E$
^\Qjava.util.Arrays.copyOfRange(java.lang.Object[], int, int, java.lang.Class)\E$
^\Qjava.util.Arrays.deepHashCode(java.lang.Object[])\E$
^\Qjava.util.Arrays.hashCode(boolean[])\E$
^\Qjava.util.Arrays.hashCode(byte[])\E$
^\Qjava.util.Arrays.hashCode(char[])\E$
^\Qjava.util.Arrays.hashCode(double[])\E$
^\Qjava.util.Arrays.hashCode(float[])\E$
^\Qjava.util.Arrays.hashCode(int[])\E$
^\Qjava.util.Arrays.hashCode(java.lang.Object[])\E$
^\Qjava.util.Arrays.hashCode(long[])\E$
^\Qjava.util.Arrays.hashCode(short[])\E$
^\Qjava.util.Arrays.legacyMergeSort(java.lang.Object[], int, int, java.util.Comparator)\E$
^\Qjava.util.Arrays.legacyMergeSort(java.lang.Object[], java.util.Comparator)\E$
^\Qjava.util.Arrays.parallelPrefix(java.lang.Object[], int, int, java.util.function.BinaryOperator)\E$
^\Qjava.util.Arrays.parallelPrefix(java.lang.Object[], java.util.function.BinaryOperator)\E$
^\Qjava.util.Arrays.parallelSetAll(java.lang.Object[], java.util.function.IntFunction)\E$
^\Qjava.util.Arrays.parallelSort(java.lang.Comparable[])\E$
^\Qjava.util.Arrays.parallelSort(java.lang.Comparable[], int, int)\E$
^\Qjava.util.Arrays.parallelSort(java.lang.Object[], int, int, java.util.Comparator)\E$
^\Qjava.util.Arrays.parallelSort(java.lang.Object[], java.util.Comparator)\E$
^\Qjava.util.Arrays.setAll(java.lang.Object[], java.util.function.IntFunction)\E$
^\Qjava.util.Arrays.sort(java.lang.Object[], int, int, java.util.Comparator)\E$
^\Qjava.util.Arrays.sort(java.lang.Object[], java.util.Comparator)\E$
^\Qjava.util.Arrays.spliterator(java.lang.Object[])\E$
^\Qjava.util.Arrays.spliterator(java.lang.Object[], int, int)\E$
^\Qjava.util.Arrays.stream(java.lang.Object[])\E$
^\Qjava.util.Arrays.stream(java.lang.Object[], int, int)\E$
^\Qjava.util.Collection.containsAll(java.util.Collection)\E$
^\Qjava.util.Collection.hashCode()\E$
^\Qjava.util.Collection.removeAll(java.util.Collection)\E$
^\Qjava.util.Collection.removeIf(java.util.function.Predicate)\E$
^\Qjava.util.Collection.retainAll(java.util.Collection)\E$
^\Qjava.util.Collection.toArray(java.lang.Object[])\E$
^\Qjava.util.Collections$AsLIFOQueue.containsAll(java.util.Collection)\E$
^\Qjava.util.Collections$AsLIFOQueue.forEach(java.util.function.Consumer)\E$
^\Qjava.util.Collections$AsLIFOQueue.removeAll(java.util.Collection)\E$
^\Qjava.util.Collections$AsLIFOQueue.removeIf(java.util.function.Predicate)\E$
^\Qjava.util.Collections$AsLIFOQueue.retainAll(java.util.Collection)\E$
^\Qjava.util.Collections$AsLIFOQueue.toArray(java.lang.Object[])\E$
^\Qjava.util.Collections$CheckedCollection.containsAll(java.util.Collection)\E$
^\Qjava.util.Collections$CheckedCollection.forEach(java.util.function.Consumer)\E$
^\Qjava.util.Collections$CheckedCollection.removeAll(java.util.Collection)\E$
^\Qjava.util.Collections$CheckedCollection.removeIf(java.util.function.Predicate)\E$
^\Qjava.util.Collections$CheckedCollection.retainAll(java.util.Collection)\E$
^\Qjava.util.Collections$CheckedCollection.toArray(java.lang.Object[])\E$
^\Qjava.util.Collections$CheckedList.sort(java.util.Comparator)\E$
^\Qjava.util.Collections$CheckedMap$CheckedEntrySet.batchRemove(java.util.Collection, boolean)\E$
^\Qjava.util.Collections$CheckedMap$CheckedEntrySet.checkedEntry(java.util.Map$Entry, java.lang.Class)\E$
^\Qjava.util.Collections$CheckedMap$CheckedEntrySet.containsAll(java.util.Collection)\E$
^\Qjava.util.Collections$CheckedMap$CheckedEntrySet.removeAll(java.util.Collection)\E$
^\Qjava.util.Collections$CheckedMap$CheckedEntrySet.retainAll(java.util.Collection)\E$
^\Qjava.util.Collections$CheckedMap$CheckedEntrySet.toArray(java.lang.Object[])\E$
^\Qjava.util.Collections$CheckedMap.compute(java.lang.Object, java.util.function.BiFunction)\E$
^\Qjava.util.Collections$CheckedMap.computeIfAbsent(java.lang.Object, java.util.function.Function)\E$
^\Qjava.util.Collections$CheckedMap.computeIfPresent(java.lang.Object, java.util.function.BiFunction)\E$
^\Qjava.util.Collections$CheckedMap.forEach(java.util.function.BiConsumer)\E$
^\Qjava.util.Collections$CheckedMap.merge(java.lang.Object, java.lang.Object, java.util.function.BiFunction)\E$
^\Qjava.util.Collections$CheckedMap.replaceAll(java.util.function.BiFunction)\E$
^\Qjava.util.Collections$CheckedMap.typeCheck(java.util.function.BiFunction)\E$
^\Qjava.util.Collections$CheckedNavigableMap.comparator()\E$
^\Qjava.util.Collections$CheckedSortedMap.comparator()\E$
^\Qjava.util.Collections$CheckedSortedSet.comparator()\E$
^\Qjava.util.Collections$CopiesList.toArray(java.lang.Object[])\E$
^\Qjava.util.Collections$EmptyIterator.forEachRemaining(java.util.function.Consumer)\E$
^\Qjava.util.Collections$EmptyList.containsAll(java.util.Collection)\E$
^\Qjava.util.Collections$EmptyList.forEach(java.util.function.Consumer)\E$
^\Qjava.util.Collections$EmptyList.removeIf(java.util.function.Predicate)\E$
^\Qjava.util.Collections$EmptyList.sort(java.util.Comparator)\E$
^\Qjava.util.Collections$EmptyList.toArray(java.lang.Object[])\E$
^\Qjava.util.Collections$EmptyMap.compute(java.lang.Object, java.util.function.BiFunction)\E$
^\Qjava.util.Collections$EmptyMap.computeIfAbsent(java.lang.Object, java.util.function.Function)\E$
^\Qjava.util.Collections$EmptyMap.computeIfPresent(java.lang.Object, java.util.function.BiFunction)\E$
^\Qjava.util.Collections$EmptyMap.forEach(java.util.function.BiConsumer)\E$
^\Qjava.util.Collections$EmptyMap.merge(java.lang.Object, java.lang.Object, java.util.function.BiFunction)\E$
^\Qjava.util.Collections$EmptyMap.replaceAll(java.util.function.BiFunction)\E$
^\Qjava.util.Collections$EmptySet.containsAll(java.util.Collection)\E$
^\Qjava.util.Collections$EmptySet.forEach(java.util.function.Consumer)\E$
^\Qjava.util.Collections$EmptySet.removeIf(java.util.function.Predicate)\E$
^\Qjava.util.Collections$EmptySet.toArray(java.lang.Object[])\E$
^\Qjava.util.Collections$SetFromMap.containsAll(java.util.Collection)\E$
^\Qjava.util.Collections$SetFromMap.forEach(java.util.function.Consumer)\E$
^\Qjava.util.Collections$SetFromMap.removeAll(java.util.Collection)\E$
^\Qjava.util.Collections$SetFromMap.removeIf(java.util.function.Predicate)\E$
^\Qjava.util.Collections$SetFromMap.retainAll(java.util.Collection)\E$
^\Qjava.util.Collections$SetFromMap.toArray(java.lang.Object[])\E$
^\Qjava.util.Collections$SingletonList.forEach(java.util.function.Consumer)\E$
^\Qjava.util.Collections$SingletonList.removeIf(java.util.function.Predicate)\E$
^\Qjava.util.Collections$SingletonList.sort(java.util.Comparator)\E$
^\Qjava.util.Collections$SingletonMap.compute(java.lang.Object, java.util.function.BiFunction)\E$
^\Qjava.util.Collections$SingletonMap.computeIfAbsent(java.lang.Object, java.util.function.Function)\E$
^\Qjava.util.Collections$SingletonMap.computeIfPresent(java.lang.Object, java.util.function.BiFunction)\E$
^\Qjava.util.Collections$SingletonMap.forEach(java.util.function.BiConsumer)\E$
^\Qjava.util.Collections$SingletonMap.merge(java.lang.Object, java.lang.Object, java.util.function.BiFunction)\E$
^\Qjava.util.Collections$SingletonMap.replaceAll(java.util.function.BiFunction)\E$
^\Qjava.util.Collections$SingletonSet.forEach(java.util.function.Consumer)\E$
^\Qjava.util.Collections$SingletonSet.removeIf(java.util.function.Predicate)\E$
^\Qjava.util.Collections$SynchronizedCollection.containsAll(java.util.Collection)\E$
^\Qjava.util.Collections$SynchronizedCollection.forEach(java.util.function.Consumer)\E$
^\Qjava.util.Collections$SynchronizedCollection.removeAll(java.util.Collection)\E$
^\Qjava.util.Collections$SynchronizedCollection.removeIf(java.util.function.Predicate)\E$
^\Qjava.util.Collections$SynchronizedCollection.retainAll(java.util.Collection)\E$
^\Qjava.util.Collections$SynchronizedCollection.toArray(java.lang.Object[])\E$
^\Qjava.util.Collections$SynchronizedList.sort(java.util.Comparator)\E$
^\Qjava.util.Collections$SynchronizedMap.compute(java.lang.Object, java.util.function.BiFunction)\E$
^\Qjava.util.Collections$SynchronizedMap.computeIfAbsent(java.lang.Object, java.util.function.Function)\E$
^\Qjava.util.Collections$SynchronizedMap.computeIfPresent(java.lang.Object, java.util.function.BiFunction)\E$
^\Qjava.util.Collections$SynchronizedMap.forEach(java.util.function.BiConsumer)\E$
^\Qjava.util.Collections$SynchronizedMap.merge(java.lang.Object, java.lang.Object, java.util.function.BiFunction)\E$
^\Qjava.util.Collections$SynchronizedMap.replaceAll(java.util.function.BiFunction)\E$
^\Qjava.util.Collections$SynchronizedSortedMap.comparator()\E$
^\Qjava.util.Collections$SynchronizedSortedSet.comparator()\E$
^\Qjava.util.Collections$UnmodifiableCollection.containsAll(java.util.Collection)\E$
^\Qjava.util.Collections$UnmodifiableCollection.forEach(java.util.function.Consumer)\E$
^\Qjava.util.Collections$UnmodifiableCollection.removeAll(java.util.Collection)\E$
^\Qjava.util.Collections$UnmodifiableCollection.removeIf(java.util.function.Predicate)\E$
^\Qjava.util.Collections$UnmodifiableCollection.retainAll(java.util.Collection)\E$
^\Qjava.util.Collections$UnmodifiableCollection.toArray(java.lang.Object[])\E$
^\Qjava.util.Collections$UnmodifiableList.sort(java.util.Comparator)\E$
^\Qjava.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator.forEachRemaining(java.util.function.Consumer)\E$
^\Qjava.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator.getComparator()\E$
^\Qjava.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator.tryAdvance(java.util.function.Consumer)\E$
^\Qjava.util.Collections$UnmodifiableMap$UnmodifiableEntrySet.containsAll(java.util.Collection)\E$
^\Qjava.util.Collections$UnmodifiableMap$UnmodifiableEntrySet.entryConsumer(java.util.function.Consumer)\E$
^\Qjava.util.Collections$UnmodifiableMap$UnmodifiableEntrySet.forEach(java.util.function.Consumer)\E$
^\Qjava.util.Collections$UnmodifiableMap$UnmodifiableEntrySet.toArray(java.lang.Object[])\E$
^\Qjava.util.Collections$UnmodifiableMap.compute(java.lang.Object, java.util.function.BiFunction)\E$
^\Qjava.util.Collections$UnmodifiableMap.computeIfAbsent(java.lang.Object, java.util.function.Function)\E$
^\Qjava.util.Collections$UnmodifiableMap.computeIfPresent(java.lang.Object, java.util.function.BiFunction)\E$
^\Qjava.util.Collections$UnmodifiableMap.forEach(java.util.function.BiConsumer)\E$
^\Qjava.util.Collections$UnmodifiableMap.merge(java.lang.Object, java.lang.Object, java.util.function.BiFunction)\E$
^\Qjava.util.Collections$UnmodifiableMap.replaceAll(java.util.function.BiFunction)\E$
^\Qjava.util.Collections$UnmodifiableSortedMap.comparator()\E$
^\Qjava.util.Collections$UnmodifiableSortedSet.comparator()\E$
^\Qjava.util.Collections.addAll(java.util.Collection, java.lang.Object[])\E$
^\Qjava.util.Collections.asLifoQueue(java.util.Deque)\E$
^\Qjava.util.Collections.binarySearch(java.util.List, java.lang.Object)\E$
^\Qjava.util.Collections.binarySearch(java.util.List, java.lang.Object, java.util.Comparator)\E$
^\Qjava.util.Collections.checkedCollection(java.util.Collection, java.lang.Class)\E$
^\Qjava.util.Collections.checkedList(java.util.List, java.lang.Class)\E$
^\Qjava.util.Collections.checkedMap(java.util.Map, java.lang.Class, java.lang.Class)\E$
^\Qjava.util.Collections.checkedNavigableMap(java.util.NavigableMap, java.lang.Class, java.lang.Class)\E$
^\Qjava.util.Collections.checkedNavigableSet(java.util.NavigableSet, java.lang.Class)\E$
^\Qjava.util.Collections.checkedQueue(java.util.Queue, java.lang.Class)\E$
^\Qjava.util.Collections.checkedSet(java.util.Set, java.lang.Class)\E$
^\Qjava.util.Collections.checkedSortedMap(java.util.SortedMap, java.lang.Class, java.lang.Class)\E$
^\Qjava.util.Collections.checkedSortedSet(java.util.SortedSet, java.lang.Class)\E$
^\Qjava.util.Collections.copy(java.util.List, java.util.List)\E$
^\Qjava.util.Collections.disjoint(java.util.Collection, java.util.Collection)\E$
^\Qjava.util.Collections.emptyEnumeration()\E$
^\Qjava.util.Collections.emptyIterator()\E$
^\Qjava.util.Collections.emptyList()\E$
^\Qjava.util.Collections.emptyListIterator()\E$
^\Qjava.util.Collections.emptyMap()\E$
^\Qjava.util.Collections.emptyNavigableMap()\E$
^\Qjava.util.Collections.emptyNavigableSet()\E$
^\Qjava.util.Collections.emptySet()\E$
^\Qjava.util.Collections.emptySortedMap()\E$
^\Qjava.util.Collections.emptySortedSet()\E$
^\Qjava.util.Collections.enumeration(java.util.Collection)\E$
^\Qjava.util.Collections.fill(java.util.List, java.lang.Object)\E$
^\Qjava.util.Collections.frequency(java.util.Collection, java.lang.Object)\E$
^\Qjava.util.Collections.get(java.util.ListIterator, int)\E$
^\Qjava.util.Collections.indexOfSubList(java.util.List, java.util.List)\E$
^\Qjava.util.Collections.indexedBinarySearch(java.util.List, java.lang.Object)\E$
^\Qjava.util.Collections.indexedBinarySearch(java.util.List, java.lang.Object, java.util.Comparator)\E$
^\Qjava.util.Collections.iteratorBinarySearch(java.util.List, java.lang.Object)\E$
^\Qjava.util.Collections.iteratorBinarySearch(java.util.List, java.lang.Object, java.util.Comparator)\E$
^\Qjava.util.Collections.lastIndexOfSubList(java.util.List, java.util.List)\E$
^\Qjava.util.Collections.list(java.util.Enumeration)\E$
^\Qjava.util.Collections.max(java.util.Collection)\E$
^\Qjava.util.Collections.max(java.util.Collection, java.util.Comparator)\E$
^\Qjava.util.Collections.min(java.util.Collection)\E$
^\Qjava.util.Collections.min(java.util.Collection, java.util.Comparator)\E$
^\Qjava.util.Collections.nCopies(int, java.lang.Object)\E$
^\Qjava.util.Collections.newSetFromMap(java.util.Map)\E$
^\Qjava.util.Collections.replaceAll(java.util.List, java.lang.Object, java.lang.Object)\E$
^\Qjava.util.Collections.reverse(java.util.List)\E$
^\Qjava.util.Collections.reverseOrder()\E$
^\Qjava.util.Collections.reverseOrder(java.util.Comparator)\E$
^\Qjava.util.Collections.rotate(java.util.List, int)\E$
^\Qjava.util.Collections.rotate1(java.util.List, int)\E$
^\Qjava.util.Collections.rotate2(java.util.List, int)\E$
^\Qjava.util.Collections.shuffle(java.util.List)\E$
^\Qjava.util.Collections.shuffle(java.util.List, java.util.Random)\E$
^\Qjava.util.Collections.singleton(java.lang.Object)\E$
^\Qjava.util.Collections.singletonIterator(java.lang.Object)\E$
^\Qjava.util.Collections.singletonList(java.lang.Object)\E$
^\Qjava.util.Collections.singletonMap(java.lang.Object, java.lang.Object)\E$
^\Qjava.util.Collections.singletonSpliterator(java.lang.Object)\E$
^\Qjava.util.Collections.sort(java.util.List)\E$
^\Qjava.util.Collections.sort(java.util.List, java.util.Comparator)\E$
^\Qjava.util.Collections.swap(java.util.List, int, int)\E$
^\Qjava.util.Collections.synchronizedCollection(java.util.Collection)\E$
^\Qjava.util.Collections.synchronizedCollection(java.util.Collection, java.lang.Object)\E$
^\Qjava.util.Collections.synchronizedList(java.util.List)\E$
^\Qjava.util.Collections.synchronizedList(java.util.List, java.lang.Object)\E$
^\Qjava.util.Collections.synchronizedMap(java.util.Map)\E$
^\Qjava.util.Collections.synchronizedNavigableMap(java.util.NavigableMap)\E$
^\Qjava.util.Collections.synchronizedNavigableSet(java.util.NavigableSet)\E$
^\Qjava.util.Collections.synchronizedSet(java.util.Set)\E$
^\Qjava.util.Collections.synchronizedSet(java.util.Set, java.lang.Object)\E$
^\Qjava.util.Collections.synchronizedSortedMap(java.util.SortedMap)\E$
^\Qjava.util.Collections.synchronizedSortedSet(java.util.SortedSet)\E$
^\Qjava.util.Collections.unmodifiableCollection(java.util.Collection)\E$
^\Qjava.util.Collections.unmodifiableList(java.util.List)\E$
^\Qjava.util.Collections.unmodifiableMap(java.util.Map)\E$
^\Qjava.util.Collections.unmodifiableNavigableMap(java.util.NavigableMap)\E$
^\Qjava.util.Collections.unmodifiableNavigableSet(java.util.NavigableSet)\E$
^\Qjava.util.Collections.unmodifiableSet(java.util.Set)\E$
^\Qjava.util.Collections.unmodifiableSortedMap(java.util.SortedMap)\E$
^\Qjava.util.Collections.unmodifiableSortedSet(java.util.SortedSet)\E$
^\Qjava.util.Collections.zeroLengthArray(java.lang.Class)\E$
^\Qjava.util.Comparator.compare(java.lang.Object, java.lang.Object)\E$
^\Qjava.util.Comparator.comparing(java.util.function.Function)\E$
^\Qjava.util.Comparator.comparing(java.util.function.Function, java.util.Comparator)\E$
^\Qjava.util.Comparator.comparingDouble(java.util.function.ToDoubleFunction)\E$
^\Qjava.util.Comparator.comparingInt(java.util.function.ToIntFunction)\E$
^\Qjava.util.Comparator.comparingLong(java.util.function.ToLongFunction)\E$
^\Qjava.util.Comparator.naturalOrder()\E$
^\Qjava.util.Comparator.nullsFirst(java.util.Comparator)\E$
^\Qjava.util.Comparator.nullsLast(java.util.Comparator)\E$
^\Qjava.util.Comparator.reverseOrder()\E$
^\Qjava.util.Comparator.thenComparing(java.util.Comparator)\E$
^\Qjava.util.Comparator.thenComparing(java.util.function.Function)\E$
^\Qjava.util.Comparator.thenComparing(java.util.function.Function, java.util.Comparator)\E$
^\Qjava.util.Comparator.thenComparingDouble(java.util.function.ToDoubleFunction)\E$
^\Qjava.util.Comparator.thenComparingInt(java.util.function.ToIntFunction)\E$
^\Qjava.util.Comparator.thenComparingLong(java.util.function.ToLongFunction)\E$
^\Qjava.util.EnumMap$EntrySet.toArray(java.lang.Object[])\E$
^\Qjava.util.EnumMap.equals(java.util.EnumMap)\E$
^\Qjava.util.HashMap$EntrySet.forEach(java.util.function.Consumer)\E$
^\Qjava.util.HashMap$EntrySpliterator.forEachRemaining(java.util.function.Consumer)\E$
^\Qjava.util.HashMap$EntrySpliterator.tryAdvance(java.util.function.Consumer)\E$
^\Qjava.util.HashMap$KeySet.forEach(java.util.function.Consumer)\E$
^\Qjava.util.HashMap$KeySpliterator.forEachRemaining(java.util.function.Consumer)\E$
^\Qjava.util.HashMap$KeySpliterator.tryAdvance(java.util.function.Consumer)\E$
^\Qjava.util.HashMap$TreeNode.balanceDeletion(java.util.HashMap$TreeNode, java.util.HashMap$TreeNode)\E$
^\Qjava.util.HashMap$TreeNode.balanceInsertion(java.util.HashMap$TreeNode, java.util.HashMap$TreeNode)\E$
^\Qjava.util.HashMap$TreeNode.checkInvariants(java.util.HashMap$TreeNode)\E$
^\Qjava.util.HashMap$TreeNode.find(int, java.lang.Object, java.lang.Class)\E$
^\Qjava.util.HashMap$TreeNode.moveRootToFront(java.util.HashMap$Node[], java.util.HashMap$TreeNode)\E$
^\Qjava.util.HashMap$TreeNode.rotateLeft(java.util.HashMap$TreeNode, java.util.HashMap$TreeNode)\E$
^\Qjava.util.HashMap$TreeNode.rotateRight(java.util.HashMap$TreeNode, java.util.HashMap$TreeNode)\E$
^\Qjava.util.HashMap$ValueSpliterator.forEachRemaining(java.util.function.Consumer)\E$
^\Qjava.util.HashMap$ValueSpliterator.tryAdvance(java.util.function.Consumer)\E$
^\Qjava.util.HashMap$Values.forEach(java.util.function.Consumer)\E$
^\Qjava.util.HashMap.comparableClassFor(java.lang.Object)\E$
^\Qjava.util.HashMap.compareComparables(java.lang.Class, java.lang.Object, java.lang.Object)\E$
^\Qjava.util.HashMap.compute(java.lang.Object, java.util.function.BiFunction)\E$
^\Qjava.util.HashMap.computeIfAbsent(java.lang.Object, java.util.function.Function)\E$
^\Qjava.util.HashMap.computeIfPresent(java.lang.Object, java.util.function.BiFunction)\E$
^\Qjava.util.HashMap.forEach(java.util.function.BiConsumer)\E$
^\Qjava.util.HashMap.merge(java.lang.Object, java.lang.Object, java.util.function.BiFunction)\E$
^\Qjava.util.HashMap.replaceAll(java.util.function.BiFunction)\E$
^\Qjava.util.IdentityHashMap$EntrySet.removeAll(java.util.Collection)\E$
^\Qjava.util.IdentityHashMap$EntrySet.toArray(java.lang.Object[])\E$
^\Qjava.util.IdentityHashMap$EntrySpliterator.forEachRemaining(java.util.function.Consumer)\E$
^\Qjava.util.IdentityHashMap$EntrySpliterator.tryAdvance(java.util.function.Consumer)\E$
^\Qjava.util.IdentityHashMap$KeySet.removeAll(java.util.Collection)\E$
^\Qjava.util.IdentityHashMap$KeySet.toArray(java.lang.Object[])\E$
^\Qjava.util.IdentityHashMap$KeySpliterator.forEachRemaining(java.util.function.Consumer)\E$
^\Qjava.util.IdentityHashMap$KeySpliterator.tryAdvance(java.util.function.Consumer)\E$
^\Qjava.util.IdentityHashMap$ValueSpliterator.forEachRemaining(java.util.function.Consumer)\E$
^\Qjava.util.IdentityHashMap$ValueSpliterator.tryAdvance(java.util.function.Consumer)\E$
^\Qjava.util.IdentityHashMap$Values.toArray(java.lang.Object[])\E$
^\Qjava.util.IdentityHashMap.forEach(java.util.function.BiConsumer)\E$
^\Qjava.util.IdentityHashMap.replaceAll(java.util.function.BiFunction)\E$
^\Qjava.util.Iterator.forEachRemaining(java.util.function.Consumer)\E$
^\Qjava.util.LinkedHashMap$LinkedEntrySet.forEach(java.util.function.Consumer)\E$
^\Qjava.util.LinkedHashMap$LinkedKeySet.forEach(java.util.function.Consumer)\E$
^\Qjava.util.LinkedHashMap$LinkedValues.forEach(java.util.function.Consumer)\E$
^\Qjava.util.LinkedHashMap.forEach(java.util.function.BiConsumer)\E$
^\Qjava.util.LinkedHashMap.replaceAll(java.util.function.BiFunction)\E$
^\Qjava.util.LinkedList$LLSpliterator.forEachRemaining(java.util.function.Consumer)\E$
^\Qjava.util.LinkedList$LLSpliterator.tryAdvance(java.util.function.Consumer)\E$
^\Qjava.util.LinkedList$ListItr.forEachRemaining(java.util.function.Consumer)\E$
^\Qjava.util.LinkedList.toArray(java.lang.Object[])\E$
^\Qjava.util.List.containsAll(java.util.Collection)\E$
^\Qjava.util.List.hashCode()\E$
^\Qjava.util.List.removeAll(java.util.Collection)\E$
^\Qjava.util.List.retainAll(java.util.Collection)\E$
^\Qjava.util.List.sort(java.util.Comparator)\E$
^\Qjava.util.List.toArray(java.lang.Object[])\E$
^\Qjava.util.Map$Entry.comparingByKey()\E$
^\Qjava.util.Map$Entry.comparingByKey(java.util.Comparator)\E$
^\Qjava.util.Map$Entry.comparingByValue()\E$
^\Qjava.util.Map$Entry.comparingByValue(java.util.Comparator)\E$
^\Qjava.util.Map$Entry.hashCode()\E$
^\Qjava.util.Map.compute(java.lang.Object, java.util.function.BiFunction)\E$
^\Qjava.util.Map.computeIfAbsent(java.lang.Object, java.util.function.Function)\E$
^\Qjava.util.Map.computeIfPresent(java.lang.Object, java.util.function.BiFunction)\E$
^\Qjava.util.Map.forEach(java.util.function.BiConsumer)\E$
^\Qjava.util.Map.hashCode()\E$
^\Qjava.util.Map.merge(java.lang.Object, java.lang.Object, java.util.function.BiFunction)\E$
^\Qjava.util.Map.replaceAll(java.util.function.BiFunction)\E$
^\Qjava.util.Objects.compare(java.lang.Object, java.lang.Object, java.util.Comparator)\E$
^\Qjava.util.Objects.hash(java.lang.Object[])\E$
^\Qjava.util.Objects.hashCode(java.lang.Object)\E$
^\Qjava.util.Objects.requireNonNull(java.lang.Object)\E$
^\Qjava.util.Objects.requireNonNull(java.lang.Object, java.lang.String)\E$
^\Qjava.util.Objects.requireNonNull(java.lang.Object, java.util.function.Supplier)\E$
^\Qjava.util.Objects.toString(java.lang.Object)\E$
^\Qjava.util.Random.<init>()\E$
^\Qjava.util.Set.containsAll(java.util.Collection)\E$
^\Qjava.util.Set.hashCode()\E$
^\Qjava.util.Set.removeAll(java.util.Collection)\E$
^\Qjava.util.Set.retainAll(java.util.Collection)\E$
^\Qjava.util.Set.toArray(java.lang.Object[])\E$
^\Qjava.util.SortedMap.comparator()\E$
^\Qjava.util.SortedSet.comparator()\E$
^\Qjava.util.TreeMap$AscendingSubMap.comparator()\E$
^\Qjava.util.TreeMap$DescendingKeySpliterator.forEachRemaining(java.util.function.Consumer)\E$
^\Qjava.util.TreeMap$DescendingKeySpliterator.tryAdvance(java.util.function.Consumer)\E$
^\Qjava.util.TreeMap$DescendingSubMap.comparator()\E$
^\Qjava.util.TreeMap$EntrySpliterator.forEachRemaining(java.util.function.Consumer)\E$
^\Qjava.util.TreeMap$EntrySpliterator.tryAdvance(java.util.function.Consumer)\E$
^\Qjava.util.TreeMap$KeySet.<init>(java.util.NavigableMap)\E$
^\Qjava.util.TreeMap$KeySet.comparator()\E$
^\Qjava.util.TreeMap$KeySpliterator.forEachRemaining(java.util.function.Consumer)\E$
^\Qjava.util.TreeMap$KeySpliterator.getComparator()\E$
^\Qjava.util.TreeMap$KeySpliterator.tryAdvance(java.util.function.Consumer)\E$
^\Qjava.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator.forEachRemaining(java.util.function.Consumer)\E$
^\Qjava.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator.tryAdvance(java.util.function.Consumer)\E$
^\Qjava.util.TreeMap$NavigableSubMap$SubMapKeyIterator.forEachRemaining(java.util.function.Consumer)\E$
^\Qjava.util.TreeMap$NavigableSubMap$SubMapKeyIterator.getComparator()\E$
^\Qjava.util.TreeMap$NavigableSubMap$SubMapKeyIterator.tryAdvance(java.util.function.Consumer)\E$
^\Qjava.util.TreeMap$SubMap.comparator()\E$
^\Qjava.util.TreeMap$ValueSpliterator.forEachRemaining(java.util.function.Consumer)\E$
^\Qjava.util.TreeMap$ValueSpliterator.tryAdvance(java.util.function.Consumer)\E$
^\Qjava.util.TreeMap.<init>(java.util.Comparator)\E$
^\Qjava.util.TreeMap.buildFromSorted(int, int, int, int, java.util.Iterator, java.io.ObjectInputStream, java.lang.Object)\E$
^\Qjava.util.TreeMap.buildFromSorted(int, java.util.Iterator, java.io.ObjectInputStream, java.lang.Object)\E$
^\Qjava.util.TreeMap.colorOf(java.util.TreeMap$Entry)\E$
^\Qjava.util.TreeMap.comparator()\E$
^\Qjava.util.TreeMap.exportEntry(java.util.TreeMap$Entry)\E$
^\Qjava.util.TreeMap.forEach(java.util.function.BiConsumer)\E$
^\Qjava.util.TreeMap.key(java.util.TreeMap$Entry)\E$
^\Qjava.util.TreeMap.keyOrNull(java.util.TreeMap$Entry)\E$
^\Qjava.util.TreeMap.keySpliteratorFor(java.util.NavigableMap)\E$
^\Qjava.util.TreeMap.leftOf(java.util.TreeMap$Entry)\E$
^\Qjava.util.TreeMap.parentOf(java.util.TreeMap$Entry)\E$
^\Qjava.util.TreeMap.predecessor(java.util.TreeMap$Entry)\E$
^\Qjava.util.TreeMap.replaceAll(java.util.function.BiFunction)\E$
^\Qjava.util.TreeMap.rightOf(java.util.TreeMap$Entry)\E$
^\Qjava.util.TreeMap.setColor(java.util.TreeMap$Entry, boolean)\E$
^\Qjava.util.TreeMap.successor(java.util.TreeMap$Entry)\E$
^\Qjava.util.TreeSet.<init>(java.util.Comparator)\E$
^\Qjava.util.TreeSet.comparator()\E$
^\Qjava.util.WeakHashMap$EntrySet.toArray(java.lang.Object[])\E$
^\Qjava.util.WeakHashMap$EntrySpliterator.forEachRemaining(java.util.function.Consumer)\E$
^\Qjava.util.WeakHashMap$EntrySpliterator.tryAdvance(java.util.function.Consumer)\E$
^\Qjava.util.WeakHashMap$KeySpliterator.forEachRemaining(java.util.function.Consumer)\E$
^\Qjava.util.WeakHashMap$KeySpliterator.tryAdvance(java.util.function.Consumer)\E$
^\Qjava.util.WeakHashMap$ValueSpliterator.forEachRemaining(java.util.function.Consumer)\E$
^\Qjava.util.WeakHashMap$ValueSpliterator.tryAdvance(java.util.function.Consumer)\E$
^\Qjava.util.WeakHashMap.forEach(java.util.function.BiConsumer)\E$
^\Qjava.util.WeakHashMap.replaceAll(java.util.function.BiFunction)\E$
